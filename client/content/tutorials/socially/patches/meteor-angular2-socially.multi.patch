From 46c1ac6b094f8ca0134542e51ce5742f6e72cf60 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 15:10:14 +0200
Subject: [PATCH 001/259] Add README file

---
 README.md | 2 ++
 1 file changed, 2 insertions(+)
 create mode 100644 README.md

diff --git a/README.md b/README.md
new file mode 100644
index 0000000..bf634c1
--- /dev/null
+++ b/README.md
@@ -0,0 +1,2 @@
+# Angular2-Meteor Tutorial
+Tutorial is based on building Angular2 UI for a Meteor app called Socially.
\ No newline at end of file
-- 
2.7.4


From 974ef572a5fd6e4f308aae1624b1870cf31cb82b Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 15:11:01 +0200
Subject: [PATCH 002/259] Step 0.1: add client/index.html

---
 client/index.html | 3 +++
 1 file changed, 3 insertions(+)
 create mode 100644 client/index.html

diff --git a/client/index.html b/client/index.html
new file mode 100644
index 0000000..3887661
--- /dev/null
+++ b/client/index.html
@@ -0,0 +1,3 @@
+<body>
+<p>Nothing here</p>
+</body>
\ No newline at end of file
-- 
2.7.4


From 816757781e91a0f2ce5e3b5ab9b290fb500ca4e3 Mon Sep 17 00:00:00 2001
From: Uri Goldshtein <uri.goldshtein@gmail.com>
Date: Fri, 13 May 2016 21:56:51 +0300
Subject: [PATCH 003/259] Step 0.2: Add the angular2-meteor dependencies

---
 .gitignore       | 37 +++++++++++++++++++++++++++++++++++++
 .meteor/packages |  3 ++-
 .meteor/versions |  8 ++++----
 package.json     | 13 ++++++++++++-
 4 files changed, 55 insertions(+), 6 deletions(-)
 create mode 100644 .gitignore

diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..68dc293
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,37 @@
+# Created by .ignore support plugin (hsz.mobi)
+### Node template
+# Logs
+logs
+*.log
+npm-debug.log*
+
+# Runtime data
+pids
+*.pid
+*.seed
+
+# Directory for instrumented libs generated by jscoverage/JSCover
+lib-cov
+
+# Coverage directory used by tools like istanbul
+coverage
+
+# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)
+.grunt
+
+# node-waf configuration
+.lock-wscript
+
+# Compiled binary addons (http://nodejs.org/api/addons.html)
+build/Release
+
+# Dependency directories
+node_modules
+jspm_packages
+
+# Optional npm cache directory
+.npm
+
+# Optional REPL history
+.node_repl_history
+
diff --git a/.meteor/packages b/.meteor/packages
index a9f8340..db449bd 100644
--- a/.meteor/packages
+++ b/.meteor/packages
@@ -7,7 +7,6 @@
 meteor-base             # Packages every Meteor app needs to have
 mobile-experience       # Packages for a great mobile UX
 mongo                   # The database Meteor supports right now
-blaze-html-templates    # Compile .html files into Meteor Blaze views
 session                 # Client-side reactive dictionary for your app
 jquery                  # Helpful client-side library
 tracker                 # Meteor's client-side reactive programming library
@@ -18,3 +17,5 @@ ecmascript              # Enable ECMAScript2015+ syntax in app code
 
 autopublish             # Publish all data to the clients (for prototyping)
 insecure                # Allow all DB writes from clients (for prototyping)
+angular2-compilers
+barbatus:angular2-runtime
diff --git a/.meteor/versions b/.meteor/versions
index e794fc0..64168f9 100644
--- a/.meteor/versions
+++ b/.meteor/versions
@@ -1,16 +1,18 @@
 allow-deny@1.0.4
+angular2-compilers@0.5.7
+angular2-html-templates@0.5.3
 autopublish@1.0.7
 autoupdate@1.2.9
 babel-compiler@6.6.4
 babel-runtime@0.1.8
+barbatus:angular2-runtime@0.5.0
+barbatus:typescript@0.3.3
 base64@1.0.8
 binary-heap@1.0.8
 blaze@2.1.7
-blaze-html-templates@1.0.4
 blaze-tools@1.0.8
 boilerplate-generator@1.0.8
 caching-compiler@1.0.4
-caching-html-compiler@1.0.6
 callback-hook@1.0.8
 check@1.2.1
 ddp@1.2.5
@@ -62,8 +64,6 @@ spacebars-compiler@1.0.11
 standard-minifier-css@1.0.6
 standard-minifier-js@1.0.6
 standard-minifiers@1.0.6
-templating@1.1.9
-templating-tools@1.0.4
 tracker@1.0.13
 ui@1.0.11
 underscore@1.0.8
diff --git a/package.json b/package.json
index 183abe2..2513a0c 100644
--- a/package.json
+++ b/package.json
@@ -5,6 +5,17 @@
     "start": "meteor run"
   },
   "dependencies": {
-    "meteor-node-stubs": "^0.2.3"
+    "@angular/common": "^2.0.0-rc.4",
+    "@angular/compiler": "^2.0.0-rc.4",
+    "@angular/core": "^2.0.0-rc.4",
+    "@angular/platform-browser": "^2.0.0-rc.4",
+    "@angular/platform-browser-dynamic": "^2.0.0-rc.4",
+    "angular2-meteor": "^0.5.6",
+    "angular2-meteor-polyfills": "^0.1.1",
+    "es6-shim": "^0.35.1",
+    "meteor-node-stubs": "^0.2.3",
+    "reflect-metadata": "^0.1.2",
+    "rxjs": "5.0.0-beta.6",
+    "zone.js": "^0.6.12"
   }
 }
-- 
2.7.4


From 0d707e3f5f192172d481a9fcc9d8921211dba26d Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 15:16:27 +0200
Subject: [PATCH 004/259] Step 0.3: Add TypeScript configuration file

---
 tsconfig.json | 21 +++++++++++++++++++++
 1 file changed, 21 insertions(+)
 create mode 100644 tsconfig.json

diff --git a/tsconfig.json b/tsconfig.json
new file mode 100644
index 0000000..eb4cae2
--- /dev/null
+++ b/tsconfig.json
@@ -0,0 +1,21 @@
+{
+  "compilerOptions": {
+    "experimentalDecorators": true,
+    "module": "commonjs",
+    "target": "es5",
+    "isolatedModules": false,
+    "moduleResolution": "node",
+    "emitDecoratorMetadata": true,
+    "removeComments": false,
+    "noImplicitAny": false,
+    "sourceMap": true
+  },
+  "filesGlob": [
+    "client/**/*.ts",
+    "server/**/*.ts",
+    "typings/**/*.d.ts"
+  ],
+  "exclude": [
+    "node_modules"
+  ]
+}
-- 
2.7.4


From 64d566d664de36b92caa4ddcaa28f11678851e23 Mon Sep 17 00:00:00 2001
From: Uri Goldshtein <uri.goldshtein@gmail.com>
Date: Fri, 13 May 2016 22:03:21 +0300
Subject: [PATCH 005/259] Step 0.5: Added Typings dependencies

---
 typings.json                                       |  10 +
 typings/browser.d.ts                               |   3 +
 typings/browser/ambient/es6-shim/index.d.ts        | 670 +++++++++++++++
 typings/browser/ambient/meteor/index.d.ts          | 831 +++++++++++++++++++
 typings/browser/definitions/es6-promise/index.d.ts |  84 ++
 typings/main.d.ts                                  |   3 +
 typings/main/ambient/es6-shim/index.d.ts           | 670 +++++++++++++++
 typings/main/ambient/meteor/index.d.ts             | 898 +++++++++++++++++++++
 typings/main/definitions/es6-promise/index.d.ts    |  84 ++
 9 files changed, 3253 insertions(+)
 create mode 100644 typings.json
 create mode 100644 typings/browser.d.ts
 create mode 100644 typings/browser/ambient/es6-shim/index.d.ts
 create mode 100644 typings/browser/ambient/meteor/index.d.ts
 create mode 100644 typings/browser/definitions/es6-promise/index.d.ts
 create mode 100644 typings/main.d.ts
 create mode 100644 typings/main/ambient/es6-shim/index.d.ts
 create mode 100644 typings/main/ambient/meteor/index.d.ts
 create mode 100644 typings/main/definitions/es6-promise/index.d.ts

diff --git a/typings.json b/typings.json
new file mode 100644
index 0000000..77adee2
--- /dev/null
+++ b/typings.json
@@ -0,0 +1,10 @@
+{
+  "name": "socially",
+  "version": false,
+  "dependencies": {
+    "es6-promise": "registry:npm/es6-promise#3.0.0+20160211003958"
+  },
+  "ambientDependencies": {
+    "es6-shim": "registry:dt/es6-shim#0.31.2+20160317120654"
+  }
+}
diff --git a/typings/browser.d.ts b/typings/browser.d.ts
new file mode 100644
index 0000000..e496a98
--- /dev/null
+++ b/typings/browser.d.ts
@@ -0,0 +1,3 @@
+/// <reference path="browser/ambient/es6-shim/index.d.ts" />
+/// <reference path="browser/ambient/meteor/index.d.ts" />
+/// <reference path="browser/definitions/es6-promise/index.d.ts" />
diff --git a/typings/browser/ambient/es6-shim/index.d.ts b/typings/browser/ambient/es6-shim/index.d.ts
new file mode 100644
index 0000000..fe86f5e
--- /dev/null
+++ b/typings/browser/ambient/es6-shim/index.d.ts
@@ -0,0 +1,670 @@
+// Generated by typings
+// Source: https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/7de6c3dd94feaeb21f20054b9f30d5dabc5efabd/es6-shim/es6-shim.d.ts
+// Type definitions for es6-shim v0.31.2
+// Project: https://github.com/paulmillr/es6-shim
+// Definitions by: Ron Buckton <http://github.com/rbuckton>
+// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
+
+declare type PropertyKey = string | number | symbol;
+
+interface IteratorResult<T> {
+    done: boolean;
+    value?: T;
+}
+
+interface IterableShim<T> {
+    /**
+      * Shim for an ES6 iterable. Not intended for direct use by user code.
+      */
+    "_es6-shim iterator_"(): Iterator<T>;
+}
+
+interface Iterator<T> {
+    next(value?: any): IteratorResult<T>;
+    return?(value?: any): IteratorResult<T>;
+    throw?(e?: any): IteratorResult<T>;
+}
+
+interface IterableIteratorShim<T> extends IterableShim<T>, Iterator<T> {
+    /**
+      * Shim for an ES6 iterable iterator. Not intended for direct use by user code.
+      */
+    "_es6-shim iterator_"(): IterableIteratorShim<T>;
+}
+
+interface StringConstructor {
+    /**
+      * Return the String value whose elements are, in order, the elements in the List elements.
+      * If length is 0, the empty string is returned.
+      */
+    fromCodePoint(...codePoints: number[]): string;
+
+    /**
+      * String.raw is intended for use as a tag function of a Tagged Template String. When called
+      * as such the first argument will be a well formed template call site object and the rest
+      * parameter will contain the substitution values.
+      * @param template A well-formed template string call site representation.
+      * @param substitutions A set of substitution values.
+      */
+    raw(template: TemplateStringsArray, ...substitutions: any[]): string;
+}
+
+interface String {
+    /**
+      * Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point
+      * value of the UTF-16 encoded code point starting at the string element at position pos in
+      * the String resulting from converting this object to a String.
+      * If there is no element at that position, the result is undefined.
+      * If a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.
+      */
+    codePointAt(pos: number): number;
+
+    /**
+      * Returns true if searchString appears as a substring of the result of converting this
+      * object to a String, at one or more positions that are
+      * greater than or equal to position; otherwise, returns false.
+      * @param searchString search string
+      * @param position If position is undefined, 0 is assumed, so as to search all of the String.
+      */
+    includes(searchString: string, position?: number): boolean;
+
+    /**
+      * Returns true if the sequence of elements of searchString converted to a String is the
+      * same as the corresponding elements of this object (converted to a String) starting at
+      * endPosition – length(this). Otherwise returns false.
+      */
+    endsWith(searchString: string, endPosition?: number): boolean;
+
+    /**
+      * Returns a String value that is made from count copies appended together. If count is 0,
+      * T is the empty String is returned.
+      * @param count number of copies to append
+      */
+    repeat(count: number): string;
+
+    /**
+      * Returns true if the sequence of elements of searchString converted to a String is the
+      * same as the corresponding elements of this object (converted to a String) starting at
+      * position. Otherwise returns false.
+      */
+    startsWith(searchString: string, position?: number): boolean;
+
+    /**
+      * Returns an <a> HTML anchor element and sets the name attribute to the text value
+      * @param name
+      */
+    anchor(name: string): string;
+
+    /** Returns a <big> HTML element */
+    big(): string;
+
+    /** Returns a <blink> HTML element */
+    blink(): string;
+
+    /** Returns a <b> HTML element */
+    bold(): string;
+
+    /** Returns a <tt> HTML element */
+    fixed(): string
+
+    /** Returns a <font> HTML element and sets the color attribute value */
+    fontcolor(color: string): string
+
+    /** Returns a <font> HTML element and sets the size attribute value */
+    fontsize(size: number): string;
+
+    /** Returns a <font> HTML element and sets the size attribute value */
+    fontsize(size: string): string;
+
+    /** Returns an <i> HTML element */
+    italics(): string;
+
+    /** Returns an <a> HTML element and sets the href attribute value */
+    link(url: string): string;
+
+    /** Returns a <small> HTML element */
+    small(): string;
+
+    /** Returns a <strike> HTML element */
+    strike(): string;
+
+    /** Returns a <sub> HTML element */
+    sub(): string;
+
+    /** Returns a <sup> HTML element */
+    sup(): string;
+
+    /**
+      * Shim for an ES6 iterable. Not intended for direct use by user code.
+      */
+    "_es6-shim iterator_"(): IterableIteratorShim<string>;
+}
+
+interface ArrayConstructor {
+    /**
+      * Creates an array from an array-like object.
+      * @param arrayLike An array-like object to convert to an array.
+      * @param mapfn A mapping function to call on every element of the array.
+      * @param thisArg Value of 'this' used to invoke the mapfn.
+      */
+    from<T, U>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => U, thisArg?: any): Array<U>;
+
+    /**
+      * Creates an array from an iterable object.
+      * @param iterable An iterable object to convert to an array.
+      * @param mapfn A mapping function to call on every element of the array.
+      * @param thisArg Value of 'this' used to invoke the mapfn.
+      */
+    from<T, U>(iterable: IterableShim<T>, mapfn: (v: T, k: number) => U, thisArg?: any): Array<U>;
+
+    /**
+      * Creates an array from an array-like object.
+      * @param arrayLike An array-like object to convert to an array.
+      */
+    from<T>(arrayLike: ArrayLike<T>): Array<T>;
+
+    /**
+      * Creates an array from an iterable object.
+      * @param iterable An iterable object to convert to an array.
+      */
+    from<T>(iterable: IterableShim<T>): Array<T>;
+
+    /**
+      * Returns a new array from a set of elements.
+      * @param items A set of elements to include in the new array object.
+      */
+    of<T>(...items: T[]): Array<T>;
+}
+
+interface Array<T> {
+    /**
+      * Returns the value of the first element in the array where predicate is true, and undefined
+      * otherwise.
+      * @param predicate find calls predicate once for each element of the array, in ascending
+      * order, until it finds one where predicate returns true. If such an element is found, find
+      * immediately returns that element value. Otherwise, find returns undefined.
+      * @param thisArg If provided, it will be used as the this value for each invocation of
+      * predicate. If it is not provided, undefined is used instead.
+      */
+    find(predicate: (value: T, index: number, obj: Array<T>) => boolean, thisArg?: any): T;
+
+    /**
+      * Returns the index of the first element in the array where predicate is true, and undefined
+      * otherwise.
+      * @param predicate find calls predicate once for each element of the array, in ascending
+      * order, until it finds one where predicate returns true. If such an element is found, find
+      * immediately returns that element value. Otherwise, find returns undefined.
+      * @param thisArg If provided, it will be used as the this value for each invocation of
+      * predicate. If it is not provided, undefined is used instead.
+      */
+    findIndex(predicate: (value: T) => boolean, thisArg?: any): number;
+
+    /**
+      * Returns the this object after filling the section identified by start and end with value
+      * @param value value to fill array section with
+      * @param start index to start filling the array at. If start is negative, it is treated as
+      * length+start where length is the length of the array.
+      * @param end index to stop filling the array at. If end is negative, it is treated as
+      * length+end.
+      */
+    fill(value: T, start?: number, end?: number): T[];
+
+    /**
+      * Returns the this object after copying a section of the array identified by start and end
+      * to the same array starting at position target
+      * @param target If target is negative, it is treated as length+target where length is the
+      * length of the array.
+      * @param start If start is negative, it is treated as length+start. If end is negative, it
+      * is treated as length+end.
+      * @param end If not specified, length of the this object is used as its default value.
+      */
+    copyWithin(target: number, start: number, end?: number): T[];
+
+    /**
+      * Returns an array of key, value pairs for every entry in the array
+      */
+    entries(): IterableIteratorShim<[number, T]>;
+
+    /**
+      * Returns an list of keys in the array
+      */
+    keys(): IterableIteratorShim<number>;
+
+    /**
+      * Returns an list of values in the array
+      */
+    values(): IterableIteratorShim<T>;
+
+    /**
+      * Shim for an ES6 iterable. Not intended for direct use by user code.
+      */
+    "_es6-shim iterator_"(): IterableIteratorShim<T>;
+}
+
+interface NumberConstructor {
+    /**
+      * The value of Number.EPSILON is the difference between 1 and the smallest value greater than 1
+      * that is representable as a Number value, which is approximately:
+      * 2.2204460492503130808472633361816 x 10‍−‍16.
+      */
+    EPSILON: number;
+
+    /**
+      * Returns true if passed value is finite.
+      * Unlike the global isFininte, Number.isFinite doesn't forcibly convert the parameter to a
+      * number. Only finite values of the type number, result in true.
+      * @param number A numeric value.
+      */
+    isFinite(number: number): boolean;
+
+    /**
+      * Returns true if the value passed is an integer, false otherwise.
+      * @param number A numeric value.
+      */
+    isInteger(number: number): boolean;
+
+    /**
+      * Returns a Boolean value that indicates whether a value is the reserved value NaN (not a
+      * number). Unlike the global isNaN(), Number.isNaN() doesn't forcefully convert the parameter
+      * to a number. Only values of the type number, that are also NaN, result in true.
+      * @param number A numeric value.
+      */
+    isNaN(number: number): boolean;
+
+    /**
+      * Returns true if the value passed is a safe integer.
+      * @param number A numeric value.
+      */
+    isSafeInteger(number: number): boolean;
+
+    /**
+      * The value of the largest integer n such that n and n + 1 are both exactly representable as
+      * a Number value.
+      * The value of Number.MIN_SAFE_INTEGER is 9007199254740991 2^53 − 1.
+      */
+    MAX_SAFE_INTEGER: number;
+
+    /**
+      * The value of the smallest integer n such that n and n − 1 are both exactly representable as
+      * a Number value.
+      * The value of Number.MIN_SAFE_INTEGER is −9007199254740991 (−(2^53 − 1)).
+      */
+    MIN_SAFE_INTEGER: number;
+
+    /**
+      * Converts a string to a floating-point number.
+      * @param string A string that contains a floating-point number.
+      */
+    parseFloat(string: string): number;
+
+    /**
+      * Converts A string to an integer.
+      * @param s A string to convert into a number.
+      * @param radix A value between 2 and 36 that specifies the base of the number in numString.
+      * If this argument is not supplied, strings with a prefix of '0x' are considered hexadecimal.
+      * All other strings are considered decimal.
+      */
+    parseInt(string: string, radix?: number): number;
+}
+
+interface ObjectConstructor {
+    /**
+      * Copy the values of all of the enumerable own properties from one or more source objects to a
+      * target object. Returns the target object.
+      * @param target The target object to copy to.
+      * @param sources One or more source objects to copy properties from.
+      */
+    assign(target: any, ...sources: any[]): any;
+
+    /**
+      * Returns true if the values are the same value, false otherwise.
+      * @param value1 The first value.
+      * @param value2 The second value.
+      */
+    is(value1: any, value2: any): boolean;
+
+    /**
+      * Sets the prototype of a specified object o to  object proto or null. Returns the object o.
+      * @param o The object to change its prototype.
+      * @param proto The value of the new prototype or null.
+      * @remarks Requires `__proto__` support.
+      */
+    setPrototypeOf(o: any, proto: any): any;
+}
+
+interface RegExp {
+    /**
+      * Returns a string indicating the flags of the regular expression in question. This field is read-only.
+      * The characters in this string are sequenced and concatenated in the following order:
+      *
+      *    - "g" for global
+      *    - "i" for ignoreCase
+      *    - "m" for multiline
+      *    - "u" for unicode
+      *    - "y" for sticky
+      *
+      * If no flags are set, the value is the empty string.
+      */
+    flags: string;
+}
+
+interface Math {
+    /**
+      * Returns the number of leading zero bits in the 32-bit binary representation of a number.
+      * @param x A numeric expression.
+      */
+    clz32(x: number): number;
+
+    /**
+      * Returns the result of 32-bit multiplication of two numbers.
+      * @param x First number
+      * @param y Second number
+      */
+    imul(x: number, y: number): number;
+
+    /**
+      * Returns the sign of the x, indicating whether x is positive, negative or zero.
+      * @param x The numeric expression to test
+      */
+    sign(x: number): number;
+
+    /**
+      * Returns the base 10 logarithm of a number.
+      * @param x A numeric expression.
+      */
+    log10(x: number): number;
+
+    /**
+      * Returns the base 2 logarithm of a number.
+      * @param x A numeric expression.
+      */
+    log2(x: number): number;
+
+    /**
+      * Returns the natural logarithm of 1 + x.
+      * @param x A numeric expression.
+      */
+    log1p(x: number): number;
+
+    /**
+      * Returns the result of (e^x - 1) of x (e raised to the power of x, where e is the base of
+      * the natural logarithms).
+      * @param x A numeric expression.
+      */
+    expm1(x: number): number;
+
+    /**
+      * Returns the hyperbolic cosine of a number.
+      * @param x A numeric expression that contains an angle measured in radians.
+      */
+    cosh(x: number): number;
+
+    /**
+      * Returns the hyperbolic sine of a number.
+      * @param x A numeric expression that contains an angle measured in radians.
+      */
+    sinh(x: number): number;
+
+    /**
+      * Returns the hyperbolic tangent of a number.
+      * @param x A numeric expression that contains an angle measured in radians.
+      */
+    tanh(x: number): number;
+
+    /**
+      * Returns the inverse hyperbolic cosine of a number.
+      * @param x A numeric expression that contains an angle measured in radians.
+      */
+    acosh(x: number): number;
+
+    /**
+      * Returns the inverse hyperbolic sine of a number.
+      * @param x A numeric expression that contains an angle measured in radians.
+      */
+    asinh(x: number): number;
+
+    /**
+      * Returns the inverse hyperbolic tangent of a number.
+      * @param x A numeric expression that contains an angle measured in radians.
+      */
+    atanh(x: number): number;
+
+    /**
+      * Returns the square root of the sum of squares of its arguments.
+      * @param values Values to compute the square root for.
+      *     If no arguments are passed, the result is +0.
+      *     If there is only one argument, the result is the absolute value.
+      *     If any argument is +Infinity or -Infinity, the result is +Infinity.
+      *     If any argument is NaN, the result is NaN.
+      *     If all arguments are either +0 or −0, the result is +0.
+      */
+    hypot(...values: number[]): number;
+
+    /**
+      * Returns the integral part of the a numeric expression, x, removing any fractional digits.
+      * If x is already an integer, the result is x.
+      * @param x A numeric expression.
+      */
+    trunc(x: number): number;
+
+    /**
+      * Returns the nearest single precision float representation of a number.
+      * @param x A numeric expression.
+      */
+    fround(x: number): number;
+
+    /**
+      * Returns an implementation-dependent approximation to the cube root of number.
+      * @param x A numeric expression.
+      */
+    cbrt(x: number): number;
+}
+
+interface PromiseLike<T> {
+    /**
+    * Attaches callbacks for the resolution and/or rejection of the Promise.
+    * @param onfulfilled The callback to execute when the Promise is resolved.
+    * @param onrejected The callback to execute when the Promise is rejected.
+    * @returns A Promise for the completion of which ever callback is executed.
+    */
+    then<TResult>(onfulfilled?: (value: T) => TResult | PromiseLike<TResult>, onrejected?: (reason: any) => TResult | PromiseLike<TResult>): PromiseLike<TResult>;
+    then<TResult>(onfulfilled?: (value: T) => TResult | PromiseLike<TResult>, onrejected?: (reason: any) => void): PromiseLike<TResult>;
+}
+
+/**
+ * Represents the completion of an asynchronous operation
+ */
+interface Promise<T> {
+    /**
+    * Attaches callbacks for the resolution and/or rejection of the Promise.
+    * @param onfulfilled The callback to execute when the Promise is resolved.
+    * @param onrejected The callback to execute when the Promise is rejected.
+    * @returns A Promise for the completion of which ever callback is executed.
+    */
+    then<TResult>(onfulfilled?: (value: T) => TResult | PromiseLike<TResult>, onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Promise<TResult>;
+    then<TResult>(onfulfilled?: (value: T) => TResult | PromiseLike<TResult>, onrejected?: (reason: any) => void): Promise<TResult>;
+
+    /**
+     * Attaches a callback for only the rejection of the Promise.
+     * @param onrejected The callback to execute when the Promise is rejected.
+     * @returns A Promise for the completion of the callback.
+     */
+    catch(onrejected?: (reason: any) => T | PromiseLike<T>): Promise<T>;
+    catch(onrejected?: (reason: any) => void): Promise<T>;
+}
+
+interface PromiseConstructor {
+    /**
+      * A reference to the prototype.
+      */
+    prototype: Promise<any>;
+
+    /**
+     * Creates a new Promise.
+     * @param executor A callback used to initialize the promise. This callback is passed two arguments:
+     * a resolve callback used resolve the promise with a value or the result of another promise,
+     * and a reject callback used to reject the promise with a provided reason or error.
+     */
+    new <T>(executor: (resolve: (value?: T | PromiseLike<T>) => void, reject: (reason?: any) => void) => void): Promise<T>;
+
+    /**
+     * Creates a Promise that is resolved with an array of results when all of the provided Promises
+     * resolve, or rejected when any Promise is rejected.
+     * @param values An array of Promises.
+     * @returns A new Promise.
+     */
+    all<T>(values: IterableShim<T | PromiseLike<T>>): Promise<T[]>;
+
+    /**
+     * Creates a Promise that is resolved or rejected when any of the provided Promises are resolved
+     * or rejected.
+     * @param values An array of Promises.
+     * @returns A new Promise.
+     */
+    race<T>(values: IterableShim<T | PromiseLike<T>>): Promise<T>;
+
+    /**
+     * Creates a new rejected promise for the provided reason.
+     * @param reason The reason the promise was rejected.
+     * @returns A new rejected Promise.
+     */
+    reject(reason: any): Promise<void>;
+
+    /**
+     * Creates a new rejected promise for the provided reason.
+     * @param reason The reason the promise was rejected.
+     * @returns A new rejected Promise.
+     */
+    reject<T>(reason: any): Promise<T>;
+
+    /**
+      * Creates a new resolved promise for the provided value.
+      * @param value A promise.
+      * @returns A promise whose internal state matches the provided promise.
+      */
+    resolve<T>(value: T | PromiseLike<T>): Promise<T>;
+
+    /**
+     * Creates a new resolved promise .
+     * @returns A resolved promise.
+     */
+    resolve(): Promise<void>;
+}
+
+declare var Promise: PromiseConstructor;
+
+interface Map<K, V> {
+    clear(): void;
+    delete(key: K): boolean;
+    forEach(callbackfn: (value: V, index: K, map: Map<K, V>) => void, thisArg?: any): void;
+    get(key: K): V;
+    has(key: K): boolean;
+    set(key: K, value?: V): Map<K, V>;
+    size: number;
+    entries(): IterableIteratorShim<[K, V]>;
+    keys(): IterableIteratorShim<K>;
+    values(): IterableIteratorShim<V>;
+}
+
+interface MapConstructor {
+    new <K, V>(): Map<K, V>;
+    new <K, V>(iterable: IterableShim<[K, V]>): Map<K, V>;
+    prototype: Map<any, any>;
+}
+
+declare var Map: MapConstructor;
+
+interface Set<T> {
+    add(value: T): Set<T>;
+    clear(): void;
+    delete(value: T): boolean;
+    forEach(callbackfn: (value: T, index: T, set: Set<T>) => void, thisArg?: any): void;
+    has(value: T): boolean;
+    size: number;
+    entries(): IterableIteratorShim<[T, T]>;
+    keys(): IterableIteratorShim<T>;
+    values(): IterableIteratorShim<T>;
+}
+
+interface SetConstructor {
+    new <T>(): Set<T>;
+    new <T>(iterable: IterableShim<T>): Set<T>;
+    prototype: Set<any>;
+}
+
+declare var Set: SetConstructor;
+
+interface WeakMap<K, V> {
+    delete(key: K): boolean;
+    get(key: K): V;
+    has(key: K): boolean;
+    set(key: K, value?: V): WeakMap<K, V>;
+}
+
+interface WeakMapConstructor {
+    new <K, V>(): WeakMap<K, V>;
+    new <K, V>(iterable: IterableShim<[K, V]>): WeakMap<K, V>;
+    prototype: WeakMap<any, any>;
+}
+
+declare var WeakMap: WeakMapConstructor;
+
+interface WeakSet<T> {
+    add(value: T): WeakSet<T>;
+    delete(value: T): boolean;
+    has(value: T): boolean;
+}
+
+interface WeakSetConstructor {
+    new <T>(): WeakSet<T>;
+    new <T>(iterable: IterableShim<T>): WeakSet<T>;
+    prototype: WeakSet<any>;
+}
+
+declare var WeakSet: WeakSetConstructor;
+
+declare namespace Reflect {
+    function apply(target: Function, thisArgument: any, argumentsList: ArrayLike<any>): any;
+    function construct(target: Function, argumentsList: ArrayLike<any>): any;
+    function defineProperty(target: any, propertyKey: PropertyKey, attributes: PropertyDescriptor): boolean;
+    function deleteProperty(target: any, propertyKey: PropertyKey): boolean;
+    function enumerate(target: any): IterableIteratorShim<any>;
+    function get(target: any, propertyKey: PropertyKey, receiver?: any): any;
+    function getOwnPropertyDescriptor(target: any, propertyKey: PropertyKey): PropertyDescriptor;
+    function getPrototypeOf(target: any): any;
+    function has(target: any, propertyKey: PropertyKey): boolean;
+    function isExtensible(target: any): boolean;
+    function ownKeys(target: any): Array<PropertyKey>;
+    function preventExtensions(target: any): boolean;
+    function set(target: any, propertyKey: PropertyKey, value: any, receiver?: any): boolean;
+    function setPrototypeOf(target: any, proto: any): boolean;
+}
+
+declare module "es6-shim" {
+    var String: StringConstructor;
+    var Array: ArrayConstructor;
+    var Number: NumberConstructor;
+    var Math: Math;
+    var Object: ObjectConstructor;
+    var Map: MapConstructor;
+    var Set: SetConstructor;
+    var WeakMap: WeakMapConstructor;
+    var WeakSet: WeakSetConstructor;
+    var Promise: PromiseConstructor;
+    namespace Reflect {
+        function apply(target: Function, thisArgument: any, argumentsList: ArrayLike<any>): any;
+        function construct(target: Function, argumentsList: ArrayLike<any>): any;
+        function defineProperty(target: any, propertyKey: PropertyKey, attributes: PropertyDescriptor): boolean;
+        function deleteProperty(target: any, propertyKey: PropertyKey): boolean;
+        function enumerate(target: any): Iterator<any>;
+        function get(target: any, propertyKey: PropertyKey, receiver?: any): any;
+        function getOwnPropertyDescriptor(target: any, propertyKey: PropertyKey): PropertyDescriptor;
+        function getPrototypeOf(target: any): any;
+        function has(target: any, propertyKey: PropertyKey): boolean;
+        function isExtensible(target: any): boolean;
+        function ownKeys(target: any): Array<PropertyKey>;
+        function preventExtensions(target: any): boolean;
+        function set(target: any, propertyKey: PropertyKey, value: any, receiver?: any): boolean;
+        function setPrototypeOf(target: any, proto: any): boolean;
+    }
+}
\ No newline at end of file
diff --git a/typings/browser/ambient/meteor/index.d.ts b/typings/browser/ambient/meteor/index.d.ts
new file mode 100644
index 0000000..4e87ff7
--- /dev/null
+++ b/typings/browser/ambient/meteor/index.d.ts
@@ -0,0 +1,831 @@
+// Generated by typings
+// Source: https://raw.githubusercontent.com/barbatus/meteor-typings/83c6933d0ef07abfd4a2a85b5ec41bc3949f6d28/meteor/1.3/meteor.d.ts
+// Type definitions for Meteor 1.3
+// Project: http://www.meteor.com/
+// Definitions by:
+// Alex Borodach <https://github.com/barbatus>,
+// Dave Allen <https://github.com/fullflavedave>
+
+declare module 'meteor/check' {
+  export module Match {
+    var Any: any;
+    var String: any;
+    var Integer: any;
+    var Boolean: any;
+    var undefined: any;
+    var Object: any;
+    function Optional(pattern: any): boolean;
+    function ObjectIncluding(dico: any): boolean;
+    function OneOf(...patterns: any[]): any;
+    function Where(condition: any): any;
+    function test(value: any, pattern: any): boolean;
+  }
+
+  export function check(value: any, pattern: any): void;
+}
+
+declare module 'meteor/meteor' {
+  import {Mongo} from 'meteor/mongo';
+  import {Blaze} from 'meteor/blaze';
+  import {EJSON} from 'meteor/ejson';
+
+  export module Meteor {
+    /** Global props **/
+    var isClient: boolean;
+    var isCordova: boolean;
+    var isServer: boolean;
+    var release: string;
+    var settings: { [id: string]: any };
+    /** props **/
+
+    /** User **/
+    interface UserEmail {
+      address: string;
+      verified: boolean;
+    }
+    interface User {
+      _id?: string;
+      username?: string;
+      emails?: UserEmail[];
+      createdAt?: number;
+      profile?: any;
+      services?: any;
+    }
+    function user(): User;
+    function userId(): string;
+    var users: Mongo.Collection<User>;
+    /** User **/
+
+    /** Status **/
+    enum StatusEnum {
+      connected,
+      connecting,
+      failed,
+      waiting,
+      offline
+    }
+    function status(): Meteor.StatusEnum;
+    /** Status **/
+
+    /** Event **/
+    interface Event {
+      type: string;
+      target: HTMLElement;
+      currentTarget: HTMLElement;
+      which: number;
+      stopPropagation(): void;
+      stopImmediatePropagation(): void;
+      preventDefault(): void;
+      isPropagationStopped(): boolean;
+      isImmediatePropagationStopped(): boolean;
+      isDefaultPrevented(): boolean;
+    }
+    interface EventHandlerFunction extends Function {
+      (event?: Meteor.Event, templateInstance?: Blaze.TemplateInstance): void;
+    }
+    interface EventMap {
+      [id: string]: Meteor.EventHandlerFunction;
+    }
+    /** Event **/
+
+    /** Login **/
+    interface LoginWithExternalServiceOptions {
+      requestPermissions?: string[];
+      requestOfflineToken?: Boolean;
+      forceApprovalPrompt?: Boolean;
+      loginUrlParameters?: Object;
+      redirectUrl?: string;
+      loginHint?: string;
+      loginStyle?: string;
+    }
+    function loginWithMeteorDeveloperAccount(options?: Meteor.LoginWithExternalServiceOptions, callback?: Function): void;
+    function loginWithFacebook(options?: Meteor.LoginWithExternalServiceOptions, callback?: Function): void;
+    function loginWithGithub(options?: Meteor.LoginWithExternalServiceOptions, callback?: Function): void;
+    function loginWithGoogle(options?: Meteor.LoginWithExternalServiceOptions, callback?: Function): void;
+    function loginWithMeetup(options?: Meteor.LoginWithExternalServiceOptions, callback?: Function): void;
+    function loginWithTwitter(options?: Meteor.LoginWithExternalServiceOptions, callback?: Function): void;
+    function loginWithWeibo(options?: Meteor.LoginWithExternalServiceOptions, callback?: Function): void;
+    function loggingIn(): boolean;
+    function loginWith<ExternalService>(options?: {
+      requestPermissions?: string[];
+      requestOfflineToken?: boolean;
+      loginUrlParameters?: Object;
+      userEmail?: string;
+      loginStyle?: string;
+      redirectUrl?: string;
+    }, callback?: Function): void;
+    function loginWithPassword(user: Object | string, password: string, callback?: Function): void;
+    function logout(callback?: Function): void;
+    function logoutOtherClients(callback?: Function): void;
+    /** Login **/
+
+    /** Error **/
+    var Error: ErrorStatic;
+    interface ErrorStatic {
+      new (error: string | number, reason?: string, details?: string): Error;
+    }
+    interface Error {
+      error: string | number;
+      reason?: string;
+      details?: string;
+    }
+    /** Error **/
+
+    /** Method **/
+    function methods(methods: Object): void;
+    function call(name: string, ...args: any[]): any;
+    function apply(name: string, args: EJSONable[], options?: {
+      wait?: boolean;
+      onResultReceived?: Function;
+    }, asyncCallback?: Function): any;
+    /** Method **/
+
+    /** Url **/
+    function absoluteUrl(path?: string, options?: {
+      secure?: boolean;
+      replaceLocalhost?: boolean;
+      rootUrl?: string;
+    }): string;
+    /** Url **/
+
+    /** Timeout **/
+    function setInterval(func: Function, delay: number): number;
+    function setTimeout(func: Function, delay: number): number;
+    function clearInterval(id: number): void;
+    function clearTimeout(id: number): void;
+    function defer(func: Function): void;
+    /** Timeout **/
+
+    /** Connection **/
+    interface Connection {
+      id: string;
+      close: Function;
+      onClose: Function;
+      clientAddress: string;
+      httpHeaders: Object;
+    }
+    function onConnection(callback: Function): void;
+    function reconnect(): void;
+    function disconnect(): void;
+    /** Connection **/
+
+    /** Pub/Sub **/
+    interface SubscriptionHandle {
+      stop(): void;
+      ready(): boolean;
+    }
+    interface LiveQueryHandle {
+      stop(): void;
+    }
+    function publish(name: string, func: Function): void;
+    function subscribe(name: string, ...args: any[]): Meteor.SubscriptionHandle;
+    /** Pub/Sub **/
+
+    /** utils **/
+    function startup(func: Function): void;
+    function wrapAsync(func: Function, context?: Object): any;
+    /** utils **/
+  }
+
+  interface Subscription {
+    added(collection: string, id: string, fields: Object): void;
+    changed(collection: string, id: string, fields: Object): void;
+    connection: Meteor.Connection;
+    error(error: Error): void;
+    onStop(func: Function): void;
+    ready(): void;
+    removed(collection: string, id: string): void;
+    stop(): void;
+    userId: string;
+  }
+}
+
+declare module 'meteor/ddp' {
+  import {Meteor} from 'meteor/meteor';
+
+  export module DDP {
+    interface DDPStatic {
+      subscribe(name: string, ...rest: any[]): Meteor.SubscriptionHandle;
+      call(method: string, ...parameters: any[]): void;
+      apply(method: string, ...parameters: any[]): void;
+      methods(IMeteorMethodsDictionary: any): any;
+      status(): DDPStatus;
+      reconnect(): void;
+      disconnect(): void;
+      onReconnect(): void;
+    }
+
+    interface DDPStatus {
+      connected: boolean;
+      status: Meteor.StatusEnum;
+      retryCount: number;
+      retryTime?: number;
+      reason?: string;
+    }
+
+    function connect(url: string): DDPStatic;
+  }
+}
+
+declare module 'meteor/ddp-common' {
+  export module DDPCommon {
+    interface MethodInvocation {
+      new (options: {}): MethodInvocation;
+
+      unblock(): void;
+
+      setUserId(userId: number): void;
+    }
+  }
+}
+
+declare module 'meteor/mongo' {
+  import {Meteor, Subscription} from 'meteor/meteor';
+
+  export module Mongo {
+    interface Selector {
+      [key: string]: any;
+    }
+    interface Selector extends Object { }
+    interface Modifier { }
+    interface SortSpecifier { }
+    interface FieldSpecifier {
+      [id: string]: Number;
+    }
+
+    interface AllowDenyOptions {
+      insert?: (userId: string, doc: any) => boolean;
+      update?: (userId: string, doc: any, fieldNames: string[], modifier: any) => boolean;
+      remove?: (userId: string, doc: any) => boolean;
+      fetch?: string[];
+      transform?: Function;
+    }
+
+    var Collection: CollectionStatic;
+    interface CollectionStatic {
+      new <T>(name: string, options?: {
+        connection?: Object;
+        idGeneration?: string;
+        transform?: Function;
+      }): Collection<T>;
+    }
+    interface Collection<T> {
+      allow(options: {
+        insert?: (userId: string, doc: T) => boolean;
+        update?: (userId: string, doc: T, fieldNames: string[], modifier: any) => boolean;
+        remove?: (userId: string, doc: T) => boolean;
+        fetch?: string[];
+        transform?: Function;
+      }): boolean;
+      deny(options: {
+        insert?: (userId: string, doc: T) => boolean;
+        update?: (userId: string, doc: T, fieldNames: string[], modifier: any) => boolean;
+        remove?: (userId: string, doc: T) => boolean;
+        fetch?: string[];
+        transform?: Function;
+      }): boolean;
+      find(selector?: Selector | ObjectID | string, options?: {
+        sort?: SortSpecifier;
+        skip?: number;
+        limit?: number;
+        fields?: FieldSpecifier;
+        reactive?: boolean;
+        transform?: Function;
+      }): Cursor<T>;
+      findOne(selector?: Selector | ObjectID | string, options?: {
+        sort?: SortSpecifier;
+        skip?: number;
+        fields?: FieldSpecifier;
+        reactive?: boolean;
+        transform?: Function;
+      }): T;
+      insert(doc: T, callback?: Function): string;
+      rawCollection(): any;
+      rawDatabase(): any;
+      remove(selector: Selector | ObjectID | string, callback?: Function): number;
+      update(selector: Selector | ObjectID | string, modifier: Modifier, options?: {
+        multi?: boolean;
+        upsert?: boolean;
+      }, callback?: Function): number;
+      upsert(selector: Selector | ObjectID | string, modifier: Modifier, options?: {
+        multi?: boolean;
+      }, callback?: Function): { numberAffected?: number; insertedId?: string; };
+      _ensureIndex(indexName: string, options?: { [key: string]: any }): void;
+    }
+
+    var Cursor: CursorStatic;
+    interface CursorStatic {
+      new <T>(): Cursor<T>;
+    }
+    interface ObserveCallbacks {
+      added?(document: Object): void;
+      addedAt?(document: Object, atIndex: number, before: Object): void;
+      changed?(newDocument: Object, oldDocument: Object): void;
+      changedAt?(newDocument: Object, oldDocument: Object, indexAt: number): void;
+      removed?(oldDocument: Object): void;
+      removedAt?(oldDocument: Object, atIndex: number): void;
+      movedTo?(document: Object, fromIndex: number, toIndex: number, before: Object): void;
+    }
+    interface ObserveChangesCallbacks {
+      added?(id: string, fields: Object): void;
+      addedBefore?(id: string, fields: Object, before: Object): void;
+      changed?(id: string, fields: Object): void;
+      movedBefore?(id: string, before: Object): void;
+      removed?(id: string): void;
+    }
+    interface Cursor<T> {
+      count(): number;
+      fetch(): Array<T>;
+      forEach(callback: <T>(doc: T, index: number, cursor: Cursor<T>) => void, thisArg?: any): void;
+      map<U>(callback: (doc: T, index: number, cursor: Cursor<T>) => U, thisArg?: any): Array<U>;
+      observe(callbacks: ObserveCallbacks): Meteor.LiveQueryHandle;
+      observeChanges(callbacks: ObserveChangesCallbacks): Meteor.LiveQueryHandle;
+    }
+
+    var ObjectID: ObjectIDStatic;
+    interface ObjectIDStatic {
+      new (hexString?: string): ObjectID;
+    }
+    interface ObjectID {}
+  }
+}
+
+declare module 'meteor/http' {
+  export module HTTP {
+    interface HTTPRequest {
+      content?: string;
+      data?: any;
+      query?: string;
+      params?: { [id: string]: string };
+      auth?: string;
+      headers?: { [id: string]: string };
+      timeout?: number;
+      followRedirects?: boolean;
+    }
+
+    interface HTTPResponse {
+      statusCode?: number;
+      headers?: { [id: string]: string };
+      content?: string;
+      data?: any;
+    }
+
+    function call(method: string, url: string, options?: HTTP.HTTPRequest, asyncCallback?: Function): HTTP.HTTPResponse;
+    function del(url: string, callOptions?: HTTP.HTTPRequest, asyncCallback?: Function): HTTP.HTTPResponse;
+    function get(url: string, callOptions?: HTTP.HTTPRequest, asyncCallback?: Function): HTTP.HTTPResponse;
+    function post(url: string, callOptions?: HTTP.HTTPRequest, asyncCallback?: Function): HTTP.HTTPResponse;
+    function put(url: string, callOptions?: HTTP.HTTPRequest, asyncCallback?: Function): HTTP.HTTPResponse;
+    function call(method: string, url: string, options?: {
+      content?: string;
+      data?: Object;
+      query?: string;
+      params?: Object;
+      auth?: string;
+      headers?: Object;
+      timeout?: number;
+      followRedirects?: boolean;
+      npmRequestOptions?: Object;
+      beforeSend?: Function;
+    }, asyncCallback?: Function): HTTP.HTTPResponse;
+  }
+}
+
+declare module 'meteor/random' {
+  export module Random {
+    function id(numberOfChars?: number): string;
+    function secret(numberOfChars?: number): string;
+    function fraction(): number;
+    function hexString(numberOfDigits: number): string; // @param numberOfDigits, @returns a random hex string of the given length
+    function choice(array: any[]): string; // @param array, @return a random element in array
+    function choice(str: string): string; // @param str, @return a random char in str
+  }
+}
+
+declare module 'meteor/blaze' {
+  import {Meteor} from 'meteor/meteor';
+
+  export module Blaze {
+    var View: ViewStatic;
+
+    interface ViewStatic {
+       new (name ?: string, renderFunction ?: Function): View;
+    }
+
+    interface View {
+      name: string;
+      parentView: View;
+      isCreated: boolean;
+      isRendered: boolean;
+      isDestroyed: boolean;
+      renderCount: number;
+      autorun(runFunc: Function): void;
+      onViewCreated(func: Function): void;
+      onViewReady(func: Function): void;
+      onViewDestroyed(func: Function): void;
+      firstNode(): Node;
+      lastNode(): Node;
+      template: Template;
+      templateInstance(): TemplateInstance;
+    }
+    var currentView: View;
+
+    function isTemplate(value: any): boolean;
+
+    interface HelpersMap {
+      [key: string]: Function;
+    }
+
+    interface EventsMap {
+      [key: string]: Function;
+    }
+
+    var Template: TemplateStatic;
+
+    interface TemplateStatic {
+      new (viewName ?: string, renderFunction ?: Function): Template;
+
+      registerHelper(name: string, func: Function): void;
+      instance(): TemplateInstance;
+      currentData(): any;
+      parentData(numLevels: number): any;
+    }
+
+    interface Template {
+      viewName: string;
+      renderFunction: Function;
+      constructView(): View;
+      head: Template;
+      find(selector: string): Template;
+      findAll(selector: string): Template[];
+      $: any;
+      onCreated(cb: Function): void;
+      onRendered(cb: Function): void;
+      onDestroyed(cb: Function): void;
+      created: Function;
+      rendered: Function;
+      destroyed: Function;
+      helpers(helpersMap: HelpersMap): void;
+      events(eventsMap: EventsMap): void;
+    }
+
+    var TemplateInstance: TemplateInstanceStatic;
+
+    interface TemplateInstanceStatic {
+      new (view: View): TemplateInstance;
+    }
+
+    interface TemplateInstance {
+      $(selector: string): any;
+      autorun(runFunc: Function): Object;
+      data: Object;
+      find(selector?: string): TemplateInstance;
+      findAll(selector: string): TemplateInstance[];
+      firstNode: Object;
+      lastNode: Object;
+      subscribe(name: string, ...args: any[]): Meteor.SubscriptionHandle;
+      subscriptionsReady(): boolean;
+      view: Object;
+    }
+
+    function Each(argFunc: Function, contentFunc: Function, elseFunc?: Function): View;
+    function Unless(conditionFunc: Function, contentFunc: Function, elseFunc?: Function): View;
+    function If(conditionFunc: Function, contentFunc: Function, elseFunc?: Function): View;
+
+    function Let(bindings: Function, contentFunc: Function): View;
+    function With(data: Object | Function, contentFunc: Function): View;
+
+    function getData(elementOrView?: HTMLElement | View): Object;
+    function getView(element?: HTMLElement): View;
+
+    function remove(renderedView: View): void;
+    function render(templateOrView: Template | View, parentNode: Node, nextNode?: Node, parentView?: View): View;
+    function renderWithData(templateOrView: Template | View, data: Object | Function, parentNode: Node, nextNode?: Node, parentView?: View): View;
+    function toHTML(templateOrView: Template | View): string;
+    function toHTMLWithData(templateOrView: Template | View, data: Object | Function): string;
+  }
+}
+
+declare module 'meteor/browser-policy' {
+  export module BrowserPolicy {
+    interface framing {
+      disallow(): void;
+      restrictToOrigin(origin: string): void;
+      allowAll(): void;
+    }
+
+    interface content {
+      allowEval(): void;
+      allowInlineStyles(): void;
+      allowInlineScripts(): void;
+      allowSameOriginForAll(): void;
+      allowDataUrlForAll(): void;
+      allowOriginForAll(origin: string): void;
+      allowImageOrigin(origin: string): void;
+      allowFrameOrigin(origin: string): void;
+      allowContentTypeSniffing(): void;
+      allowAllContentOrigin(): void;
+      allowAllContentDataUrl(): void;
+      allowAllContentSameOrigin(): void;
+
+      disallowAll(): void;
+      disallowInlineStyles(): void;
+      disallowEval(): void;
+      disallowInlineScripts(): void;
+      disallowFont(): void;
+      disallowObject(): void;
+      disallowAllContent(): void;
+    }
+  }
+}
+
+declare module 'meteor/tiny-test' {
+  interface ILengthAble {
+    length: number;
+  }
+
+  interface ITinytestAssertions {
+    ok(doc: Object): void;
+    expect_fail(): void;
+    fail(doc: Object): void;
+    runId(): string;
+    equal<T>(actual: T, expected: T, message?: string, not?: boolean): void;
+    notEqual<T>(actual: T, expected: T, message?: string): void;
+    instanceOf(obj: Object, klass: Function, message?: string): void;
+    notInstanceOf(obj: Object, klass: Function, message?: string): void;
+    matches(actual: any, regexp: RegExp, message?: string): void;
+    notMatches(actual: any, regexp: RegExp, message?: string): void;
+    throws(f: Function, expected?: string | RegExp): void;
+    isTrue(v: boolean, msg?: string): void;
+    isFalse(v: boolean, msg?: string): void;
+    isNull(v: any, msg?: string): void;
+    isNotNull(v: any, msg?: string): void;
+    isUndefined(v: any, msg?: string): void;
+    isNotUndefined(v: any, msg?: string): void;
+    isNan(v: any, msg?: string): void;
+    isNotNan(v: any, msg?: string): void;
+    include<T>(s: Array<T> | Object | string, value: any, msg?: string, not?: boolean): void;
+
+    notInclude<T>(s: Array<T> | Object | string, value: any, msg?: string, not?: boolean): void;
+    length(obj: ILengthAble, expected_length: number, msg?: string): void;
+    _stringEqual(actual: string, expected: string, msg?: string): void;
+  }
+
+  export module Tinytest {
+    function add(description: string, func: (test: ITinytestAssertions) => void): void;
+    function addAsync(description: string, func: (test: ITinytestAssertions) => void): void;
+  }
+}
+
+declare module 'meteor/accounts-base' {
+  import {Meteor} from 'meteor/meteor';
+
+  interface EmailFields {
+    from?: () => string;
+    subject?: (user: Meteor.User) => string;
+    text?: (user: Meteor.User, url: string) => string;
+    html?: (user: Meteor.User, url: string) => string;
+  }
+  interface Header {
+    [id: string]: string;
+  }
+  interface EmailTemplates {
+    from: string;
+    siteName: string;
+    headers?: Header;
+    resetPassword: EmailFields;
+    enrollAccount: EmailFields;
+    verifyEmail: EmailFields;
+  }
+
+  export module Accounts {
+    var emailTemplates: EmailTemplates;
+    function addEmail(userId: string, newEmail: string, verified?: boolean): void;
+    function removeEmail(userId: string, email: string): void;
+    function verifyEmail(token: string, callback?: Function): void;
+
+    function user(): Meteor.User;
+    function userId(): string;
+
+    function createUser(options: {
+      username?: string;
+      email?: string;
+      password?: string;
+      profile?: Object;
+    }, callback?: Function): string;
+    function setUsername(userId: string, newUsername: string): void;
+    function onCreateUser(func: Function): void;
+    function findUserByEmail(email: string): Object;
+    function findUserByUsername(username: string): Object;
+    function validateNewUser(func: Function): boolean;
+
+    function changePassword(oldPassword: string, newPassword: string, callback?: Function): void;
+    function forgotPassword(options: {
+      email?: string;
+    }, callback?: Function): void;
+    function resetPassword(token: string, newPassword: string, callback?: Function): void;
+    function setPassword(userId: string, newPassword: string, options?: {
+      logout?: Object;
+    }): void;
+
+    function onEmailVerificationLink(callback: Function): void;
+    function onEnrollmentLink(callback: Function): void;
+    function onResetPasswordLink(callback: Function): void;
+    function sendEnrollmentEmail(userId: string, email?: string): void;
+    function sendResetPasswordEmail(userId: string, email?: string): void;
+    function sendVerificationEmail(userId: string, email?: string): void;
+
+    var ui: {
+      config(options: {
+        requestPermissions?: Object;
+        requestOfflineToken?: Object;
+        forceApprovalPrompt?: Object;
+        passwordSignupFields?: string;
+      }): void;
+    };
+    function config(options: {
+      sendVerificationEmail?: boolean;
+      forbidClientAccountCreation?: boolean;
+      restrictCreationByEmailDomain?: string | Function;
+      loginExpirationInDays?: number;
+      oauthSecretKey?: string;
+    }): void;
+
+    function onLogin(func: Function): { stop: () => void };
+    function onLoginFailure(func: Function): { stop: () => void };
+    function loggingIn(): boolean;
+    function logout(callback?: Function): void;
+    function logoutOtherClients(callback?: Function): void;
+    function loginServicesConfigured(): boolean;
+    function onPageLoadLogin(func: Function): void;
+    function validateLoginAttempt(func: Function): { stop: () => void };
+    interface IValidateLoginAttemptCbOpts {
+      type: string;
+      allowed: boolean;
+      error: Meteor.Error;
+      user: Meteor.User;
+      connection: Meteor.Connection;
+      methodName: string;
+      methodArguments: any[];
+    }
+  }
+}
+
+declare namespace App {
+  function accessRule(pattern: string, options?: {
+    type?: string;
+    launchExternal?: boolean;
+  }): void;
+  function configurePlugin(id: string, config: Object): void;
+  function icons(icons: Object): void;
+  function info(options: {
+    id?: string;
+    version?: string;
+    name?: string;
+    description?: string;
+    author?: string;
+    email?: string;
+    website?: string;
+  }): void;
+  function launchScreens(launchScreens: Object): void;
+  function setPreference(name: string, value: string, platform?: string): void;
+}
+
+interface EJSONableCustomType {
+  clone(): EJSONableCustomType;
+  equals(other: Object): boolean;
+  toJSONValue(): JSONable;
+  typeName(): string;
+}
+interface EJSONable {
+  [key: string]: number | string | boolean | Object | number[] | string[] | Object[] | Date | Uint8Array | EJSONableCustomType;
+}
+interface JSONable {
+  [key: string]: number | string | boolean | Object | number[] | string[] | Object[];
+}
+interface EJSON extends EJSONable { }
+
+declare module 'meteor/ejson' {
+  export module EJSON {
+    function addType(name: string, factory: (val: JSONable) => EJSONableCustomType): void;
+    function clone<T>(val: T): T;
+    function equals(a: EJSON, b: EJSON, options?: {
+      keyOrderSensitive?: boolean;
+    }): boolean;
+    function fromJSONValue(val: JSONable): any;
+    function isBinary(x: Object): boolean;
+    var newBinary: any;
+    function parse(str: string): EJSON;
+    function stringify(val: EJSON, options?: {
+      indent?: boolean | number | string;
+      canonical?: boolean;
+    }): string;
+    function toJSONValue(val: EJSON): JSONable;
+  }
+}
+
+declare module 'meteor/tracker' {
+  export module Tracker {
+    function Computation(): void;
+    interface Computation {
+      firstRun: boolean;
+      invalidate(): void;
+      invalidated: boolean;
+      onInvalidate(callback: Function): void;
+      onStop(callback: Function): void;
+      stop(): void;
+      stopped: boolean;
+    }
+    var currentComputation: Computation;
+
+    var Dependency: DependencyStatic;
+    interface DependencyStatic {
+      new (): Dependency;
+    }
+    interface Dependency {
+      changed(): void;
+      depend(fromComputation?: Computation): boolean;
+      hasDependents(): boolean;
+    }
+
+    var active: boolean;
+    function afterFlush(callback: Function): void;
+    function autorun(runFunc: (computation: Computation) => void, options?: {
+      onError?: Function;
+    }): Computation;
+    function flush(): void;
+    function nonreactive(func: Function): void;
+    function onInvalidate(callback: Function): void;
+  }
+}
+
+declare module 'meteor/session' {
+  import {EJSON} from 'meteor/ejson';
+
+  export module Session {
+    function equals(key: string, value: string | number | boolean | any): boolean;
+    function get(key: string): any;
+    function set(key: string, value: EJSONable | any): void;
+    function setDefault(key: string, value: EJSONable | any): void;
+  }
+}
+
+declare module 'meteor/email' {
+  export module Email {
+    function send(options: {
+      from?: string;
+      to?: string | string[];
+      cc?: string | string[];
+      bcc?: string | string[];
+      replyTo?: string | string[];
+      subject?: string;
+      text?: string;
+      html?: string;
+      headers?: Object;
+      attachments?: Object[];
+      mailComposer?: MailComposer;
+    }): void;
+
+    interface MailComposerOptions {
+      escapeSMTP: boolean;
+      encoding: string;
+      charset: string;
+      keepBcc: boolean;
+      forceEmbeddedImages: boolean;
+    }
+
+    var MailComposer: MailComposerStatic;
+    interface MailComposerStatic {
+      new (options: MailComposerOptions): MailComposer;
+    }
+    interface MailComposer {
+      addHeader(name: string, value: string): void;
+      setMessageOption(from: string, to: string, body: string, html: string): void;
+      streamMessage(): void;
+      pipe(stream: any /** fs.WriteStream **/): void;
+    }
+  }
+}
+
+declare module 'meteor/reactive-var' {
+  var ReactiveVar: ReactiveVarStatic;
+  interface ReactiveVarStatic {
+    new <T>(initialValue: T, equalsFunc?: Function): ReactiveVar<T>;
+  }
+  interface ReactiveVar<T> {
+    get(): T;
+    set(newValue: T): void;
+  }
+}
+
+declare module 'meteor/templating' {
+  import {Blaze} from 'meteor/blaze';
+  import {Meteor} from 'meteor/meteor';
+
+  var Template: TemplateStatic;
+  interface TemplateStatic extends Blaze.TemplateStatic {
+    new (viewName?: string, renderFunction?: Function): Blaze.Template;
+    body: Blaze.Template;
+    [index: string]: any | Blaze.Template;
+  }
+}
+
diff --git a/typings/browser/definitions/es6-promise/index.d.ts b/typings/browser/definitions/es6-promise/index.d.ts
new file mode 100644
index 0000000..101957d
--- /dev/null
+++ b/typings/browser/definitions/es6-promise/index.d.ts
@@ -0,0 +1,84 @@
+// Generated by typings
+// Source: https://raw.githubusercontent.com/typed-typings/npm-es6-promise/fb04188767acfec1defd054fc8024fafa5cd4de7/dist/es6-promise.d.ts
+declare module '~es6-promise/dist/es6-promise' {
+export interface Thenable <R> {
+  then <U> (onFulfilled?: (value: R) => U | Thenable<U>, onRejected?: (error: any) => U | Thenable<U>): Thenable<U>;
+  then <U> (onFulfilled?: (value: R) => U | Thenable<U>, onRejected?: (error: any) => void): Thenable<U>;
+}
+
+export class Promise <R> implements Thenable <R> {
+  /**
+   * If you call resolve in the body of the callback passed to the constructor,
+   * your promise is fulfilled with result object passed to resolve.
+   * If you call reject your promise is rejected with the object passed to resolve.
+   * For consistency and debugging (eg stack traces), obj should be an instanceof Error.
+   * Any errors thrown in the constructor callback will be implicitly passed to reject().
+   */
+  constructor (callback: (resolve : (value?: R | Thenable<R>) => void, reject: (error?: any) => void) => void);
+
+  /**
+   * onFulfilled is called when/if "promise" resolves. onRejected is called when/if "promise" rejects.
+   * Both are optional, if either/both are omitted the next onFulfilled/onRejected in the chain is called.
+   * Both callbacks have a single parameter , the fulfillment value or rejection reason.
+   * "then" returns a new promise equivalent to the value you return from onFulfilled/onRejected after being passed through Promise.resolve.
+   * If an error is thrown in the callback, the returned promise rejects with that error.
+   *
+   * @param onFulfilled called when/if "promise" resolves
+   * @param onRejected called when/if "promise" rejects
+   */
+  then <U> (onFulfilled?: (value: R) => U | Thenable<U>, onRejected?: (error: any) => U | Thenable<U>): Promise<U>;
+  then <U> (onFulfilled?: (value: R) => U | Thenable<U>, onRejected?: (error: any) => void): Promise<U>;
+
+  /**
+   * Sugar for promise.then(undefined, onRejected)
+   *
+   * @param onRejected called when/if "promise" rejects
+   */
+  catch <U> (onRejected?: (error: any) => U | Thenable<U>): Promise<U>;
+
+  /**
+   * Make a new promise from the thenable.
+   * A thenable is promise-like in as far as it has a "then" method.
+   */
+  static resolve (): Promise<void>;
+  static resolve <R> (value: R | Thenable<R>): Promise<R>;
+
+  /**
+   * Make a promise that rejects to obj. For consistency and debugging (eg stack traces), obj should be an instanceof Error
+   */
+  static reject <R> (error: any): Promise<R>;
+
+  /**
+   * Make a promise that fulfills when every item in the array fulfills, and rejects if (and when) any item rejects.
+   * the array passed to all can be a mixture of promise-like objects and other objects.
+   * The fulfillment value is an array (in order) of fulfillment values. The rejection value is the first rejection value.
+   */
+  static all<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(values: [T1 | Thenable<T1>, T2 | Thenable<T2>, T3 | Thenable<T3>, T4 | Thenable <T4>, T5 | Thenable<T5>, T6 | Thenable<T6>, T7 | Thenable<T7>, T8 | Thenable<T8>, T9 | Thenable<T9>, T10 | Thenable<T10>]): Promise<[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10]>;
+  static all<T1, T2, T3, T4, T5, T6, T7, T8, T9>(values: [T1 | Thenable<T1>, T2 | Thenable<T2>, T3 | Thenable<T3>, T4 | Thenable <T4>, T5 | Thenable<T5>, T6 | Thenable<T6>, T7 | Thenable<T7>, T8 | Thenable<T8>, T9 | Thenable<T9>]): Promise<[T1, T2, T3, T4, T5, T6, T7, T8, T9]>;
+  static all<T1, T2, T3, T4, T5, T6, T7, T8>(values: [T1 | Thenable<T1>, T2 | Thenable<T2>, T3 | Thenable<T3>, T4 | Thenable <T4>, T5 | Thenable<T5>, T6 | Thenable<T6>, T7 | Thenable<T7>, T8 | Thenable<T8>]): Promise<[T1, T2, T3, T4, T5, T6, T7, T8]>;
+  static all<T1, T2, T3, T4, T5, T6, T7>(values: [T1 | Thenable<T1>, T2 | Thenable<T2>, T3 | Thenable<T3>, T4 | Thenable <T4>, T5 | Thenable<T5>, T6 | Thenable<T6>, T7 | Thenable<T7>]): Promise<[T1, T2, T3, T4, T5, T6, T7]>;
+  static all<T1, T2, T3, T4, T5, T6>(values: [T1 | Thenable<T1>, T2 | Thenable<T2>, T3 | Thenable<T3>, T4 | Thenable <T4>, T5 | Thenable<T5>, T6 | Thenable<T6>]): Promise<[T1, T2, T3, T4, T5, T6]>;
+  static all<T1, T2, T3, T4, T5>(values: [T1 | Thenable<T1>, T2 | Thenable<T2>, T3 | Thenable<T3>, T4 | Thenable <T4>, T5 | Thenable<T5>]): Promise<[T1, T2, T3, T4, T5]>;
+  static all<T1, T2, T3, T4>(values: [T1 | Thenable<T1>, T2 | Thenable<T2>, T3 | Thenable<T3>, T4 | Thenable <T4>]): Promise<[T1, T2, T3, T4]>;
+  static all<T1, T2, T3>(values: [T1 | Thenable<T1>, T2 | Thenable<T2>, T3 | Thenable<T3>]): Promise<[T1, T2, T3]>;
+  static all<T1, T2>(values: [T1 | Thenable<T1>, T2 | Thenable<T2>]): Promise<[T1, T2]>;
+  static all<T1>(values: [T1 | Thenable<T1>]): Promise<[T1]>;
+  static all<TAll>(values: Array<TAll | Thenable<TAll>>): Promise<TAll[]>;
+
+  /**
+   * Make a Promise that fulfills when any item fulfills, and rejects if any item rejects.
+   */
+  static race <R> (promises: (R | Thenable<R>)[]): Promise<R>;
+}
+
+/**
+ * The polyfill method will patch the global environment (in this case to the Promise name) when called.
+ */
+export function polyfill (): void;
+}
+declare module 'es6-promise/dist/es6-promise' {
+export * from '~es6-promise/dist/es6-promise';
+}
+declare module 'es6-promise' {
+export * from '~es6-promise/dist/es6-promise';
+}
diff --git a/typings/main.d.ts b/typings/main.d.ts
new file mode 100644
index 0000000..360e5fa
--- /dev/null
+++ b/typings/main.d.ts
@@ -0,0 +1,3 @@
+/// <reference path="main/ambient/es6-shim/index.d.ts" />
+/// <reference path="main/ambient/meteor/index.d.ts" />
+/// <reference path="main/definitions/es6-promise/index.d.ts" />
diff --git a/typings/main/ambient/es6-shim/index.d.ts b/typings/main/ambient/es6-shim/index.d.ts
new file mode 100644
index 0000000..fe86f5e
--- /dev/null
+++ b/typings/main/ambient/es6-shim/index.d.ts
@@ -0,0 +1,670 @@
+// Generated by typings
+// Source: https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/7de6c3dd94feaeb21f20054b9f30d5dabc5efabd/es6-shim/es6-shim.d.ts
+// Type definitions for es6-shim v0.31.2
+// Project: https://github.com/paulmillr/es6-shim
+// Definitions by: Ron Buckton <http://github.com/rbuckton>
+// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
+
+declare type PropertyKey = string | number | symbol;
+
+interface IteratorResult<T> {
+    done: boolean;
+    value?: T;
+}
+
+interface IterableShim<T> {
+    /**
+      * Shim for an ES6 iterable. Not intended for direct use by user code.
+      */
+    "_es6-shim iterator_"(): Iterator<T>;
+}
+
+interface Iterator<T> {
+    next(value?: any): IteratorResult<T>;
+    return?(value?: any): IteratorResult<T>;
+    throw?(e?: any): IteratorResult<T>;
+}
+
+interface IterableIteratorShim<T> extends IterableShim<T>, Iterator<T> {
+    /**
+      * Shim for an ES6 iterable iterator. Not intended for direct use by user code.
+      */
+    "_es6-shim iterator_"(): IterableIteratorShim<T>;
+}
+
+interface StringConstructor {
+    /**
+      * Return the String value whose elements are, in order, the elements in the List elements.
+      * If length is 0, the empty string is returned.
+      */
+    fromCodePoint(...codePoints: number[]): string;
+
+    /**
+      * String.raw is intended for use as a tag function of a Tagged Template String. When called
+      * as such the first argument will be a well formed template call site object and the rest
+      * parameter will contain the substitution values.
+      * @param template A well-formed template string call site representation.
+      * @param substitutions A set of substitution values.
+      */
+    raw(template: TemplateStringsArray, ...substitutions: any[]): string;
+}
+
+interface String {
+    /**
+      * Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point
+      * value of the UTF-16 encoded code point starting at the string element at position pos in
+      * the String resulting from converting this object to a String.
+      * If there is no element at that position, the result is undefined.
+      * If a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.
+      */
+    codePointAt(pos: number): number;
+
+    /**
+      * Returns true if searchString appears as a substring of the result of converting this
+      * object to a String, at one or more positions that are
+      * greater than or equal to position; otherwise, returns false.
+      * @param searchString search string
+      * @param position If position is undefined, 0 is assumed, so as to search all of the String.
+      */
+    includes(searchString: string, position?: number): boolean;
+
+    /**
+      * Returns true if the sequence of elements of searchString converted to a String is the
+      * same as the corresponding elements of this object (converted to a String) starting at
+      * endPosition – length(this). Otherwise returns false.
+      */
+    endsWith(searchString: string, endPosition?: number): boolean;
+
+    /**
+      * Returns a String value that is made from count copies appended together. If count is 0,
+      * T is the empty String is returned.
+      * @param count number of copies to append
+      */
+    repeat(count: number): string;
+
+    /**
+      * Returns true if the sequence of elements of searchString converted to a String is the
+      * same as the corresponding elements of this object (converted to a String) starting at
+      * position. Otherwise returns false.
+      */
+    startsWith(searchString: string, position?: number): boolean;
+
+    /**
+      * Returns an <a> HTML anchor element and sets the name attribute to the text value
+      * @param name
+      */
+    anchor(name: string): string;
+
+    /** Returns a <big> HTML element */
+    big(): string;
+
+    /** Returns a <blink> HTML element */
+    blink(): string;
+
+    /** Returns a <b> HTML element */
+    bold(): string;
+
+    /** Returns a <tt> HTML element */
+    fixed(): string
+
+    /** Returns a <font> HTML element and sets the color attribute value */
+    fontcolor(color: string): string
+
+    /** Returns a <font> HTML element and sets the size attribute value */
+    fontsize(size: number): string;
+
+    /** Returns a <font> HTML element and sets the size attribute value */
+    fontsize(size: string): string;
+
+    /** Returns an <i> HTML element */
+    italics(): string;
+
+    /** Returns an <a> HTML element and sets the href attribute value */
+    link(url: string): string;
+
+    /** Returns a <small> HTML element */
+    small(): string;
+
+    /** Returns a <strike> HTML element */
+    strike(): string;
+
+    /** Returns a <sub> HTML element */
+    sub(): string;
+
+    /** Returns a <sup> HTML element */
+    sup(): string;
+
+    /**
+      * Shim for an ES6 iterable. Not intended for direct use by user code.
+      */
+    "_es6-shim iterator_"(): IterableIteratorShim<string>;
+}
+
+interface ArrayConstructor {
+    /**
+      * Creates an array from an array-like object.
+      * @param arrayLike An array-like object to convert to an array.
+      * @param mapfn A mapping function to call on every element of the array.
+      * @param thisArg Value of 'this' used to invoke the mapfn.
+      */
+    from<T, U>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => U, thisArg?: any): Array<U>;
+
+    /**
+      * Creates an array from an iterable object.
+      * @param iterable An iterable object to convert to an array.
+      * @param mapfn A mapping function to call on every element of the array.
+      * @param thisArg Value of 'this' used to invoke the mapfn.
+      */
+    from<T, U>(iterable: IterableShim<T>, mapfn: (v: T, k: number) => U, thisArg?: any): Array<U>;
+
+    /**
+      * Creates an array from an array-like object.
+      * @param arrayLike An array-like object to convert to an array.
+      */
+    from<T>(arrayLike: ArrayLike<T>): Array<T>;
+
+    /**
+      * Creates an array from an iterable object.
+      * @param iterable An iterable object to convert to an array.
+      */
+    from<T>(iterable: IterableShim<T>): Array<T>;
+
+    /**
+      * Returns a new array from a set of elements.
+      * @param items A set of elements to include in the new array object.
+      */
+    of<T>(...items: T[]): Array<T>;
+}
+
+interface Array<T> {
+    /**
+      * Returns the value of the first element in the array where predicate is true, and undefined
+      * otherwise.
+      * @param predicate find calls predicate once for each element of the array, in ascending
+      * order, until it finds one where predicate returns true. If such an element is found, find
+      * immediately returns that element value. Otherwise, find returns undefined.
+      * @param thisArg If provided, it will be used as the this value for each invocation of
+      * predicate. If it is not provided, undefined is used instead.
+      */
+    find(predicate: (value: T, index: number, obj: Array<T>) => boolean, thisArg?: any): T;
+
+    /**
+      * Returns the index of the first element in the array where predicate is true, and undefined
+      * otherwise.
+      * @param predicate find calls predicate once for each element of the array, in ascending
+      * order, until it finds one where predicate returns true. If such an element is found, find
+      * immediately returns that element value. Otherwise, find returns undefined.
+      * @param thisArg If provided, it will be used as the this value for each invocation of
+      * predicate. If it is not provided, undefined is used instead.
+      */
+    findIndex(predicate: (value: T) => boolean, thisArg?: any): number;
+
+    /**
+      * Returns the this object after filling the section identified by start and end with value
+      * @param value value to fill array section with
+      * @param start index to start filling the array at. If start is negative, it is treated as
+      * length+start where length is the length of the array.
+      * @param end index to stop filling the array at. If end is negative, it is treated as
+      * length+end.
+      */
+    fill(value: T, start?: number, end?: number): T[];
+
+    /**
+      * Returns the this object after copying a section of the array identified by start and end
+      * to the same array starting at position target
+      * @param target If target is negative, it is treated as length+target where length is the
+      * length of the array.
+      * @param start If start is negative, it is treated as length+start. If end is negative, it
+      * is treated as length+end.
+      * @param end If not specified, length of the this object is used as its default value.
+      */
+    copyWithin(target: number, start: number, end?: number): T[];
+
+    /**
+      * Returns an array of key, value pairs for every entry in the array
+      */
+    entries(): IterableIteratorShim<[number, T]>;
+
+    /**
+      * Returns an list of keys in the array
+      */
+    keys(): IterableIteratorShim<number>;
+
+    /**
+      * Returns an list of values in the array
+      */
+    values(): IterableIteratorShim<T>;
+
+    /**
+      * Shim for an ES6 iterable. Not intended for direct use by user code.
+      */
+    "_es6-shim iterator_"(): IterableIteratorShim<T>;
+}
+
+interface NumberConstructor {
+    /**
+      * The value of Number.EPSILON is the difference between 1 and the smallest value greater than 1
+      * that is representable as a Number value, which is approximately:
+      * 2.2204460492503130808472633361816 x 10‍−‍16.
+      */
+    EPSILON: number;
+
+    /**
+      * Returns true if passed value is finite.
+      * Unlike the global isFininte, Number.isFinite doesn't forcibly convert the parameter to a
+      * number. Only finite values of the type number, result in true.
+      * @param number A numeric value.
+      */
+    isFinite(number: number): boolean;
+
+    /**
+      * Returns true if the value passed is an integer, false otherwise.
+      * @param number A numeric value.
+      */
+    isInteger(number: number): boolean;
+
+    /**
+      * Returns a Boolean value that indicates whether a value is the reserved value NaN (not a
+      * number). Unlike the global isNaN(), Number.isNaN() doesn't forcefully convert the parameter
+      * to a number. Only values of the type number, that are also NaN, result in true.
+      * @param number A numeric value.
+      */
+    isNaN(number: number): boolean;
+
+    /**
+      * Returns true if the value passed is a safe integer.
+      * @param number A numeric value.
+      */
+    isSafeInteger(number: number): boolean;
+
+    /**
+      * The value of the largest integer n such that n and n + 1 are both exactly representable as
+      * a Number value.
+      * The value of Number.MIN_SAFE_INTEGER is 9007199254740991 2^53 − 1.
+      */
+    MAX_SAFE_INTEGER: number;
+
+    /**
+      * The value of the smallest integer n such that n and n − 1 are both exactly representable as
+      * a Number value.
+      * The value of Number.MIN_SAFE_INTEGER is −9007199254740991 (−(2^53 − 1)).
+      */
+    MIN_SAFE_INTEGER: number;
+
+    /**
+      * Converts a string to a floating-point number.
+      * @param string A string that contains a floating-point number.
+      */
+    parseFloat(string: string): number;
+
+    /**
+      * Converts A string to an integer.
+      * @param s A string to convert into a number.
+      * @param radix A value between 2 and 36 that specifies the base of the number in numString.
+      * If this argument is not supplied, strings with a prefix of '0x' are considered hexadecimal.
+      * All other strings are considered decimal.
+      */
+    parseInt(string: string, radix?: number): number;
+}
+
+interface ObjectConstructor {
+    /**
+      * Copy the values of all of the enumerable own properties from one or more source objects to a
+      * target object. Returns the target object.
+      * @param target The target object to copy to.
+      * @param sources One or more source objects to copy properties from.
+      */
+    assign(target: any, ...sources: any[]): any;
+
+    /**
+      * Returns true if the values are the same value, false otherwise.
+      * @param value1 The first value.
+      * @param value2 The second value.
+      */
+    is(value1: any, value2: any): boolean;
+
+    /**
+      * Sets the prototype of a specified object o to  object proto or null. Returns the object o.
+      * @param o The object to change its prototype.
+      * @param proto The value of the new prototype or null.
+      * @remarks Requires `__proto__` support.
+      */
+    setPrototypeOf(o: any, proto: any): any;
+}
+
+interface RegExp {
+    /**
+      * Returns a string indicating the flags of the regular expression in question. This field is read-only.
+      * The characters in this string are sequenced and concatenated in the following order:
+      *
+      *    - "g" for global
+      *    - "i" for ignoreCase
+      *    - "m" for multiline
+      *    - "u" for unicode
+      *    - "y" for sticky
+      *
+      * If no flags are set, the value is the empty string.
+      */
+    flags: string;
+}
+
+interface Math {
+    /**
+      * Returns the number of leading zero bits in the 32-bit binary representation of a number.
+      * @param x A numeric expression.
+      */
+    clz32(x: number): number;
+
+    /**
+      * Returns the result of 32-bit multiplication of two numbers.
+      * @param x First number
+      * @param y Second number
+      */
+    imul(x: number, y: number): number;
+
+    /**
+      * Returns the sign of the x, indicating whether x is positive, negative or zero.
+      * @param x The numeric expression to test
+      */
+    sign(x: number): number;
+
+    /**
+      * Returns the base 10 logarithm of a number.
+      * @param x A numeric expression.
+      */
+    log10(x: number): number;
+
+    /**
+      * Returns the base 2 logarithm of a number.
+      * @param x A numeric expression.
+      */
+    log2(x: number): number;
+
+    /**
+      * Returns the natural logarithm of 1 + x.
+      * @param x A numeric expression.
+      */
+    log1p(x: number): number;
+
+    /**
+      * Returns the result of (e^x - 1) of x (e raised to the power of x, where e is the base of
+      * the natural logarithms).
+      * @param x A numeric expression.
+      */
+    expm1(x: number): number;
+
+    /**
+      * Returns the hyperbolic cosine of a number.
+      * @param x A numeric expression that contains an angle measured in radians.
+      */
+    cosh(x: number): number;
+
+    /**
+      * Returns the hyperbolic sine of a number.
+      * @param x A numeric expression that contains an angle measured in radians.
+      */
+    sinh(x: number): number;
+
+    /**
+      * Returns the hyperbolic tangent of a number.
+      * @param x A numeric expression that contains an angle measured in radians.
+      */
+    tanh(x: number): number;
+
+    /**
+      * Returns the inverse hyperbolic cosine of a number.
+      * @param x A numeric expression that contains an angle measured in radians.
+      */
+    acosh(x: number): number;
+
+    /**
+      * Returns the inverse hyperbolic sine of a number.
+      * @param x A numeric expression that contains an angle measured in radians.
+      */
+    asinh(x: number): number;
+
+    /**
+      * Returns the inverse hyperbolic tangent of a number.
+      * @param x A numeric expression that contains an angle measured in radians.
+      */
+    atanh(x: number): number;
+
+    /**
+      * Returns the square root of the sum of squares of its arguments.
+      * @param values Values to compute the square root for.
+      *     If no arguments are passed, the result is +0.
+      *     If there is only one argument, the result is the absolute value.
+      *     If any argument is +Infinity or -Infinity, the result is +Infinity.
+      *     If any argument is NaN, the result is NaN.
+      *     If all arguments are either +0 or −0, the result is +0.
+      */
+    hypot(...values: number[]): number;
+
+    /**
+      * Returns the integral part of the a numeric expression, x, removing any fractional digits.
+      * If x is already an integer, the result is x.
+      * @param x A numeric expression.
+      */
+    trunc(x: number): number;
+
+    /**
+      * Returns the nearest single precision float representation of a number.
+      * @param x A numeric expression.
+      */
+    fround(x: number): number;
+
+    /**
+      * Returns an implementation-dependent approximation to the cube root of number.
+      * @param x A numeric expression.
+      */
+    cbrt(x: number): number;
+}
+
+interface PromiseLike<T> {
+    /**
+    * Attaches callbacks for the resolution and/or rejection of the Promise.
+    * @param onfulfilled The callback to execute when the Promise is resolved.
+    * @param onrejected The callback to execute when the Promise is rejected.
+    * @returns A Promise for the completion of which ever callback is executed.
+    */
+    then<TResult>(onfulfilled?: (value: T) => TResult | PromiseLike<TResult>, onrejected?: (reason: any) => TResult | PromiseLike<TResult>): PromiseLike<TResult>;
+    then<TResult>(onfulfilled?: (value: T) => TResult | PromiseLike<TResult>, onrejected?: (reason: any) => void): PromiseLike<TResult>;
+}
+
+/**
+ * Represents the completion of an asynchronous operation
+ */
+interface Promise<T> {
+    /**
+    * Attaches callbacks for the resolution and/or rejection of the Promise.
+    * @param onfulfilled The callback to execute when the Promise is resolved.
+    * @param onrejected The callback to execute when the Promise is rejected.
+    * @returns A Promise for the completion of which ever callback is executed.
+    */
+    then<TResult>(onfulfilled?: (value: T) => TResult | PromiseLike<TResult>, onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Promise<TResult>;
+    then<TResult>(onfulfilled?: (value: T) => TResult | PromiseLike<TResult>, onrejected?: (reason: any) => void): Promise<TResult>;
+
+    /**
+     * Attaches a callback for only the rejection of the Promise.
+     * @param onrejected The callback to execute when the Promise is rejected.
+     * @returns A Promise for the completion of the callback.
+     */
+    catch(onrejected?: (reason: any) => T | PromiseLike<T>): Promise<T>;
+    catch(onrejected?: (reason: any) => void): Promise<T>;
+}
+
+interface PromiseConstructor {
+    /**
+      * A reference to the prototype.
+      */
+    prototype: Promise<any>;
+
+    /**
+     * Creates a new Promise.
+     * @param executor A callback used to initialize the promise. This callback is passed two arguments:
+     * a resolve callback used resolve the promise with a value or the result of another promise,
+     * and a reject callback used to reject the promise with a provided reason or error.
+     */
+    new <T>(executor: (resolve: (value?: T | PromiseLike<T>) => void, reject: (reason?: any) => void) => void): Promise<T>;
+
+    /**
+     * Creates a Promise that is resolved with an array of results when all of the provided Promises
+     * resolve, or rejected when any Promise is rejected.
+     * @param values An array of Promises.
+     * @returns A new Promise.
+     */
+    all<T>(values: IterableShim<T | PromiseLike<T>>): Promise<T[]>;
+
+    /**
+     * Creates a Promise that is resolved or rejected when any of the provided Promises are resolved
+     * or rejected.
+     * @param values An array of Promises.
+     * @returns A new Promise.
+     */
+    race<T>(values: IterableShim<T | PromiseLike<T>>): Promise<T>;
+
+    /**
+     * Creates a new rejected promise for the provided reason.
+     * @param reason The reason the promise was rejected.
+     * @returns A new rejected Promise.
+     */
+    reject(reason: any): Promise<void>;
+
+    /**
+     * Creates a new rejected promise for the provided reason.
+     * @param reason The reason the promise was rejected.
+     * @returns A new rejected Promise.
+     */
+    reject<T>(reason: any): Promise<T>;
+
+    /**
+      * Creates a new resolved promise for the provided value.
+      * @param value A promise.
+      * @returns A promise whose internal state matches the provided promise.
+      */
+    resolve<T>(value: T | PromiseLike<T>): Promise<T>;
+
+    /**
+     * Creates a new resolved promise .
+     * @returns A resolved promise.
+     */
+    resolve(): Promise<void>;
+}
+
+declare var Promise: PromiseConstructor;
+
+interface Map<K, V> {
+    clear(): void;
+    delete(key: K): boolean;
+    forEach(callbackfn: (value: V, index: K, map: Map<K, V>) => void, thisArg?: any): void;
+    get(key: K): V;
+    has(key: K): boolean;
+    set(key: K, value?: V): Map<K, V>;
+    size: number;
+    entries(): IterableIteratorShim<[K, V]>;
+    keys(): IterableIteratorShim<K>;
+    values(): IterableIteratorShim<V>;
+}
+
+interface MapConstructor {
+    new <K, V>(): Map<K, V>;
+    new <K, V>(iterable: IterableShim<[K, V]>): Map<K, V>;
+    prototype: Map<any, any>;
+}
+
+declare var Map: MapConstructor;
+
+interface Set<T> {
+    add(value: T): Set<T>;
+    clear(): void;
+    delete(value: T): boolean;
+    forEach(callbackfn: (value: T, index: T, set: Set<T>) => void, thisArg?: any): void;
+    has(value: T): boolean;
+    size: number;
+    entries(): IterableIteratorShim<[T, T]>;
+    keys(): IterableIteratorShim<T>;
+    values(): IterableIteratorShim<T>;
+}
+
+interface SetConstructor {
+    new <T>(): Set<T>;
+    new <T>(iterable: IterableShim<T>): Set<T>;
+    prototype: Set<any>;
+}
+
+declare var Set: SetConstructor;
+
+interface WeakMap<K, V> {
+    delete(key: K): boolean;
+    get(key: K): V;
+    has(key: K): boolean;
+    set(key: K, value?: V): WeakMap<K, V>;
+}
+
+interface WeakMapConstructor {
+    new <K, V>(): WeakMap<K, V>;
+    new <K, V>(iterable: IterableShim<[K, V]>): WeakMap<K, V>;
+    prototype: WeakMap<any, any>;
+}
+
+declare var WeakMap: WeakMapConstructor;
+
+interface WeakSet<T> {
+    add(value: T): WeakSet<T>;
+    delete(value: T): boolean;
+    has(value: T): boolean;
+}
+
+interface WeakSetConstructor {
+    new <T>(): WeakSet<T>;
+    new <T>(iterable: IterableShim<T>): WeakSet<T>;
+    prototype: WeakSet<any>;
+}
+
+declare var WeakSet: WeakSetConstructor;
+
+declare namespace Reflect {
+    function apply(target: Function, thisArgument: any, argumentsList: ArrayLike<any>): any;
+    function construct(target: Function, argumentsList: ArrayLike<any>): any;
+    function defineProperty(target: any, propertyKey: PropertyKey, attributes: PropertyDescriptor): boolean;
+    function deleteProperty(target: any, propertyKey: PropertyKey): boolean;
+    function enumerate(target: any): IterableIteratorShim<any>;
+    function get(target: any, propertyKey: PropertyKey, receiver?: any): any;
+    function getOwnPropertyDescriptor(target: any, propertyKey: PropertyKey): PropertyDescriptor;
+    function getPrototypeOf(target: any): any;
+    function has(target: any, propertyKey: PropertyKey): boolean;
+    function isExtensible(target: any): boolean;
+    function ownKeys(target: any): Array<PropertyKey>;
+    function preventExtensions(target: any): boolean;
+    function set(target: any, propertyKey: PropertyKey, value: any, receiver?: any): boolean;
+    function setPrototypeOf(target: any, proto: any): boolean;
+}
+
+declare module "es6-shim" {
+    var String: StringConstructor;
+    var Array: ArrayConstructor;
+    var Number: NumberConstructor;
+    var Math: Math;
+    var Object: ObjectConstructor;
+    var Map: MapConstructor;
+    var Set: SetConstructor;
+    var WeakMap: WeakMapConstructor;
+    var WeakSet: WeakSetConstructor;
+    var Promise: PromiseConstructor;
+    namespace Reflect {
+        function apply(target: Function, thisArgument: any, argumentsList: ArrayLike<any>): any;
+        function construct(target: Function, argumentsList: ArrayLike<any>): any;
+        function defineProperty(target: any, propertyKey: PropertyKey, attributes: PropertyDescriptor): boolean;
+        function deleteProperty(target: any, propertyKey: PropertyKey): boolean;
+        function enumerate(target: any): Iterator<any>;
+        function get(target: any, propertyKey: PropertyKey, receiver?: any): any;
+        function getOwnPropertyDescriptor(target: any, propertyKey: PropertyKey): PropertyDescriptor;
+        function getPrototypeOf(target: any): any;
+        function has(target: any, propertyKey: PropertyKey): boolean;
+        function isExtensible(target: any): boolean;
+        function ownKeys(target: any): Array<PropertyKey>;
+        function preventExtensions(target: any): boolean;
+        function set(target: any, propertyKey: PropertyKey, value: any, receiver?: any): boolean;
+        function setPrototypeOf(target: any, proto: any): boolean;
+    }
+}
\ No newline at end of file
diff --git a/typings/main/ambient/meteor/index.d.ts b/typings/main/ambient/meteor/index.d.ts
new file mode 100644
index 0000000..98bda6f
--- /dev/null
+++ b/typings/main/ambient/meteor/index.d.ts
@@ -0,0 +1,898 @@
+// Generated by typings
+// Source: https://raw.githubusercontent.com/barbatus/meteor-typings/83c6933d0ef07abfd4a2a85b5ec41bc3949f6d28/meteor/1.3/meteor.d.ts
+// Type definitions for Meteor 1.3
+// Project: http://www.meteor.com/
+// Definitions by:
+// Alex Borodach <https://github.com/barbatus>,
+// Dave Allen <https://github.com/fullflavedave>
+
+declare module 'meteor/check' {
+  export module Match {
+    var Any: any;
+    var String: any;
+    var Integer: any;
+    var Boolean: any;
+    var undefined: any;
+    var Object: any;
+    function Optional(pattern: any): boolean;
+    function ObjectIncluding(dico: any): boolean;
+    function OneOf(...patterns: any[]): any;
+    function Where(condition: any): any;
+    function test(value: any, pattern: any): boolean;
+  }
+
+  export function check(value: any, pattern: any): void;
+}
+
+declare module 'meteor/meteor' {
+  import {Mongo} from 'meteor/mongo';
+  import {Blaze} from 'meteor/blaze';
+  import {EJSON} from 'meteor/ejson';
+
+  export module Meteor {
+    /** Global props **/
+    var isClient: boolean;
+    var isCordova: boolean;
+    var isServer: boolean;
+    var release: string;
+    var settings: { [id: string]: any };
+    /** props **/
+
+    /** User **/
+    interface UserEmail {
+      address: string;
+      verified: boolean;
+    }
+    interface User {
+      _id?: string;
+      username?: string;
+      emails?: UserEmail[];
+      createdAt?: number;
+      profile?: any;
+      services?: any;
+    }
+    function user(): User;
+    function userId(): string;
+    var users: Mongo.Collection<User>;
+    /** User **/
+
+    /** Status **/
+    enum StatusEnum {
+      connected,
+      connecting,
+      failed,
+      waiting,
+      offline
+    }
+    function status(): Meteor.StatusEnum;
+    /** Status **/
+
+    /** Event **/
+    interface Event {
+      type: string;
+      target: HTMLElement;
+      currentTarget: HTMLElement;
+      which: number;
+      stopPropagation(): void;
+      stopImmediatePropagation(): void;
+      preventDefault(): void;
+      isPropagationStopped(): boolean;
+      isImmediatePropagationStopped(): boolean;
+      isDefaultPrevented(): boolean;
+    }
+    interface EventHandlerFunction extends Function {
+      (event?: Meteor.Event, templateInstance?: Blaze.TemplateInstance): void;
+    }
+    interface EventMap {
+      [id: string]: Meteor.EventHandlerFunction;
+    }
+    /** Event **/
+
+    /** Login **/
+    interface LoginWithExternalServiceOptions {
+      requestPermissions?: string[];
+      requestOfflineToken?: Boolean;
+      forceApprovalPrompt?: Boolean;
+      loginUrlParameters?: Object;
+      redirectUrl?: string;
+      loginHint?: string;
+      loginStyle?: string;
+    }
+    function loginWithMeteorDeveloperAccount(options?: Meteor.LoginWithExternalServiceOptions, callback?: Function): void;
+    function loginWithFacebook(options?: Meteor.LoginWithExternalServiceOptions, callback?: Function): void;
+    function loginWithGithub(options?: Meteor.LoginWithExternalServiceOptions, callback?: Function): void;
+    function loginWithGoogle(options?: Meteor.LoginWithExternalServiceOptions, callback?: Function): void;
+    function loginWithMeetup(options?: Meteor.LoginWithExternalServiceOptions, callback?: Function): void;
+    function loginWithTwitter(options?: Meteor.LoginWithExternalServiceOptions, callback?: Function): void;
+    function loginWithWeibo(options?: Meteor.LoginWithExternalServiceOptions, callback?: Function): void;
+    function loggingIn(): boolean;
+    function loginWith<ExternalService>(options?: {
+      requestPermissions?: string[];
+      requestOfflineToken?: boolean;
+      loginUrlParameters?: Object;
+      userEmail?: string;
+      loginStyle?: string;
+      redirectUrl?: string;
+    }, callback?: Function): void;
+    function loginWithPassword(user: Object | string, password: string, callback?: Function): void;
+    function logout(callback?: Function): void;
+    function logoutOtherClients(callback?: Function): void;
+    /** Login **/
+
+    /** Error **/
+    var Error: ErrorStatic;
+    interface ErrorStatic {
+      new (error: string | number, reason?: string, details?: string): Error;
+    }
+    interface Error {
+      error: string | number;
+      reason?: string;
+      details?: string;
+    }
+    /** Error **/
+
+    /** Method **/
+    function methods(methods: Object): void;
+    function call(name: string, ...args: any[]): any;
+    function apply(name: string, args: EJSONable[], options?: {
+      wait?: boolean;
+      onResultReceived?: Function;
+    }, asyncCallback?: Function): any;
+    /** Method **/
+
+    /** Url **/
+    function absoluteUrl(path?: string, options?: {
+      secure?: boolean;
+      replaceLocalhost?: boolean;
+      rootUrl?: string;
+    }): string;
+    /** Url **/
+
+    /** Timeout **/
+    function setInterval(func: Function, delay: number): number;
+    function setTimeout(func: Function, delay: number): number;
+    function clearInterval(id: number): void;
+    function clearTimeout(id: number): void;
+    function defer(func: Function): void;
+    /** Timeout **/
+
+    /** Connection **/
+    interface Connection {
+      id: string;
+      close: Function;
+      onClose: Function;
+      clientAddress: string;
+      httpHeaders: Object;
+    }
+    function onConnection(callback: Function): void;
+    function reconnect(): void;
+    function disconnect(): void;
+    /** Connection **/
+
+    /** Pub/Sub **/
+    interface SubscriptionHandle {
+      stop(): void;
+      ready(): boolean;
+    }
+    interface LiveQueryHandle {
+      stop(): void;
+    }
+    function publish(name: string, func: Function): void;
+    function subscribe(name: string, ...args: any[]): Meteor.SubscriptionHandle;
+    /** Pub/Sub **/
+
+    /** utils **/
+    function startup(func: Function): void;
+    function wrapAsync(func: Function, context?: Object): any;
+    /** utils **/
+  }
+
+  interface Subscription {
+    added(collection: string, id: string, fields: Object): void;
+    changed(collection: string, id: string, fields: Object): void;
+    connection: Meteor.Connection;
+    error(error: Error): void;
+    onStop(func: Function): void;
+    ready(): void;
+    removed(collection: string, id: string): void;
+    stop(): void;
+    userId: string;
+  }
+}
+
+declare module 'meteor/ddp' {
+  import {Meteor} from 'meteor/meteor';
+
+  export module DDP {
+    interface DDPStatic {
+      subscribe(name: string, ...rest: any[]): Meteor.SubscriptionHandle;
+      call(method: string, ...parameters: any[]): void;
+      apply(method: string, ...parameters: any[]): void;
+      methods(IMeteorMethodsDictionary: any): any;
+      status(): DDPStatus;
+      reconnect(): void;
+      disconnect(): void;
+      onReconnect(): void;
+    }
+
+    interface DDPStatus {
+      connected: boolean;
+      status: Meteor.StatusEnum;
+      retryCount: number;
+      retryTime?: number;
+      reason?: string;
+    }
+
+    function connect(url: string): DDPStatic;
+  }
+}
+
+declare module 'meteor/ddp-common' {
+  export module DDPCommon {
+    interface MethodInvocation {
+      new (options: {}): MethodInvocation;
+
+      unblock(): void;
+
+      setUserId(userId: number): void;
+    }
+  }
+}
+
+declare module 'meteor/mongo' {
+  import {Meteor, Subscription} from 'meteor/meteor';
+
+  export module Mongo {
+    interface Selector {
+      [key: string]: any;
+    }
+    interface Selector extends Object { }
+    interface Modifier { }
+    interface SortSpecifier { }
+    interface FieldSpecifier {
+      [id: string]: Number;
+    }
+
+    interface AllowDenyOptions {
+      insert?: (userId: string, doc: any) => boolean;
+      update?: (userId: string, doc: any, fieldNames: string[], modifier: any) => boolean;
+      remove?: (userId: string, doc: any) => boolean;
+      fetch?: string[];
+      transform?: Function;
+    }
+
+    var Collection: CollectionStatic;
+    interface CollectionStatic {
+      new <T>(name: string, options?: {
+        connection?: Object;
+        idGeneration?: string;
+        transform?: Function;
+      }): Collection<T>;
+    }
+    interface Collection<T> {
+      allow(options: {
+        insert?: (userId: string, doc: T) => boolean;
+        update?: (userId: string, doc: T, fieldNames: string[], modifier: any) => boolean;
+        remove?: (userId: string, doc: T) => boolean;
+        fetch?: string[];
+        transform?: Function;
+      }): boolean;
+      deny(options: {
+        insert?: (userId: string, doc: T) => boolean;
+        update?: (userId: string, doc: T, fieldNames: string[], modifier: any) => boolean;
+        remove?: (userId: string, doc: T) => boolean;
+        fetch?: string[];
+        transform?: Function;
+      }): boolean;
+      find(selector?: Selector | ObjectID | string, options?: {
+        sort?: SortSpecifier;
+        skip?: number;
+        limit?: number;
+        fields?: FieldSpecifier;
+        reactive?: boolean;
+        transform?: Function;
+      }): Cursor<T>;
+      findOne(selector?: Selector | ObjectID | string, options?: {
+        sort?: SortSpecifier;
+        skip?: number;
+        fields?: FieldSpecifier;
+        reactive?: boolean;
+        transform?: Function;
+      }): T;
+      insert(doc: T, callback?: Function): string;
+      rawCollection(): any;
+      rawDatabase(): any;
+      remove(selector: Selector | ObjectID | string, callback?: Function): number;
+      update(selector: Selector | ObjectID | string, modifier: Modifier, options?: {
+        multi?: boolean;
+        upsert?: boolean;
+      }, callback?: Function): number;
+      upsert(selector: Selector | ObjectID | string, modifier: Modifier, options?: {
+        multi?: boolean;
+      }, callback?: Function): { numberAffected?: number; insertedId?: string; };
+      _ensureIndex(indexName: string, options?: { [key: string]: any }): void;
+    }
+
+    var Cursor: CursorStatic;
+    interface CursorStatic {
+      new <T>(): Cursor<T>;
+    }
+    interface ObserveCallbacks {
+      added?(document: Object): void;
+      addedAt?(document: Object, atIndex: number, before: Object): void;
+      changed?(newDocument: Object, oldDocument: Object): void;
+      changedAt?(newDocument: Object, oldDocument: Object, indexAt: number): void;
+      removed?(oldDocument: Object): void;
+      removedAt?(oldDocument: Object, atIndex: number): void;
+      movedTo?(document: Object, fromIndex: number, toIndex: number, before: Object): void;
+    }
+    interface ObserveChangesCallbacks {
+      added?(id: string, fields: Object): void;
+      addedBefore?(id: string, fields: Object, before: Object): void;
+      changed?(id: string, fields: Object): void;
+      movedBefore?(id: string, before: Object): void;
+      removed?(id: string): void;
+    }
+    interface Cursor<T> {
+      count(): number;
+      fetch(): Array<T>;
+      forEach(callback: <T>(doc: T, index: number, cursor: Cursor<T>) => void, thisArg?: any): void;
+      map<U>(callback: (doc: T, index: number, cursor: Cursor<T>) => U, thisArg?: any): Array<U>;
+      observe(callbacks: ObserveCallbacks): Meteor.LiveQueryHandle;
+      observeChanges(callbacks: ObserveChangesCallbacks): Meteor.LiveQueryHandle;
+    }
+
+    var ObjectID: ObjectIDStatic;
+    interface ObjectIDStatic {
+      new (hexString?: string): ObjectID;
+    }
+    interface ObjectID {}
+  }
+}
+
+declare module 'meteor/http' {
+  export module HTTP {
+    interface HTTPRequest {
+      content?: string;
+      data?: any;
+      query?: string;
+      params?: { [id: string]: string };
+      auth?: string;
+      headers?: { [id: string]: string };
+      timeout?: number;
+      followRedirects?: boolean;
+    }
+
+    interface HTTPResponse {
+      statusCode?: number;
+      headers?: { [id: string]: string };
+      content?: string;
+      data?: any;
+    }
+
+    function call(method: string, url: string, options?: HTTP.HTTPRequest, asyncCallback?: Function): HTTP.HTTPResponse;
+    function del(url: string, callOptions?: HTTP.HTTPRequest, asyncCallback?: Function): HTTP.HTTPResponse;
+    function get(url: string, callOptions?: HTTP.HTTPRequest, asyncCallback?: Function): HTTP.HTTPResponse;
+    function post(url: string, callOptions?: HTTP.HTTPRequest, asyncCallback?: Function): HTTP.HTTPResponse;
+    function put(url: string, callOptions?: HTTP.HTTPRequest, asyncCallback?: Function): HTTP.HTTPResponse;
+    function call(method: string, url: string, options?: {
+      content?: string;
+      data?: Object;
+      query?: string;
+      params?: Object;
+      auth?: string;
+      headers?: Object;
+      timeout?: number;
+      followRedirects?: boolean;
+      npmRequestOptions?: Object;
+      beforeSend?: Function;
+    }, asyncCallback?: Function): HTTP.HTTPResponse;
+  }
+}
+
+declare module 'meteor/random' {
+  export module Random {
+    function id(numberOfChars?: number): string;
+    function secret(numberOfChars?: number): string;
+    function fraction(): number;
+    function hexString(numberOfDigits: number): string; // @param numberOfDigits, @returns a random hex string of the given length
+    function choice(array: any[]): string; // @param array, @return a random element in array
+    function choice(str: string): string; // @param str, @return a random char in str
+  }
+}
+
+declare module 'meteor/blaze' {
+  import {Meteor} from 'meteor/meteor';
+
+  export module Blaze {
+    var View: ViewStatic;
+
+    interface ViewStatic {
+       new (name ?: string, renderFunction ?: Function): View;
+    }
+
+    interface View {
+      name: string;
+      parentView: View;
+      isCreated: boolean;
+      isRendered: boolean;
+      isDestroyed: boolean;
+      renderCount: number;
+      autorun(runFunc: Function): void;
+      onViewCreated(func: Function): void;
+      onViewReady(func: Function): void;
+      onViewDestroyed(func: Function): void;
+      firstNode(): Node;
+      lastNode(): Node;
+      template: Template;
+      templateInstance(): TemplateInstance;
+    }
+    var currentView: View;
+
+    function isTemplate(value: any): boolean;
+
+    interface HelpersMap {
+      [key: string]: Function;
+    }
+
+    interface EventsMap {
+      [key: string]: Function;
+    }
+
+    var Template: TemplateStatic;
+
+    interface TemplateStatic {
+      new (viewName ?: string, renderFunction ?: Function): Template;
+
+      registerHelper(name: string, func: Function): void;
+      instance(): TemplateInstance;
+      currentData(): any;
+      parentData(numLevels: number): any;
+    }
+
+    interface Template {
+      viewName: string;
+      renderFunction: Function;
+      constructView(): View;
+      head: Template;
+      find(selector: string): Template;
+      findAll(selector: string): Template[];
+      $: any;
+      onCreated(cb: Function): void;
+      onRendered(cb: Function): void;
+      onDestroyed(cb: Function): void;
+      created: Function;
+      rendered: Function;
+      destroyed: Function;
+      helpers(helpersMap: HelpersMap): void;
+      events(eventsMap: EventsMap): void;
+    }
+
+    var TemplateInstance: TemplateInstanceStatic;
+
+    interface TemplateInstanceStatic {
+      new (view: View): TemplateInstance;
+    }
+
+    interface TemplateInstance {
+      $(selector: string): any;
+      autorun(runFunc: Function): Object;
+      data: Object;
+      find(selector?: string): TemplateInstance;
+      findAll(selector: string): TemplateInstance[];
+      firstNode: Object;
+      lastNode: Object;
+      subscribe(name: string, ...args: any[]): Meteor.SubscriptionHandle;
+      subscriptionsReady(): boolean;
+      view: Object;
+    }
+
+    function Each(argFunc: Function, contentFunc: Function, elseFunc?: Function): View;
+    function Unless(conditionFunc: Function, contentFunc: Function, elseFunc?: Function): View;
+    function If(conditionFunc: Function, contentFunc: Function, elseFunc?: Function): View;
+
+    function Let(bindings: Function, contentFunc: Function): View;
+    function With(data: Object | Function, contentFunc: Function): View;
+
+    function getData(elementOrView?: HTMLElement | View): Object;
+    function getView(element?: HTMLElement): View;
+
+    function remove(renderedView: View): void;
+    function render(templateOrView: Template | View, parentNode: Node, nextNode?: Node, parentView?: View): View;
+    function renderWithData(templateOrView: Template | View, data: Object | Function, parentNode: Node, nextNode?: Node, parentView?: View): View;
+    function toHTML(templateOrView: Template | View): string;
+    function toHTMLWithData(templateOrView: Template | View, data: Object | Function): string;
+  }
+}
+
+declare module 'meteor/browser-policy' {
+  export module BrowserPolicy {
+    interface framing {
+      disallow(): void;
+      restrictToOrigin(origin: string): void;
+      allowAll(): void;
+    }
+
+    interface content {
+      allowEval(): void;
+      allowInlineStyles(): void;
+      allowInlineScripts(): void;
+      allowSameOriginForAll(): void;
+      allowDataUrlForAll(): void;
+      allowOriginForAll(origin: string): void;
+      allowImageOrigin(origin: string): void;
+      allowFrameOrigin(origin: string): void;
+      allowContentTypeSniffing(): void;
+      allowAllContentOrigin(): void;
+      allowAllContentDataUrl(): void;
+      allowAllContentSameOrigin(): void;
+
+      disallowAll(): void;
+      disallowInlineStyles(): void;
+      disallowEval(): void;
+      disallowInlineScripts(): void;
+      disallowFont(): void;
+      disallowObject(): void;
+      disallowAllContent(): void;
+    }
+  }
+}
+
+declare module 'meteor/tiny-test' {
+  interface ILengthAble {
+    length: number;
+  }
+
+  interface ITinytestAssertions {
+    ok(doc: Object): void;
+    expect_fail(): void;
+    fail(doc: Object): void;
+    runId(): string;
+    equal<T>(actual: T, expected: T, message?: string, not?: boolean): void;
+    notEqual<T>(actual: T, expected: T, message?: string): void;
+    instanceOf(obj: Object, klass: Function, message?: string): void;
+    notInstanceOf(obj: Object, klass: Function, message?: string): void;
+    matches(actual: any, regexp: RegExp, message?: string): void;
+    notMatches(actual: any, regexp: RegExp, message?: string): void;
+    throws(f: Function, expected?: string | RegExp): void;
+    isTrue(v: boolean, msg?: string): void;
+    isFalse(v: boolean, msg?: string): void;
+    isNull(v: any, msg?: string): void;
+    isNotNull(v: any, msg?: string): void;
+    isUndefined(v: any, msg?: string): void;
+    isNotUndefined(v: any, msg?: string): void;
+    isNan(v: any, msg?: string): void;
+    isNotNan(v: any, msg?: string): void;
+    include<T>(s: Array<T> | Object | string, value: any, msg?: string, not?: boolean): void;
+
+    notInclude<T>(s: Array<T> | Object | string, value: any, msg?: string, not?: boolean): void;
+    length(obj: ILengthAble, expected_length: number, msg?: string): void;
+    _stringEqual(actual: string, expected: string, msg?: string): void;
+  }
+
+  export module Tinytest {
+    function add(description: string, func: (test: ITinytestAssertions) => void): void;
+    function addAsync(description: string, func: (test: ITinytestAssertions) => void): void;
+  }
+}
+
+declare module 'meteor/accounts-base' {
+  import {Meteor} from 'meteor/meteor';
+
+  interface EmailFields {
+    from?: () => string;
+    subject?: (user: Meteor.User) => string;
+    text?: (user: Meteor.User, url: string) => string;
+    html?: (user: Meteor.User, url: string) => string;
+  }
+  interface Header {
+    [id: string]: string;
+  }
+  interface EmailTemplates {
+    from: string;
+    siteName: string;
+    headers?: Header;
+    resetPassword: EmailFields;
+    enrollAccount: EmailFields;
+    verifyEmail: EmailFields;
+  }
+
+  export module Accounts {
+    var emailTemplates: EmailTemplates;
+    function addEmail(userId: string, newEmail: string, verified?: boolean): void;
+    function removeEmail(userId: string, email: string): void;
+    function verifyEmail(token: string, callback?: Function): void;
+
+    function user(): Meteor.User;
+    function userId(): string;
+
+    function createUser(options: {
+      username?: string;
+      email?: string;
+      password?: string;
+      profile?: Object;
+    }, callback?: Function): string;
+    function setUsername(userId: string, newUsername: string): void;
+    function onCreateUser(func: Function): void;
+    function findUserByEmail(email: string): Object;
+    function findUserByUsername(username: string): Object;
+    function validateNewUser(func: Function): boolean;
+
+    function changePassword(oldPassword: string, newPassword: string, callback?: Function): void;
+    function forgotPassword(options: {
+      email?: string;
+    }, callback?: Function): void;
+    function resetPassword(token: string, newPassword: string, callback?: Function): void;
+    function setPassword(userId: string, newPassword: string, options?: {
+      logout?: Object;
+    }): void;
+
+    function onEmailVerificationLink(callback: Function): void;
+    function onEnrollmentLink(callback: Function): void;
+    function onResetPasswordLink(callback: Function): void;
+    function sendEnrollmentEmail(userId: string, email?: string): void;
+    function sendResetPasswordEmail(userId: string, email?: string): void;
+    function sendVerificationEmail(userId: string, email?: string): void;
+
+    var ui: {
+      config(options: {
+        requestPermissions?: Object;
+        requestOfflineToken?: Object;
+        forceApprovalPrompt?: Object;
+        passwordSignupFields?: string;
+      }): void;
+    };
+    function config(options: {
+      sendVerificationEmail?: boolean;
+      forbidClientAccountCreation?: boolean;
+      restrictCreationByEmailDomain?: string | Function;
+      loginExpirationInDays?: number;
+      oauthSecretKey?: string;
+    }): void;
+
+    function onLogin(func: Function): { stop: () => void };
+    function onLoginFailure(func: Function): { stop: () => void };
+    function loggingIn(): boolean;
+    function logout(callback?: Function): void;
+    function logoutOtherClients(callback?: Function): void;
+    function loginServicesConfigured(): boolean;
+    function onPageLoadLogin(func: Function): void;
+    function validateLoginAttempt(func: Function): { stop: () => void };
+    interface IValidateLoginAttemptCbOpts {
+      type: string;
+      allowed: boolean;
+      error: Meteor.Error;
+      user: Meteor.User;
+      connection: Meteor.Connection;
+      methodName: string;
+      methodArguments: any[];
+    }
+  }
+}
+
+declare namespace App {
+  function accessRule(pattern: string, options?: {
+    type?: string;
+    launchExternal?: boolean;
+  }): void;
+  function configurePlugin(id: string, config: Object): void;
+  function icons(icons: Object): void;
+  function info(options: {
+    id?: string;
+    version?: string;
+    name?: string;
+    description?: string;
+    author?: string;
+    email?: string;
+    website?: string;
+  }): void;
+  function launchScreens(launchScreens: Object): void;
+  function setPreference(name: string, value: string, platform?: string): void;
+}
+
+interface EJSONableCustomType {
+  clone(): EJSONableCustomType;
+  equals(other: Object): boolean;
+  toJSONValue(): JSONable;
+  typeName(): string;
+}
+interface EJSONable {
+  [key: string]: number | string | boolean | Object | number[] | string[] | Object[] | Date | Uint8Array | EJSONableCustomType;
+}
+interface JSONable {
+  [key: string]: number | string | boolean | Object | number[] | string[] | Object[];
+}
+interface EJSON extends EJSONable { }
+
+declare module 'meteor/ejson' {
+  export module EJSON {
+    function addType(name: string, factory: (val: JSONable) => EJSONableCustomType): void;
+    function clone<T>(val: T): T;
+    function equals(a: EJSON, b: EJSON, options?: {
+      keyOrderSensitive?: boolean;
+    }): boolean;
+    function fromJSONValue(val: JSONable): any;
+    function isBinary(x: Object): boolean;
+    var newBinary: any;
+    function parse(str: string): EJSON;
+    function stringify(val: EJSON, options?: {
+      indent?: boolean | number | string;
+      canonical?: boolean;
+    }): string;
+    function toJSONValue(val: EJSON): JSONable;
+  }
+}
+
+declare module 'meteor/tracker' {
+  export module Tracker {
+    function Computation(): void;
+    interface Computation {
+      firstRun: boolean;
+      invalidate(): void;
+      invalidated: boolean;
+      onInvalidate(callback: Function): void;
+      onStop(callback: Function): void;
+      stop(): void;
+      stopped: boolean;
+    }
+    var currentComputation: Computation;
+
+    var Dependency: DependencyStatic;
+    interface DependencyStatic {
+      new (): Dependency;
+    }
+    interface Dependency {
+      changed(): void;
+      depend(fromComputation?: Computation): boolean;
+      hasDependents(): boolean;
+    }
+
+    var active: boolean;
+    function afterFlush(callback: Function): void;
+    function autorun(runFunc: (computation: Computation) => void, options?: {
+      onError?: Function;
+    }): Computation;
+    function flush(): void;
+    function nonreactive(func: Function): void;
+    function onInvalidate(callback: Function): void;
+  }
+}
+
+declare module 'meteor/session' {
+  import {EJSON} from 'meteor/ejson';
+
+  export module Session {
+    function equals(key: string, value: string | number | boolean | any): boolean;
+    function get(key: string): any;
+    function set(key: string, value: EJSONable | any): void;
+    function setDefault(key: string, value: EJSONable | any): void;
+  }
+}
+
+declare module 'meteor/email' {
+  export module Email {
+    function send(options: {
+      from?: string;
+      to?: string | string[];
+      cc?: string | string[];
+      bcc?: string | string[];
+      replyTo?: string | string[];
+      subject?: string;
+      text?: string;
+      html?: string;
+      headers?: Object;
+      attachments?: Object[];
+      mailComposer?: MailComposer;
+    }): void;
+
+    interface MailComposerOptions {
+      escapeSMTP: boolean;
+      encoding: string;
+      charset: string;
+      keepBcc: boolean;
+      forceEmbeddedImages: boolean;
+    }
+
+    var MailComposer: MailComposerStatic;
+    interface MailComposerStatic {
+      new (options: MailComposerOptions): MailComposer;
+    }
+    interface MailComposer {
+      addHeader(name: string, value: string): void;
+      setMessageOption(from: string, to: string, body: string, html: string): void;
+      streamMessage(): void;
+      pipe(stream: any /** fs.WriteStream **/): void;
+    }
+  }
+}
+
+declare module 'meteor/reactive-var' {
+  var ReactiveVar: ReactiveVarStatic;
+  interface ReactiveVarStatic {
+    new <T>(initialValue: T, equalsFunc?: Function): ReactiveVar<T>;
+  }
+  interface ReactiveVar<T> {
+    get(): T;
+    set(newValue: T): void;
+  }
+}
+
+declare module 'meteor/templating' {
+  import {Blaze} from 'meteor/blaze';
+  import {Meteor} from 'meteor/meteor';
+
+  var Template: TemplateStatic;
+  interface TemplateStatic extends Blaze.TemplateStatic {
+    new (viewName?: string, renderFunction?: Function): Blaze.Template;
+    body: Blaze.Template;
+    [index: string]: any | Blaze.Template;
+  }
+}
+// Generated by typings
+// Source: https://raw.githubusercontent.com/barbatus/meteor-typings/83c6933d0ef07abfd4a2a85b5ec41bc3949f6d28/meteor/1.3/meteor_server.d.ts
+declare function execFileAsync(command: string, args?: any[], options?: {
+  cwd?: Object;
+  env?: Object;
+  stdio?: any[] | string;
+  destination?: any;
+  waitForClose?: string;
+}): any;
+declare function execFileSync(command: string, args?: any[], options?: {
+  cwd?: Object;
+  env?: Object;
+  stdio?: any[] | string;
+  destination?: any;
+  waitForClose?: string;
+}): String;
+
+declare module Assets {
+  function getBinary(assetPath: string, asyncCallback?: Function): EJSON;
+  function getText(assetPath: string, asyncCallback?: Function): string;
+}
+
+declare module Cordova {
+  function depends(dependencies: { [id: string]: string }): void;
+}
+
+declare module Npm {
+  function depends(dependencies: { [id: string]: string }): void;
+  function require(name: string): any;
+}
+
+declare namespace Package {
+  function describe(options: {
+    summary?: string;
+    version?: string;
+    name?: string;
+    git?: string;
+    documentation?: string;
+    debugOnly?: boolean;
+    prodOnly?: boolean;
+    testOnly?: boolean;
+  }): void;
+  function onTest(func: (api: PackageAPI) => void): void;
+  function onUse(func: (api: PackageAPI) => void): void;
+  function registerBuildPlugin(options?: {
+    name?: string;
+    use?: string | string[];
+    sources?: string[];
+    npmDependencies?: Object;
+  }): void;
+}
+
+interface PackageAPI {
+  new (): PackageAPI;
+  addAssets(filenames: string | string[], architecture: string | string[]): void;
+  addFiles(filenames: string | string[], architecture?: string | string[], options?: {
+    bare?: boolean;
+  }): void;
+  export(exportedObjects: string | string[], architecture?: string | string[], exportOptions?: Object, testOnly?: boolean): void;
+  imply(packageNames: string | string[], architecture?: string | string[]): void;
+  use(packageNames: string | string[], architecture?: string | string[], options?: {
+    weak?: boolean;
+    unordered?: boolean;
+  }): void;
+  versionsFrom(meteorRelease: string | string[]): void;
+}
+
+declare var console: Console;
diff --git a/typings/main/definitions/es6-promise/index.d.ts b/typings/main/definitions/es6-promise/index.d.ts
new file mode 100644
index 0000000..101957d
--- /dev/null
+++ b/typings/main/definitions/es6-promise/index.d.ts
@@ -0,0 +1,84 @@
+// Generated by typings
+// Source: https://raw.githubusercontent.com/typed-typings/npm-es6-promise/fb04188767acfec1defd054fc8024fafa5cd4de7/dist/es6-promise.d.ts
+declare module '~es6-promise/dist/es6-promise' {
+export interface Thenable <R> {
+  then <U> (onFulfilled?: (value: R) => U | Thenable<U>, onRejected?: (error: any) => U | Thenable<U>): Thenable<U>;
+  then <U> (onFulfilled?: (value: R) => U | Thenable<U>, onRejected?: (error: any) => void): Thenable<U>;
+}
+
+export class Promise <R> implements Thenable <R> {
+  /**
+   * If you call resolve in the body of the callback passed to the constructor,
+   * your promise is fulfilled with result object passed to resolve.
+   * If you call reject your promise is rejected with the object passed to resolve.
+   * For consistency and debugging (eg stack traces), obj should be an instanceof Error.
+   * Any errors thrown in the constructor callback will be implicitly passed to reject().
+   */
+  constructor (callback: (resolve : (value?: R | Thenable<R>) => void, reject: (error?: any) => void) => void);
+
+  /**
+   * onFulfilled is called when/if "promise" resolves. onRejected is called when/if "promise" rejects.
+   * Both are optional, if either/both are omitted the next onFulfilled/onRejected in the chain is called.
+   * Both callbacks have a single parameter , the fulfillment value or rejection reason.
+   * "then" returns a new promise equivalent to the value you return from onFulfilled/onRejected after being passed through Promise.resolve.
+   * If an error is thrown in the callback, the returned promise rejects with that error.
+   *
+   * @param onFulfilled called when/if "promise" resolves
+   * @param onRejected called when/if "promise" rejects
+   */
+  then <U> (onFulfilled?: (value: R) => U | Thenable<U>, onRejected?: (error: any) => U | Thenable<U>): Promise<U>;
+  then <U> (onFulfilled?: (value: R) => U | Thenable<U>, onRejected?: (error: any) => void): Promise<U>;
+
+  /**
+   * Sugar for promise.then(undefined, onRejected)
+   *
+   * @param onRejected called when/if "promise" rejects
+   */
+  catch <U> (onRejected?: (error: any) => U | Thenable<U>): Promise<U>;
+
+  /**
+   * Make a new promise from the thenable.
+   * A thenable is promise-like in as far as it has a "then" method.
+   */
+  static resolve (): Promise<void>;
+  static resolve <R> (value: R | Thenable<R>): Promise<R>;
+
+  /**
+   * Make a promise that rejects to obj. For consistency and debugging (eg stack traces), obj should be an instanceof Error
+   */
+  static reject <R> (error: any): Promise<R>;
+
+  /**
+   * Make a promise that fulfills when every item in the array fulfills, and rejects if (and when) any item rejects.
+   * the array passed to all can be a mixture of promise-like objects and other objects.
+   * The fulfillment value is an array (in order) of fulfillment values. The rejection value is the first rejection value.
+   */
+  static all<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(values: [T1 | Thenable<T1>, T2 | Thenable<T2>, T3 | Thenable<T3>, T4 | Thenable <T4>, T5 | Thenable<T5>, T6 | Thenable<T6>, T7 | Thenable<T7>, T8 | Thenable<T8>, T9 | Thenable<T9>, T10 | Thenable<T10>]): Promise<[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10]>;
+  static all<T1, T2, T3, T4, T5, T6, T7, T8, T9>(values: [T1 | Thenable<T1>, T2 | Thenable<T2>, T3 | Thenable<T3>, T4 | Thenable <T4>, T5 | Thenable<T5>, T6 | Thenable<T6>, T7 | Thenable<T7>, T8 | Thenable<T8>, T9 | Thenable<T9>]): Promise<[T1, T2, T3, T4, T5, T6, T7, T8, T9]>;
+  static all<T1, T2, T3, T4, T5, T6, T7, T8>(values: [T1 | Thenable<T1>, T2 | Thenable<T2>, T3 | Thenable<T3>, T4 | Thenable <T4>, T5 | Thenable<T5>, T6 | Thenable<T6>, T7 | Thenable<T7>, T8 | Thenable<T8>]): Promise<[T1, T2, T3, T4, T5, T6, T7, T8]>;
+  static all<T1, T2, T3, T4, T5, T6, T7>(values: [T1 | Thenable<T1>, T2 | Thenable<T2>, T3 | Thenable<T3>, T4 | Thenable <T4>, T5 | Thenable<T5>, T6 | Thenable<T6>, T7 | Thenable<T7>]): Promise<[T1, T2, T3, T4, T5, T6, T7]>;
+  static all<T1, T2, T3, T4, T5, T6>(values: [T1 | Thenable<T1>, T2 | Thenable<T2>, T3 | Thenable<T3>, T4 | Thenable <T4>, T5 | Thenable<T5>, T6 | Thenable<T6>]): Promise<[T1, T2, T3, T4, T5, T6]>;
+  static all<T1, T2, T3, T4, T5>(values: [T1 | Thenable<T1>, T2 | Thenable<T2>, T3 | Thenable<T3>, T4 | Thenable <T4>, T5 | Thenable<T5>]): Promise<[T1, T2, T3, T4, T5]>;
+  static all<T1, T2, T3, T4>(values: [T1 | Thenable<T1>, T2 | Thenable<T2>, T3 | Thenable<T3>, T4 | Thenable <T4>]): Promise<[T1, T2, T3, T4]>;
+  static all<T1, T2, T3>(values: [T1 | Thenable<T1>, T2 | Thenable<T2>, T3 | Thenable<T3>]): Promise<[T1, T2, T3]>;
+  static all<T1, T2>(values: [T1 | Thenable<T1>, T2 | Thenable<T2>]): Promise<[T1, T2]>;
+  static all<T1>(values: [T1 | Thenable<T1>]): Promise<[T1]>;
+  static all<TAll>(values: Array<TAll | Thenable<TAll>>): Promise<TAll[]>;
+
+  /**
+   * Make a Promise that fulfills when any item fulfills, and rejects if any item rejects.
+   */
+  static race <R> (promises: (R | Thenable<R>)[]): Promise<R>;
+}
+
+/**
+ * The polyfill method will patch the global environment (in this case to the Promise name) when called.
+ */
+export function polyfill (): void;
+}
+declare module 'es6-promise/dist/es6-promise' {
+export * from '~es6-promise/dist/es6-promise';
+}
+declare module 'es6-promise' {
+export * from '~es6-promise/dist/es6-promise';
+}
-- 
2.7.4


From a0115f0bcc70a15fd140dcba3cae54ba74c14dab Mon Sep 17 00:00:00 2001
From: Uri Goldshtein <uri.goldshtein@gmail.com>
Date: Fri, 13 May 2016 23:16:51 +0300
Subject: [PATCH 006/259] Step 0.6: Create the root component

---
 client/app.ts | 11 +++++++++++
 1 file changed, 11 insertions(+)
 create mode 100644 client/app.ts

diff --git a/client/app.ts b/client/app.ts
new file mode 100644
index 0000000..d042696
--- /dev/null
+++ b/client/app.ts
@@ -0,0 +1,11 @@
+import 'reflect-metadata';
+import { Component } from '@angular/core';
+import { bootstrap } from '@angular/platform-browser-dynamic';
+
+@Component({
+  selector: 'app',
+  templateUrl: '/client/app.html'
+})
+class Socially { }
+
+bootstrap(Socially);
-- 
2.7.4


From aa66697e0b017a85342eaa289b9bb8e9c87b8872 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 15:46:28 +0200
Subject: [PATCH 007/259] Step 0.7: Add the main component HTML file

---
 client/app.html | 1 +
 1 file changed, 1 insertion(+)
 create mode 100644 client/app.html

diff --git a/client/app.html b/client/app.html
new file mode 100644
index 0000000..c57eff5
--- /dev/null
+++ b/client/app.html
@@ -0,0 +1 @@
+Hello World!
\ No newline at end of file
-- 
2.7.4


From 3301e90974b16a18e28290cde8432974a3535744 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 15:46:43 +0200
Subject: [PATCH 008/259] Step 0.8: Use the main component in the index.html
 file

---
 client/index.html | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/client/index.html b/client/index.html
index 3887661..2662e56 100644
--- a/client/index.html
+++ b/client/index.html
@@ -1,3 +1,3 @@
 <body>
-<p>Nothing here</p>
+  <app></app>
 </body>
\ No newline at end of file
-- 
2.7.4


From 1895fb3656ac0fffd9a597700e817c06c4c8d883 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 15:47:57 +0200
Subject: [PATCH 009/259] Step 1.1: Add static HTML to the main component view

---
 client/app.html | 15 ++++++++++++++-
 1 file changed, 14 insertions(+), 1 deletion(-)

diff --git a/client/app.html b/client/app.html
index c57eff5..9ea318e 100644
--- a/client/app.html
+++ b/client/app.html
@@ -1 +1,14 @@
-Hello World!
\ No newline at end of file
+<ul>
+  <li>
+    <span>Dubstep-Free Zone</span>
+    <p>
+      Can we please just for an evening not listen to dubstep.
+    </p>
+  </li>
+  <li>
+    <span>All dubstep all the time</span>
+    <p>
+      Get it on!
+    </p>
+  </li>
+</ul>
\ No newline at end of file
-- 
2.7.4


From 0572f7d646eabf491db6a6588274303bc04a6383 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 15:49:08 +0200
Subject: [PATCH 010/259] Step 2.1: Add dynamic html to the main component view

---
 client/app.html | 23 +++++++++--------------
 1 file changed, 9 insertions(+), 14 deletions(-)

diff --git a/client/app.html b/client/app.html
index 9ea318e..b750655 100644
--- a/client/app.html
+++ b/client/app.html
@@ -1,14 +1,9 @@
-<ul>
-  <li>
-    <span>Dubstep-Free Zone</span>
-    <p>
-      Can we please just for an evening not listen to dubstep.
-    </p>
-  </li>
-  <li>
-    <span>All dubstep all the time</span>
-    <p>
-      Get it on!
-    </p>
-  </li>
-</ul>
\ No newline at end of file
+<div>
+  <ul>
+    <li *ngFor="let party of parties">
+      {{party.name}}
+      <p>{{party.description}}</p>
+      <p>{{party.location}}</p>
+    </li>
+  </ul>
+</div>
\ No newline at end of file
-- 
2.7.4


From b554448056555d8d8a7582feceff6609c9e25b65 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 15:50:04 +0200
Subject: [PATCH 011/259] Step 2.2: load parties data into the app

---
 client/app.ts | 19 ++++++++++++++++++-
 1 file changed, 18 insertions(+), 1 deletion(-)

diff --git a/client/app.ts b/client/app.ts
index d042696..b02d028 100644
--- a/client/app.ts
+++ b/client/app.ts
@@ -6,6 +6,23 @@ import { bootstrap } from '@angular/platform-browser-dynamic';
   selector: 'app',
   templateUrl: '/client/app.html'
 })
-class Socially { }
+class Socially {
+  constructor() {
+    this.parties = [
+      {'name': 'Dubstep-Free Zone',
+        'description': 'Can we please just for an evening not listen to dubstep.',
+        'location': 'Palo Alto'
+      },
+      {'name': 'All dubstep all the time',
+        'description': 'Get it on!',
+        'location': 'Palo Alto'
+      },
+      {'name': 'Savage lounging',
+        'description': 'Leisure suit required. And only fiercest manners.',
+        'location': 'San Francisco'
+      }
+    ];
+  }
+}
 
 bootstrap(Socially);
-- 
2.7.4


From 1dde7907fa4fd395ba1ba7ab62377c5cfb9f04d2 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 15:50:30 +0200
Subject: [PATCH 012/259] Step 2.3: define parties property

---
 client/app.ts | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/client/app.ts b/client/app.ts
index b02d028..4fb0d89 100644
--- a/client/app.ts
+++ b/client/app.ts
@@ -7,6 +7,8 @@ import { bootstrap } from '@angular/platform-browser-dynamic';
   templateUrl: '/client/app.html'
 })
 class Socially {
+  parties: Array<Object>;
+
   constructor() {
     this.parties = [
       {'name': 'Dubstep-Free Zone',
-- 
2.7.4


From 28bfc772715f3afd89e70786de75248711ae7483 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 15:51:11 +0200
Subject: [PATCH 013/259] Step 3.1: add the parties collection

---
 collections/parties.ts | 3 +++
 1 file changed, 3 insertions(+)
 create mode 100644 collections/parties.ts

diff --git a/collections/parties.ts b/collections/parties.ts
new file mode 100644
index 0000000..22bdeab
--- /dev/null
+++ b/collections/parties.ts
@@ -0,0 +1,3 @@
+import {Mongo} from 'meteor/mongo';
+
+export let Parties = new Mongo.Collection('parties');
\ No newline at end of file
-- 
2.7.4


From 36f16e12f80fabb3741615700e53acd0f7f846ea Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 15:53:10 +0200
Subject: [PATCH 014/259] Step 3.2: import the parties collection

---
 client/app.ts | 1 +
 1 file changed, 1 insertion(+)

diff --git a/client/app.ts b/client/app.ts
index 4fb0d89..d609d81 100644
--- a/client/app.ts
+++ b/client/app.ts
@@ -1,6 +1,7 @@
 import 'reflect-metadata';
 import { Component } from '@angular/core';
 import { bootstrap } from '@angular/platform-browser-dynamic';
+import { Parties }   from '../collections/parties';
 
 @Component({
   selector: 'app',
-- 
2.7.4


From 348065c5475978e29d098b3d5ed08031f27fb331 Mon Sep 17 00:00:00 2001
From: Uri Goldshtein <uri.goldshtein@gmail.com>
Date: Sat, 14 May 2016 00:16:22 +0300
Subject: [PATCH 015/259] Step 3.3: Added Angular2-Meteor auto bootstrap

---
 package.json | 1 +
 1 file changed, 1 insertion(+)

diff --git a/package.json b/package.json
index 2513a0c..0418911 100644
--- a/package.json
+++ b/package.json
@@ -11,6 +11,7 @@
     "@angular/platform-browser": "^2.0.0-rc.4",
     "@angular/platform-browser-dynamic": "^2.0.0-rc.4",
     "angular2-meteor": "^0.5.6",
+    "angular2-meteor-auto-bootstrap": "^0.5.6",
     "angular2-meteor-polyfills": "^0.1.1",
     "es6-shim": "^0.35.1",
     "meteor-node-stubs": "^0.2.3",
-- 
2.7.4


From 06182a43b7eb53f2628c89ee52e06c15844189a0 Mon Sep 17 00:00:00 2001
From: Uri Goldshtein <uri.goldshtein@gmail.com>
Date: Sat, 14 May 2016 00:16:56 +0300
Subject: [PATCH 016/259] Step 3.4: Import bootstrap from
 angular2-meteor-auto-bootstrap

---
 client/app.ts | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/client/app.ts b/client/app.ts
index d609d81..fddd502 100644
--- a/client/app.ts
+++ b/client/app.ts
@@ -1,6 +1,6 @@
 import 'reflect-metadata';
 import { Component } from '@angular/core';
-import { bootstrap } from '@angular/platform-browser-dynamic';
+import { bootstrap } from 'angular2-meteor-auto-bootstrap';
 import { Parties }   from '../collections/parties';
 
 @Component({
-- 
2.7.4


From 823b29e2122ddba45cef79ea4c3ea9fa83c3a837 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 16:08:10 +0200
Subject: [PATCH 017/259] Step 3.5: Bind Mongo Collection to Angular

---
 client/app.ts | 20 ++++----------------
 1 file changed, 4 insertions(+), 16 deletions(-)

diff --git a/client/app.ts b/client/app.ts
index fddd502..1de8b0e 100644
--- a/client/app.ts
+++ b/client/app.ts
@@ -2,29 +2,17 @@ import 'reflect-metadata';
 import { Component } from '@angular/core';
 import { bootstrap } from 'angular2-meteor-auto-bootstrap';
 import { Parties }   from '../collections/parties';
+import { Mongo }     from 'meteor/mongo';
 
 @Component({
   selector: 'app',
   templateUrl: '/client/app.html'
 })
 class Socially {
-  parties: Array<Object>;
+  parties: Mongo.Cursor<Object>;
 
-  constructor() {
-    this.parties = [
-      {'name': 'Dubstep-Free Zone',
-        'description': 'Can we please just for an evening not listen to dubstep.',
-        'location': 'Palo Alto'
-      },
-      {'name': 'All dubstep all the time',
-        'description': 'Get it on!',
-        'location': 'Palo Alto'
-      },
-      {'name': 'Savage lounging',
-        'description': 'Leisure suit required. And only fiercest manners.',
-        'location': 'San Francisco'
-      }
-    ];
+  constructor () {
+    this.parties = Parties.find();
   }
 }
 
-- 
2.7.4


From d157b46b5dd2824b2197334d2197887e84fb5e6c Mon Sep 17 00:00:00 2001
From: barbatus <alex.borodach@gmail.com>
Date: Wed, 14 Oct 2015 23:21:31 +0300
Subject: [PATCH 018/259] Step 3.7: load initial parties on server side

---
 server/load-parties.ts | 28 ++++++++++++++++++++++++++++
 1 file changed, 28 insertions(+)
 create mode 100644 server/load-parties.ts

diff --git a/server/load-parties.ts b/server/load-parties.ts
new file mode 100644
index 0000000..9e0751c
--- /dev/null
+++ b/server/load-parties.ts
@@ -0,0 +1,28 @@
+import { Parties } from '../collections/parties.ts';
+
+export function loadParties() {
+  if (Parties.find().count() === 0) {
+
+    var parties = [
+      {
+        'name': 'Dubstep-Free Zone',
+        'description': 'Can we please just for an evening not listen to dubstep.',
+        'location': 'Palo Alto'
+      },
+      {
+        'name': 'All dubstep all the time',
+        'description': 'Get it on!',
+        'location': 'Palo Alto'
+      },
+      {
+        'name': 'Savage lounging',
+        'description': 'Leisure suit required. And only fiercest manners.',
+        'location': 'San Francisco'
+      }
+    ];
+
+    for (var i = 0; i < parties.length; i++) {
+      Parties.insert(parties[i]);
+    }
+  }
+}
\ No newline at end of file
-- 
2.7.4


From 8145b49fd5bac19596c6835433aba74b70641da7 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 16:11:01 +0200
Subject: [PATCH 019/259] Step 3.9: bootstrap server side

---
 server/main.ts | 4 ++++
 1 file changed, 4 insertions(+)
 create mode 100644 server/main.ts

diff --git a/server/main.ts b/server/main.ts
new file mode 100644
index 0000000..cdda65d
--- /dev/null
+++ b/server/main.ts
@@ -0,0 +1,4 @@
+import {loadParties} from './load-parties.ts';
+import {Meteor} from 'meteor/meteor';
+
+Meteor.startup(loadParties);
\ No newline at end of file
-- 
2.7.4


From 8c49af8d4c45974436a421ebdcaf4f3cba541541 Mon Sep 17 00:00:00 2001
From: Uri Goldshtein <uri.goldshtein@gmail.com>
Date: Sat, 14 May 2016 13:39:12 +0300
Subject: [PATCH 020/259] Step 4.1: create PartiesForm component

---
 client/imports/parties-form/parties-form.ts | 8 ++++++++
 1 file changed, 8 insertions(+)
 create mode 100644 client/imports/parties-form/parties-form.ts

diff --git a/client/imports/parties-form/parties-form.ts b/client/imports/parties-form/parties-form.ts
new file mode 100644
index 0000000..223a99a
--- /dev/null
+++ b/client/imports/parties-form/parties-form.ts
@@ -0,0 +1,8 @@
+import 'reflect-metadata';
+import { Component } from '@angular/core';
+
+@Component({
+  selector: 'parties-form',
+  templateUrl: '/client/imports/parties-form/parties-form.html'
+})
+export class PartiesForm { }
\ No newline at end of file
-- 
2.7.4


From 8f148dd0018260ac5dca9359a3ea9bc4135fba2b Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 16:14:14 +0200
Subject: [PATCH 021/259] Step 4.2: add parties-form.html template

---
 client/imports/parties-form/parties-form.html | 9 +++++++++
 1 file changed, 9 insertions(+)
 create mode 100644 client/imports/parties-form/parties-form.html

diff --git a/client/imports/parties-form/parties-form.html b/client/imports/parties-form/parties-form.html
new file mode 100644
index 0000000..37748f5
--- /dev/null
+++ b/client/imports/parties-form/parties-form.html
@@ -0,0 +1,9 @@
+<form>
+  <label>Name</label>
+  <input type="text">
+  <label>Description</label>
+  <input type="text">
+  <label>Location</label>
+  <input type="text">
+  <button>Add</button>
+</form>
\ No newline at end of file
-- 
2.7.4


From da8c2a8810d71651acf5f052c52e87fb56fdbbc5 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 16:14:30 +0200
Subject: [PATCH 022/259] Step 4.3: load the PartiesForm component

---
 client/app.html | 1 +
 1 file changed, 1 insertion(+)

diff --git a/client/app.html b/client/app.html
index b750655..e6ea085 100644
--- a/client/app.html
+++ b/client/app.html
@@ -1,4 +1,5 @@
 <div>
+  <parties-form></parties-form>
   <ul>
     <li *ngFor="let party of parties">
       {{party.name}}
-- 
2.7.4


From b474c6c617f98d4a022e0cff704492ca60bcafb8 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 16:14:47 +0200
Subject: [PATCH 023/259] Step 4.4: import the PartiesForm component and link
 it with the Socially component

---
 client/app.ts | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/client/app.ts b/client/app.ts
index 1de8b0e..cf7e318 100644
--- a/client/app.ts
+++ b/client/app.ts
@@ -3,10 +3,12 @@ import { Component } from '@angular/core';
 import { bootstrap } from 'angular2-meteor-auto-bootstrap';
 import { Parties }   from '../collections/parties';
 import { Mongo }     from 'meteor/mongo';
+import { PartiesForm } from './imports/parties-form/parties-form';
 
 @Component({
   selector: 'app',
-  templateUrl: '/client/app.html'
+  templateUrl: '/client/app.html',
+  directives: [PartiesForm]
 })
 class Socially {
   parties: Mongo.Cursor<Object>;
-- 
2.7.4


From c582c6768d267b62b2d6684b1f3e1017215e6605 Mon Sep 17 00:00:00 2001
From: Uri Goldshtein <uri.goldshtein@gmail.com>
Date: Sat, 14 May 2016 13:56:27 +0300
Subject: [PATCH 024/259] Step 4.5: build a form model

---
 client/imports/parties-form/parties-form.ts | 15 ++++++++++++++-
 1 file changed, 14 insertions(+), 1 deletion(-)

diff --git a/client/imports/parties-form/parties-form.ts b/client/imports/parties-form/parties-form.ts
index 223a99a..e63baad 100644
--- a/client/imports/parties-form/parties-form.ts
+++ b/client/imports/parties-form/parties-form.ts
@@ -1,8 +1,21 @@
 import 'reflect-metadata';
 import { Component } from '@angular/core';
+import { FormBuilder, ControlGroup, Validators } from '@angular/common';
 
 @Component({
   selector: 'parties-form',
   templateUrl: '/client/imports/parties-form/parties-form.html'
 })
-export class PartiesForm { }
\ No newline at end of file
+export class PartiesForm {
+  partiesForm: ControlGroup;
+
+  constructor() {
+    let fb = new FormBuilder();
+
+    this.partiesForm = fb.group({
+      name: [''],
+      description: [''],
+      location: ['']
+    });
+  }
+}
\ No newline at end of file
-- 
2.7.4


From 645499a1ad97cc8699d822916256ae2fa0b9ad09 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 16:16:26 +0200
Subject: [PATCH 025/259] Step 4.6: add form validation

---
 client/imports/parties-form/parties-form.ts | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/client/imports/parties-form/parties-form.ts b/client/imports/parties-form/parties-form.ts
index e63baad..6201c9c 100644
--- a/client/imports/parties-form/parties-form.ts
+++ b/client/imports/parties-form/parties-form.ts
@@ -13,9 +13,9 @@ export class PartiesForm {
     let fb = new FormBuilder();
 
     this.partiesForm = fb.group({
-      name: [''],
+      name: ['', Validators.required],
       description: [''],
-      location: ['']
+      location: ['', Validators.required]
     });
   }
 }
\ No newline at end of file
-- 
2.7.4


From 99aff17d9e7d3445c1185e8aea1d9ae2d4ea28e1 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 16:16:51 +0200
Subject: [PATCH 026/259] Step 4.7: link the form and its model together

---
 client/imports/parties-form/parties-form.html | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/client/imports/parties-form/parties-form.html b/client/imports/parties-form/parties-form.html
index 37748f5..4e3676e 100644
--- a/client/imports/parties-form/parties-form.html
+++ b/client/imports/parties-form/parties-form.html
@@ -1,9 +1,9 @@
-<form>
+<form [ngFormModel]="partiesForm">
   <label>Name</label>
-  <input type="text">
+  <input type="text" ngControl="name">
   <label>Description</label>
-  <input type="text">
+  <input type="text" ngControl="description">
   <label>Location</label>
-  <input type="text">
+  <input type="text" ngControl="location">
   <button>Add</button>
 </form>
\ No newline at end of file
-- 
2.7.4


From 29bf693b25c1045fc61308088839b7f6a4a698c2 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 16:17:16 +0200
Subject: [PATCH 027/259] Step 4.8: add submit handler inside the template

---
 client/imports/parties-form/parties-form.html | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/client/imports/parties-form/parties-form.html b/client/imports/parties-form/parties-form.html
index 4e3676e..754b9ff 100644
--- a/client/imports/parties-form/parties-form.html
+++ b/client/imports/parties-form/parties-form.html
@@ -1,4 +1,4 @@
-<form [ngFormModel]="partiesForm">
+<form [ngFormModel]="partiesForm" #f="ngForm" (submit)="addParty(f.value)">
   <label>Name</label>
   <input type="text" ngControl="name">
   <label>Description</label>
-- 
2.7.4


From 4876112f059616cc27a2a82c473ebff6c2f16501 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 16:19:39 +0200
Subject: [PATCH 028/259] Step 4.9: add addParty method into the component

---
 client/imports/parties-form/parties-form.ts | 17 ++++++++++++++++-
 1 file changed, 16 insertions(+), 1 deletion(-)

diff --git a/client/imports/parties-form/parties-form.ts b/client/imports/parties-form/parties-form.ts
index 6201c9c..3fc7528 100644
--- a/client/imports/parties-form/parties-form.ts
+++ b/client/imports/parties-form/parties-form.ts
@@ -1,6 +1,7 @@
 import 'reflect-metadata';
 import { Component } from '@angular/core';
-import { FormBuilder, ControlGroup, Validators } from '@angular/common';
+import { FormBuilder, ControlGroup, Validators, Control } from '@angular/common';
+import { Parties } from '../../../collections/parties.ts';
 
 @Component({
   selector: 'parties-form',
@@ -18,4 +19,18 @@ export class PartiesForm {
       location: ['', Validators.required]
     });
   }
+
+  addParty(party) {
+    if (this.partiesForm.valid) {
+      Parties.insert({
+        name: party.name,
+        description: party.description,
+        location: party.location
+      });
+
+      (<Control>this.partiesForm.controls['name']).updateValue('');
+      (<Control>this.partiesForm.controls['description']).updateValue('');
+      (<Control>this.partiesForm.controls['location']).updateValue('');
+    }
+  }
 }
\ No newline at end of file
-- 
2.7.4


From f7872fe07f550b59809f48747b600745c9434d70 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 16:20:12 +0200
Subject: [PATCH 029/259] Step 4.10: add a remove party button and click event
 handler

---
 client/app.html | 1 +
 1 file changed, 1 insertion(+)

diff --git a/client/app.html b/client/app.html
index e6ea085..0362c48 100644
--- a/client/app.html
+++ b/client/app.html
@@ -5,6 +5,7 @@
       {{party.name}}
       <p>{{party.description}}</p>
       <p>{{party.location}}</p>
+      <button (click)="removeParty(party)">X</button>
     </li>
   </ul>
 </div>
\ No newline at end of file
-- 
2.7.4


From 6b73e8985224f4686b4efb988194cd98ce2a59a2 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 16:21:03 +0200
Subject: [PATCH 030/259] Step 4.11: add removeParty method inside the
 component

---
 client/app.ts | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/client/app.ts b/client/app.ts
index cf7e318..ff70360 100644
--- a/client/app.ts
+++ b/client/app.ts
@@ -16,6 +16,10 @@ class Socially {
   constructor () {
     this.parties = Parties.find();
   }
+
+  removeParty(party) {
+    Parties.remove(party._id);
+  }
 }
 
 bootstrap(Socially);
-- 
2.7.4


From d1c086b66adbb35f536a4791f59e2748db31b63a Mon Sep 17 00:00:00 2001
From: Uri Goldshtein <uri.goldshtein@gmail.com>
Date: Sat, 14 May 2016 14:16:11 +0300
Subject: [PATCH 031/259] Step 5.0: Install router from npm

---
 package.json | 1 +
 1 file changed, 1 insertion(+)

diff --git a/package.json b/package.json
index 0418911..d331329 100644
--- a/package.json
+++ b/package.json
@@ -10,6 +10,7 @@
     "@angular/core": "^2.0.0-rc.4",
     "@angular/platform-browser": "^2.0.0-rc.4",
     "@angular/platform-browser-dynamic": "^2.0.0-rc.4",
+    "@angular/router": "3.0.0-beta.2",
     "angular2-meteor": "^0.5.6",
     "angular2-meteor-auto-bootstrap": "^0.5.6",
     "angular2-meteor-polyfills": "^0.1.1",
-- 
2.7.4


From 1a5ef3a0654a92769b380d1b5446d9a7a491335f Mon Sep 17 00:00:00 2001
From: Uri Goldshtein <uri.goldshtein@gmail.com>
Date: Sat, 14 May 2016 14:19:45 +0300
Subject: [PATCH 032/259] Step 5.1: import routing components and add them to
 the app

---
 client/app.ts | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/client/app.ts b/client/app.ts
index ff70360..c4cc8f5 100644
--- a/client/app.ts
+++ b/client/app.ts
@@ -4,11 +4,12 @@ import { bootstrap } from 'angular2-meteor-auto-bootstrap';
 import { Parties }   from '../collections/parties';
 import { Mongo }     from 'meteor/mongo';
 import { PartiesForm } from './imports/parties-form/parties-form';
+import { provideRouter, RouterConfig, ROUTER_DIRECTIVES } from '@angular/router';
 
 @Component({
   selector: 'app',
   templateUrl: '/client/app.html',
-  directives: [PartiesForm]
+  directives: [PartiesForm, ROUTER_DIRECTIVES]
 })
 class Socially {
   parties: Mongo.Cursor<Object>;
-- 
2.7.4


From d645a06ef93b9332f1fa98f4803ddf521a677a5f Mon Sep 17 00:00:00 2001
From: Uri Goldshtein <uri.goldshtein@gmail.com>
Date: Sat, 14 May 2016 14:24:46 +0300
Subject: [PATCH 033/259] Step 5.2: create PartiesList component

---
 client/imports/parties-list/parties-list.ts | 21 +++++++++++++++++++++
 1 file changed, 21 insertions(+)
 create mode 100644 client/imports/parties-list/parties-list.ts

diff --git a/client/imports/parties-list/parties-list.ts b/client/imports/parties-list/parties-list.ts
new file mode 100644
index 0000000..92d4ca6
--- /dev/null
+++ b/client/imports/parties-list/parties-list.ts
@@ -0,0 +1,21 @@
+import { Component }   from '@angular/core';
+import { Parties }     from '../../../collections/parties';
+import { PartiesForm } from '../parties-form/parties-form';
+import { Mongo }       from 'meteor/mongo';
+
+@Component({
+  selector: 'parties-list',
+  templateUrl: '/client/imports/parties-list/parties-list.html',
+  directives: [PartiesForm]
+})
+export class PartiesList {
+  parties: Mongo.Cursor<Object>;
+
+  constructor() {
+    this.parties = Parties.find();
+  }
+
+  removeParty(party) {
+    Parties.remove(party._id);
+  }
+}
-- 
2.7.4


From 24eaeede16982099c8654fd5704183db65b5284b Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 16:25:51 +0200
Subject: [PATCH 034/259] Step 5.3: create PartiesList component view

---
 client/imports/parties-list/parties-list.html | 11 +++++++++++
 1 file changed, 11 insertions(+)
 create mode 100644 client/imports/parties-list/parties-list.html

diff --git a/client/imports/parties-list/parties-list.html b/client/imports/parties-list/parties-list.html
new file mode 100644
index 0000000..0362c48
--- /dev/null
+++ b/client/imports/parties-list/parties-list.html
@@ -0,0 +1,11 @@
+<div>
+  <parties-form></parties-form>
+  <ul>
+    <li *ngFor="let party of parties">
+      {{party.name}}
+      <p>{{party.description}}</p>
+      <p>{{party.location}}</p>
+      <button (click)="removeParty(party)">X</button>
+    </li>
+  </ul>
+</div>
\ No newline at end of file
-- 
2.7.4


From 4b784de867fb8cdefc4af6c1145c1d17f5e65ef1 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 16:26:07 +0200
Subject: [PATCH 035/259] Step 5.4: Clean up app.ts file

---
 client/app.ts | 17 ++---------------
 1 file changed, 2 insertions(+), 15 deletions(-)

diff --git a/client/app.ts b/client/app.ts
index c4cc8f5..b59a5f4 100644
--- a/client/app.ts
+++ b/client/app.ts
@@ -1,26 +1,13 @@
 import 'reflect-metadata';
 import { Component } from '@angular/core';
 import { bootstrap } from 'angular2-meteor-auto-bootstrap';
-import { Parties }   from '../collections/parties';
-import { Mongo }     from 'meteor/mongo';
-import { PartiesForm } from './imports/parties-form/parties-form';
 import { provideRouter, RouterConfig, ROUTER_DIRECTIVES } from '@angular/router';
 
 @Component({
   selector: 'app',
   templateUrl: '/client/app.html',
-  directives: [PartiesForm, ROUTER_DIRECTIVES]
+  directives: [ROUTER_DIRECTIVES]
 })
-class Socially {
-  parties: Mongo.Cursor<Object>;
-
-  constructor () {
-    this.parties = Parties.find();
-  }
-
-  removeParty(party) {
-    Parties.remove(party._id);
-  }
-}
+class Socially {}
 
 bootstrap(Socially);
-- 
2.7.4


From 09cefc7c91cbe9c5e369886d6a274df81bba1534 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 16:26:15 +0200
Subject: [PATCH 036/259] Step 5.5: Remove app.html file

---
 client/app.html | 11 -----------
 1 file changed, 11 deletions(-)
 delete mode 100644 client/app.html

diff --git a/client/app.html b/client/app.html
deleted file mode 100644
index 0362c48..0000000
--- a/client/app.html
+++ /dev/null
@@ -1,11 +0,0 @@
-<div>
-  <parties-form></parties-form>
-  <ul>
-    <li *ngFor="let party of parties">
-      {{party.name}}
-      <p>{{party.description}}</p>
-      <p>{{party.location}}</p>
-      <button (click)="removeParty(party)">X</button>
-    </li>
-  </ul>
-</div>
\ No newline at end of file
-- 
2.7.4


From 6516d35a2a38cc062b684ce1b860cdcd4039e21e Mon Sep 17 00:00:00 2001
From: Uri Goldshtein <uri.goldshtein@gmail.com>
Date: Sat, 14 May 2016 14:29:18 +0300
Subject: [PATCH 037/259] Step 5.6: add PartyDetails component

---
 client/imports/party-details/party-details.ts | 7 +++++++
 1 file changed, 7 insertions(+)
 create mode 100644 client/imports/party-details/party-details.ts

diff --git a/client/imports/party-details/party-details.ts b/client/imports/party-details/party-details.ts
new file mode 100644
index 0000000..6a234c7
--- /dev/null
+++ b/client/imports/party-details/party-details.ts
@@ -0,0 +1,7 @@
+import { Component } from '@angular/core';
+
+@Component({
+  selector: 'party-details',
+  templateUrl: '/client/imports/party-details/party-details.html'
+})
+export class PartyDetails {}
-- 
2.7.4


From 7d36b244af55d82f8af3dbfbb8a13edd5cf340bb Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 16:27:47 +0200
Subject: [PATCH 038/259] Step 5.7: add PartyDetails template

---
 client/imports/party-details/party-details.html | 5 +++++
 1 file changed, 5 insertions(+)
 create mode 100644 client/imports/party-details/party-details.html

diff --git a/client/imports/party-details/party-details.html b/client/imports/party-details/party-details.html
new file mode 100644
index 0000000..a3da9f4
--- /dev/null
+++ b/client/imports/party-details/party-details.html
@@ -0,0 +1,5 @@
+<header>
+  <h2>PARTY_NAME</h2>
+
+  <p>PARTY_DESCRIPTION</p>
+</header>
\ No newline at end of file
-- 
2.7.4


From 8d3c632ddb4558a9bf59172d620102d6859e9500 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 17:32:05 +0200
Subject: [PATCH 039/259] Step 5.8: configure routes

---
 client/app.ts | 16 ++++++++++++++--
 1 file changed, 14 insertions(+), 2 deletions(-)

diff --git a/client/app.ts b/client/app.ts
index b59a5f4..06f91ad 100644
--- a/client/app.ts
+++ b/client/app.ts
@@ -1,7 +1,10 @@
 import 'reflect-metadata';
-import { Component } from '@angular/core';
+import { Component, provide } from '@angular/core';
 import { bootstrap } from 'angular2-meteor-auto-bootstrap';
 import { provideRouter, RouterConfig, ROUTER_DIRECTIVES } from '@angular/router';
+import { APP_BASE_HREF } from '@angular/common';
+import { PartiesList } from './imports/parties-list/parties-list.ts';
+import { PartyDetails } from './imports/party-details/party-details.ts';
 
 @Component({
   selector: 'app',
@@ -10,4 +13,13 @@ import { provideRouter, RouterConfig, ROUTER_DIRECTIVES } from '@angular/router'
 })
 class Socially {}
 
-bootstrap(Socially);
+const routes: RouterConfig = [
+  { path: '',              	component: PartiesList },
+  { path: 'party/:partyId',	component: PartyDetails },
+];
+
+const APP_ROUTER_PROVIDERS = [
+  provideRouter(routes)
+];
+
+bootstrap(Socially, [APP_ROUTER_PROVIDERS, provide(APP_BASE_HREF, { useValue: '/' })]);
-- 
2.7.4


From 7087f62c5533b52a1ef595dede1ecfd7f2473a94 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 17:32:27 +0200
Subject: [PATCH 040/259] Step 5.9: Add app.html that uses router

---
 client/app.html | 1 +
 1 file changed, 1 insertion(+)
 create mode 100644 client/app.html

diff --git a/client/app.html b/client/app.html
new file mode 100644
index 0000000..90c6b64
--- /dev/null
+++ b/client/app.html
@@ -0,0 +1 @@
+<router-outlet></router-outlet>
\ No newline at end of file
-- 
2.7.4


From 20ebd6a36873baf4091acd3b34baba708f8a31e7 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 17:34:22 +0200
Subject: [PATCH 041/259] Step 5.10: import RouterLink directive

---
 client/imports/parties-list/parties-list.ts | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/client/imports/parties-list/parties-list.ts b/client/imports/parties-list/parties-list.ts
index 92d4ca6..ba26112 100644
--- a/client/imports/parties-list/parties-list.ts
+++ b/client/imports/parties-list/parties-list.ts
@@ -2,11 +2,13 @@ import { Component }   from '@angular/core';
 import { Parties }     from '../../../collections/parties';
 import { PartiesForm } from '../parties-form/parties-form';
 import { Mongo }       from 'meteor/mongo';
+import { ROUTER_DIRECTIVES }  from '@angular/router';
+
 
 @Component({
   selector: 'parties-list',
   templateUrl: '/client/imports/parties-list/parties-list.html',
-  directives: [PartiesForm]
+  directives: [PartiesForm, ROUTER_DIRECTIVES]
 })
 export class PartiesList {
   parties: Mongo.Cursor<Object>;
-- 
2.7.4


From 60ca6988305b3b39057a328e19f8a8d18764ab7c Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 17:34:59 +0200
Subject: [PATCH 042/259] Step 5.11: add links to the parties list

---
 client/imports/parties-list/parties-list.html | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/client/imports/parties-list/parties-list.html b/client/imports/parties-list/parties-list.html
index 0362c48..21f5729 100644
--- a/client/imports/parties-list/parties-list.html
+++ b/client/imports/parties-list/parties-list.html
@@ -2,10 +2,10 @@
   <parties-form></parties-form>
   <ul>
     <li *ngFor="let party of parties">
-      {{party.name}}
+      <a [routerLink]="['/party', party._id]">{{party.name}}</a>
       <p>{{party.description}}</p>
       <p>{{party.location}}</p>
       <button (click)="removeParty(party)">X</button>
     </li>
   </ul>
-</div>
\ No newline at end of file
+</div>
-- 
2.7.4


From 687a45b39a9206b700ca9f059c8a228f663fb3dc Mon Sep 17 00:00:00 2001
From: Uri Goldshtein <uri.goldshtein@gmail.com>
Date: Sat, 14 May 2016 14:51:47 +0300
Subject: [PATCH 043/259] Step 5.12: inject route parameters

---
 client/imports/party-details/party-details.ts | 13 ++++++++++++-
 1 file changed, 12 insertions(+), 1 deletion(-)

diff --git a/client/imports/party-details/party-details.ts b/client/imports/party-details/party-details.ts
index 6a234c7..c048f68 100644
--- a/client/imports/party-details/party-details.ts
+++ b/client/imports/party-details/party-details.ts
@@ -1,7 +1,18 @@
 import { Component } from '@angular/core';
+import { ActivatedRoute } from '@angular/router';
 
 @Component({
   selector: 'party-details',
   templateUrl: '/client/imports/party-details/party-details.html'
 })
-export class PartyDetails {}
+export class PartyDetails {
+  partyId: string;
+
+  constructor(private route: ActivatedRoute) {}
+
+  ngOnInit() {
+    this.route.params.subscribe((params) => {
+      this.partyId = params['partyId'];
+    });
+  }
+}
-- 
2.7.4


From 3d470278a644cb4639386a9989e419ca83377582 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 17:36:57 +0200
Subject: [PATCH 044/259] Step 5.13: load party details

---
 client/imports/party-details/party-details.ts | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/client/imports/party-details/party-details.ts b/client/imports/party-details/party-details.ts
index c048f68..d33c346 100644
--- a/client/imports/party-details/party-details.ts
+++ b/client/imports/party-details/party-details.ts
@@ -1,5 +1,6 @@
 import { Component } from '@angular/core';
 import { ActivatedRoute } from '@angular/router';
+import {Parties} from '../../../collections/parties.ts';
 
 @Component({
   selector: 'party-details',
@@ -7,12 +8,15 @@ import { ActivatedRoute } from '@angular/router';
 })
 export class PartyDetails {
   partyId: string;
+  party: Object;
 
   constructor(private route: ActivatedRoute) {}
 
   ngOnInit() {
     this.route.params.subscribe((params) => {
       this.partyId = params['partyId'];
+
+      this.party = Parties.findOne(this.partyId);
     });
   }
 }
-- 
2.7.4


From 85e380518227a2f88730f1229869b3adaa8c6455 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Wed, 1 Jun 2016 19:11:44 +0200
Subject: [PATCH 045/259] Step 5.14: Move into autorun

---
 client/imports/party-details/party-details.ts | 5 ++++-
 1 file changed, 4 insertions(+), 1 deletion(-)

diff --git a/client/imports/party-details/party-details.ts b/client/imports/party-details/party-details.ts
index d33c346..331737a 100644
--- a/client/imports/party-details/party-details.ts
+++ b/client/imports/party-details/party-details.ts
@@ -1,5 +1,6 @@
 import { Component } from '@angular/core';
 import { ActivatedRoute } from '@angular/router';
+import { Tracker } from 'meteor/tracker';
 import {Parties} from '../../../collections/parties.ts';
 
 @Component({
@@ -16,7 +17,9 @@ export class PartyDetails {
     this.route.params.subscribe((params) => {
       this.partyId = params['partyId'];
 
-      this.party = Parties.findOne(this.partyId);
+      Tracker.autorun(() => {
+        this.party = Parties.findOne(this.partyId);
+      });
     });
   }
 }
-- 
2.7.4


From 53bb91a3d1c9f878aabec430d1aadbf487c287dd Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Wed, 1 Jun 2016 19:12:32 +0200
Subject: [PATCH 046/259] Step 5.15: Run with NgZone

---
 client/imports/party-details/party-details.ts | 8 +++++---
 1 file changed, 5 insertions(+), 3 deletions(-)

diff --git a/client/imports/party-details/party-details.ts b/client/imports/party-details/party-details.ts
index 331737a..33bc447 100644
--- a/client/imports/party-details/party-details.ts
+++ b/client/imports/party-details/party-details.ts
@@ -1,4 +1,4 @@
-import { Component } from '@angular/core';
+import { Component, NgZone } from '@angular/core';
 import { ActivatedRoute } from '@angular/router';
 import { Tracker } from 'meteor/tracker';
 import {Parties} from '../../../collections/parties.ts';
@@ -11,14 +11,16 @@ export class PartyDetails {
   partyId: string;
   party: Object;
 
-  constructor(private route: ActivatedRoute) {}
+  constructor(private route: ActivatedRoute, private ngZone: NgZone) {}
 
   ngOnInit() {
     this.route.params.subscribe((params) => {
       this.partyId = params['partyId'];
 
       Tracker.autorun(() => {
-        this.party = Parties.findOne(this.partyId);
+        this.ngZone.run(() => {
+          this.party = Parties.findOne(this.partyId);
+        });
       });
     });
   }
-- 
2.7.4


From 8a72130e689e5907cd2eb5d4d082edd742f72774 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 17:37:32 +0200
Subject: [PATCH 047/259] Step 5.16: Add the party details to the view

---
 client/imports/party-details/party-details.html | 10 ++++++----
 1 file changed, 6 insertions(+), 4 deletions(-)

diff --git a/client/imports/party-details/party-details.html b/client/imports/party-details/party-details.html
index a3da9f4..3e50919 100644
--- a/client/imports/party-details/party-details.html
+++ b/client/imports/party-details/party-details.html
@@ -1,5 +1,7 @@
-<header>
-  <h2>PARTY_NAME</h2>
+<header *ngIf="party">
+  <h2>{{party.name}}</h2>
 
-  <p>PARTY_DESCRIPTION</p>
-</header>
\ No newline at end of file
+  <p>{{party.description}}</p>
+
+  <p>{{party.location}}</p>
+</header>
-- 
2.7.4


From 689101aea249c6ef517a812f1162f9dbbaa63e70 Mon Sep 17 00:00:00 2001
From: Uri Goldshtein <uri.goldshtein@gmail.com>
Date: Sat, 14 May 2016 14:58:37 +0300
Subject: [PATCH 048/259] Step 6.1: Add router-link dependency

---
 client/imports/party-details/party-details.ts | 5 +++--
 1 file changed, 3 insertions(+), 2 deletions(-)

diff --git a/client/imports/party-details/party-details.ts b/client/imports/party-details/party-details.ts
index 33bc447..d0aaf2a 100644
--- a/client/imports/party-details/party-details.ts
+++ b/client/imports/party-details/party-details.ts
@@ -1,11 +1,12 @@
 import { Component, NgZone } from '@angular/core';
-import { ActivatedRoute } from '@angular/router';
+import { ActivatedRoute, ROUTER_DIRECTIVES } from '@angular/router';
 import { Tracker } from 'meteor/tracker';
 import {Parties} from '../../../collections/parties.ts';
 
 @Component({
   selector: 'party-details',
-  templateUrl: '/client/imports/party-details/party-details.html'
+  templateUrl: '/client/imports/party-details/party-details.html',
+  directives: [ROUTER_DIRECTIVES]
 })
 export class PartyDetails {
   partyId: string;
-- 
2.7.4


From dacfd2fc53e5b57edac159d0d2d9dbb4ba3c1918 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 17:39:16 +0200
Subject: [PATCH 049/259] Step 6.2: add party details form

---
 client/imports/party-details/party-details.html | 16 +++++++++++-----
 1 file changed, 11 insertions(+), 5 deletions(-)

diff --git a/client/imports/party-details/party-details.html b/client/imports/party-details/party-details.html
index 3e50919..c9f6874 100644
--- a/client/imports/party-details/party-details.html
+++ b/client/imports/party-details/party-details.html
@@ -1,7 +1,13 @@
-<header *ngIf="party">
-  <h2>{{party.name}}</h2>
+<form>
+  <label>Name</label>
+  <input type="text">
 
-  <p>{{party.description}}</p>
+  <label>Description</label>
+  <input type="text">
 
-  <p>{{party.location}}</p>
-</header>
+  <label>Location</label>
+  <input type="text">
+
+  <button type="submit">Save</button>
+  <button [routerLink]="['/']">Cancel</button>
+</form>
-- 
2.7.4


From 2070a119b59f797b57b793224c3d8d92e3785ca3 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 17:39:45 +0200
Subject: [PATCH 050/259] Step 6.3: bind party to form inputs

---
 client/imports/party-details/party-details.html | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/client/imports/party-details/party-details.html b/client/imports/party-details/party-details.html
index c9f6874..b19fa80 100644
--- a/client/imports/party-details/party-details.html
+++ b/client/imports/party-details/party-details.html
@@ -1,12 +1,12 @@
-<form>
+<form (submit)="saveParty(party)">
   <label>Name</label>
-  <input type="text">
+  <input type="text" [(ngModel)]="party.name">
 
   <label>Description</label>
-  <input type="text">
+  <input type="text" [(ngModel)]="party.description">
 
   <label>Location</label>
-  <input type="text">
+  <input type="text" [(ngModel)]="party.location">
 
   <button type="submit">Save</button>
   <button [routerLink]="['/']">Cancel</button>
-- 
2.7.4


From 034a47284295c5ea954ff20492ce04022cc5bc45 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 17:44:44 +0200
Subject: [PATCH 051/259] Step 6.4: add submit event handler

---
 client/imports/party-details/party-details.ts | 10 ++++++++++
 1 file changed, 10 insertions(+)

diff --git a/client/imports/party-details/party-details.ts b/client/imports/party-details/party-details.ts
index d0aaf2a..690e824 100644
--- a/client/imports/party-details/party-details.ts
+++ b/client/imports/party-details/party-details.ts
@@ -25,4 +25,14 @@ export class PartyDetails {
       });
     });
   }
+
+  saveParty(party) {
+    Parties.update(party._id, {
+      $set: {
+        name: party.name,
+        description: party.description,
+        location: party.location
+      }
+    });
+  }
 }
-- 
2.7.4


From 56227426661abd9c6f20affcec7b2700630620f7 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 17:45:42 +0200
Subject: [PATCH 052/259] Step 7.1: declare Party type

---
 typings/party.d.ts | 6 ++++++
 1 file changed, 6 insertions(+)
 create mode 100644 typings/party.d.ts

diff --git a/typings/party.d.ts b/typings/party.d.ts
new file mode 100644
index 0000000..82919d0
--- /dev/null
+++ b/typings/party.d.ts
@@ -0,0 +1,6 @@
+interface Party {
+  _id?: string;
+  name: string;
+  description?: string;
+  location: string;
+}
\ No newline at end of file
-- 
2.7.4


From 6f5515bfe1342fe9966b4974aa598bad6d827b5d Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 17:46:41 +0200
Subject: [PATCH 053/259] Step 7.2: define parties collection with Party type

---
 collections/parties.ts | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/collections/parties.ts b/collections/parties.ts
index 22bdeab..20143a6 100644
--- a/collections/parties.ts
+++ b/collections/parties.ts
@@ -1,3 +1,3 @@
 import {Mongo} from 'meteor/mongo';
 
-export let Parties = new Mongo.Collection('parties');
\ No newline at end of file
+export let Parties = new Mongo.Collection<Party>('parties');
-- 
2.7.4


From 0f2dbe6f3f5e9ad34b854ffa0cedbf4c2c455669 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 17:47:11 +0200
Subject: [PATCH 054/259] Step 7.3: correct parties cursor to be of the exact
 type

---
 client/imports/parties-list/parties-list.ts | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/client/imports/parties-list/parties-list.ts b/client/imports/parties-list/parties-list.ts
index ba26112..f7a008d 100644
--- a/client/imports/parties-list/parties-list.ts
+++ b/client/imports/parties-list/parties-list.ts
@@ -11,7 +11,7 @@ import { ROUTER_DIRECTIVES }  from '@angular/router';
   directives: [PartiesForm, ROUTER_DIRECTIVES]
 })
 export class PartiesList {
-  parties: Mongo.Cursor<Object>;
+  parties: Mongo.Cursor<Party>;
 
   constructor() {
     this.parties = Parties.find();
-- 
2.7.4


From e387ce89b485e613088c1a31748e5696c483a2c5 Mon Sep 17 00:00:00 2001
From: dotansimha <dotansimha@gmail.com>
Date: Fri, 6 May 2016 21:45:27 +0300
Subject: [PATCH 055/259] Step 7.4: correct party property to be of Party type

---
 client/imports/party-details/party-details.ts | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/client/imports/party-details/party-details.ts b/client/imports/party-details/party-details.ts
index 690e824..95532fc 100644
--- a/client/imports/party-details/party-details.ts
+++ b/client/imports/party-details/party-details.ts
@@ -10,7 +10,7 @@ import {Parties} from '../../../collections/parties.ts';
 })
 export class PartyDetails {
   partyId: string;
-  party: Object;
+  party: Party;
 
   constructor(private route: ActivatedRoute, private ngZone: NgZone) {}
 
-- 
2.7.4


From 839b3c6703e9ee7380bd73a55d6cf2c5a0941434 Mon Sep 17 00:00:00 2001
From: Uri Goldshtein <uri.goldshtein@gmail.com>
Date: Sat, 14 May 2016 15:32:15 +0300
Subject: [PATCH 056/259] Step 8.0: Add accounts packages from atmosphere

---
 .meteor/packages |  2 +-
 .meteor/versions | 11 ++++++++++-
 2 files changed, 11 insertions(+), 2 deletions(-)

diff --git a/.meteor/packages b/.meteor/packages
index db449bd..24ed442 100644
--- a/.meteor/packages
+++ b/.meteor/packages
@@ -16,6 +16,6 @@ es5-shim                # ECMAScript 5 compatibility for older browsers.
 ecmascript              # Enable ECMAScript2015+ syntax in app code
 
 autopublish             # Publish all data to the clients (for prototyping)
-insecure                # Allow all DB writes from clients (for prototyping)
 angular2-compilers
 barbatus:angular2-runtime
+accounts-password
diff --git a/.meteor/versions b/.meteor/versions
index 64168f9..500ac5f 100644
--- a/.meteor/versions
+++ b/.meteor/versions
@@ -1,3 +1,5 @@
+accounts-base@1.2.7
+accounts-password@1.1.8
 allow-deny@1.0.4
 angular2-compilers@0.5.7
 angular2-html-templates@0.5.3
@@ -18,12 +20,14 @@ check@1.2.1
 ddp@1.2.5
 ddp-client@1.2.7
 ddp-common@1.2.5
+ddp-rate-limiter@1.0.4
 ddp-server@1.2.6
 deps@1.0.12
 diff-sequence@1.0.5
 ecmascript@0.4.3
 ecmascript-runtime@0.2.10
 ejson@1.0.11
+email@1.0.12
 es5-shim@4.5.10
 fastclick@1.0.11
 geojson-utils@1.0.8
@@ -32,10 +36,10 @@ html-tools@1.0.9
 htmljs@1.0.9
 http@1.1.5
 id-map@1.0.7
-insecure@1.0.7
 jquery@1.11.8
 launch-screen@1.0.11
 livedata@1.0.18
+localstorage@1.0.9
 logging@1.0.12
 meteor@1.1.14
 meteor-base@1.0.4
@@ -48,19 +52,24 @@ modules@0.6.1
 modules-runtime@0.6.3
 mongo@1.1.7
 mongo-id@1.0.4
+npm-bcrypt@0.8.5
 npm-mongo@1.4.43
 observe-sequence@1.0.11
 ordered-dict@1.0.7
 promise@0.6.7
 random@1.0.9
+rate-limit@1.0.4
 reactive-dict@1.1.7
 reactive-var@1.0.9
 reload@1.1.8
 retry@1.0.7
 routepolicy@1.0.10
+service-configuration@1.0.9
 session@1.1.5
+sha@1.0.7
 spacebars@1.0.11
 spacebars-compiler@1.0.11
+srp@1.0.8
 standard-minifier-css@1.0.6
 standard-minifier-js@1.0.6
 standard-minifiers@1.0.6
-- 
2.7.4


From 358c6a2621ffc6edc0234958079c4fe503242289 Mon Sep 17 00:00:00 2001
From: Uri Goldshtein <uri.goldshtein@gmail.com>
Date: Sat, 14 May 2016 15:33:14 +0300
Subject: [PATCH 057/259] Step 8.1: Add accounts ui package from NPM

---
 package.json | 1 +
 1 file changed, 1 insertion(+)

diff --git a/package.json b/package.json
index d331329..336a26b 100644
--- a/package.json
+++ b/package.json
@@ -12,6 +12,7 @@
     "@angular/platform-browser-dynamic": "^2.0.0-rc.4",
     "@angular/router": "3.0.0-beta.2",
     "angular2-meteor": "^0.5.6",
+    "angular2-meteor-accounts-ui": "0.5.0",
     "angular2-meteor-auto-bootstrap": "^0.5.6",
     "angular2-meteor-polyfills": "^0.1.1",
     "es6-shim": "^0.35.1",
-- 
2.7.4


From 045d8723ba290006220cd934b0f03db69af4cafe Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 28 Jan 2016 23:14:09 +0200
Subject: [PATCH 058/259] Step 8.2: add Accounts UI component to the
 PartiesList template

---
 client/imports/parties-list/parties-list.html | 1 +
 1 file changed, 1 insertion(+)

diff --git a/client/imports/parties-list/parties-list.html b/client/imports/parties-list/parties-list.html
index 21f5729..41ece1a 100644
--- a/client/imports/parties-list/parties-list.html
+++ b/client/imports/parties-list/parties-list.html
@@ -1,5 +1,6 @@
 <div>
   <parties-form></parties-form>
+  <login-buttons></login-buttons>
   <ul>
     <li *ngFor="let party of parties">
       <a [routerLink]="['/party', party._id]">{{party.name}}</a>
-- 
2.7.4


From 523a0cad01906321f98008ee5f1d78d93633529d Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 28 Jan 2016 23:16:21 +0200
Subject: [PATCH 059/259] Step 8.3: import dependencies

---
 .meteor/packages                            | 1 +
 .meteor/versions                            | 1 +
 client/imports/parties-list/parties-list.ts | 4 ++--
 3 files changed, 4 insertions(+), 2 deletions(-)

diff --git a/.meteor/packages b/.meteor/packages
index 24ed442..753b279 100644
--- a/.meteor/packages
+++ b/.meteor/packages
@@ -19,3 +19,4 @@ autopublish             # Publish all data to the clients (for prototyping)
 angular2-compilers
 barbatus:angular2-runtime
 accounts-password
+fourseven:scss
diff --git a/.meteor/versions b/.meteor/versions
index 500ac5f..31ec9a5 100644
--- a/.meteor/versions
+++ b/.meteor/versions
@@ -30,6 +30,7 @@ ejson@1.0.11
 email@1.0.12
 es5-shim@4.5.10
 fastclick@1.0.11
+fourseven:scss@3.4.3
 geojson-utils@1.0.8
 hot-code-push@1.0.4
 html-tools@1.0.9
diff --git a/client/imports/parties-list/parties-list.ts b/client/imports/parties-list/parties-list.ts
index f7a008d..2fb1b4c 100644
--- a/client/imports/parties-list/parties-list.ts
+++ b/client/imports/parties-list/parties-list.ts
@@ -3,12 +3,12 @@ import { Parties }     from '../../../collections/parties';
 import { PartiesForm } from '../parties-form/parties-form';
 import { Mongo }       from 'meteor/mongo';
 import { ROUTER_DIRECTIVES }  from '@angular/router';
-
+import { LoginButtons } from 'angular2-meteor-accounts-ui';
 
 @Component({
   selector: 'parties-list',
   templateUrl: '/client/imports/parties-list/parties-list.html',
-  directives: [PartiesForm, ROUTER_DIRECTIVES]
+  directives: [PartiesForm, ROUTER_DIRECTIVES, LoginButtons]
 })
 export class PartiesList {
   parties: Mongo.Cursor<Party>;
-- 
2.7.4


From b4450812c1d79b77be0521c777aaee436f77a652 Mon Sep 17 00:00:00 2001
From: dotansimha <dotansimha@gmail.com>
Date: Sun, 15 May 2016 21:52:40 +0300
Subject: [PATCH 060/259] Step 8.4: Add import for SCSS file

---
 client/css/main.scss | 1 +
 1 file changed, 1 insertion(+)
 create mode 100644 client/css/main.scss

diff --git a/client/css/main.scss b/client/css/main.scss
new file mode 100644
index 0000000..a7ccb1a
--- /dev/null
+++ b/client/css/main.scss
@@ -0,0 +1 @@
+@import "{}/node_modules/angular2-meteor-accounts-ui/build/login-buttons.scss";
-- 
2.7.4


From 565f6a05538a2f11da3ca89d1288486e17c76c63 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 28 Jan 2016 23:16:57 +0200
Subject: [PATCH 061/259] Step 8.5: add parties collection security

---
 collections/parties.ts | 19 +++++++++++++++++++
 1 file changed, 19 insertions(+)

diff --git a/collections/parties.ts b/collections/parties.ts
index 20143a6..167fa10 100644
--- a/collections/parties.ts
+++ b/collections/parties.ts
@@ -1,3 +1,22 @@
 import {Mongo} from 'meteor/mongo';
+import {Meteor} from 'meteor/meteor';
 
 export let Parties = new Mongo.Collection<Party>('parties');
+
+Parties.allow({
+  insert: function() {
+    let user = Meteor.user();
+    
+    return !!user;
+  },
+  update: function() {
+    let user = Meteor.user();
+    
+    return !!user;
+  },
+  remove: function() {
+    let user = Meteor.user();
+    
+    return !!user;
+  }
+});
-- 
2.7.4


From 1cc2aac2497ac53941ef40b1bb30611ee90ad293 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 28 Jan 2016 23:17:48 +0200
Subject: [PATCH 062/259] Step 8.6: check access and add party owner ID

---
 client/imports/parties-form/parties-form.ts | 22 ++++++++++++++--------
 1 file changed, 14 insertions(+), 8 deletions(-)

diff --git a/client/imports/parties-form/parties-form.ts b/client/imports/parties-form/parties-form.ts
index 3fc7528..24ab7ba 100644
--- a/client/imports/parties-form/parties-form.ts
+++ b/client/imports/parties-form/parties-form.ts
@@ -2,6 +2,7 @@ import 'reflect-metadata';
 import { Component } from '@angular/core';
 import { FormBuilder, ControlGroup, Validators, Control } from '@angular/common';
 import { Parties } from '../../../collections/parties.ts';
+import { Meteor } from 'meteor/meteor';
 
 @Component({
   selector: 'parties-form',
@@ -22,15 +23,20 @@ export class PartiesForm {
 
   addParty(party) {
     if (this.partiesForm.valid) {
-      Parties.insert({
-        name: party.name,
-        description: party.description,
-        location: party.location
-      });
+      if (Meteor.userId()) {
+        Parties.insert({
+          name: party.name,
+          description: party.description,
+          location: party.location,
+          owner: Meteor.userId()
+        });
 
-      (<Control>this.partiesForm.controls['name']).updateValue('');
-      (<Control>this.partiesForm.controls['description']).updateValue('');
-      (<Control>this.partiesForm.controls['location']).updateValue('');
+        (<Control>this.partiesForm.controls['name']).updateValue('');
+        (<Control>this.partiesForm.controls['description']).updateValue('');
+        (<Control>this.partiesForm.controls['location']).updateValue('');
+      } else {
+        alert('Please log in to add a party');
+      }
     }
   }
 }
\ No newline at end of file
-- 
2.7.4


From 1c93fc5f9fe9a1fa0791d3a66cc911cd6af3cff9 Mon Sep 17 00:00:00 2001
From: dotansimha <dotansimha@gmail.com>
Date: Fri, 6 May 2016 21:48:19 +0300
Subject: [PATCH 063/259] Step 8.7: check access to change party

---
 client/imports/party-details/party-details.ts | 19 ++++++++++++-------
 1 file changed, 12 insertions(+), 7 deletions(-)

diff --git a/client/imports/party-details/party-details.ts b/client/imports/party-details/party-details.ts
index 95532fc..35b097d 100644
--- a/client/imports/party-details/party-details.ts
+++ b/client/imports/party-details/party-details.ts
@@ -2,6 +2,7 @@ import { Component, NgZone } from '@angular/core';
 import { ActivatedRoute, ROUTER_DIRECTIVES } from '@angular/router';
 import { Tracker } from 'meteor/tracker';
 import {Parties} from '../../../collections/parties.ts';
+import { Meteor } from 'meteor/meteor';
 
 @Component({
   selector: 'party-details',
@@ -27,12 +28,16 @@ export class PartyDetails {
   }
 
   saveParty(party) {
-    Parties.update(party._id, {
-      $set: {
-        name: party.name,
-        description: party.description,
-        location: party.location
-      }
-    });
+    if (Meteor.userId()) {
+      Parties.update(party._id, {
+        $set: {
+          name: party.name,
+          description: party.description,
+          location: party.location
+        }
+      });
+    } else {
+      alert('Please log in to change this party');
+    }
   }
 }
-- 
2.7.4


From 30a01a88800f81fdc89b5838b0f3382aaf9cfc7c Mon Sep 17 00:00:00 2001
From: dotansimha <dotansimha@gmail.com>
Date: Fri, 6 May 2016 21:48:44 +0300
Subject: [PATCH 064/259] Step 8.8: Updated typings

---
 typings/party.d.ts | 1 +
 1 file changed, 1 insertion(+)

diff --git a/typings/party.d.ts b/typings/party.d.ts
index 82919d0..a503ec1 100644
--- a/typings/party.d.ts
+++ b/typings/party.d.ts
@@ -3,4 +3,5 @@ interface Party {
   name: string;
   description?: string;
   location: string;
+  owner?: string;
 }
\ No newline at end of file
-- 
2.7.4


From c67d823970af5a1cea80477af858d3d9cc9af5f1 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 4 Feb 2016 00:05:06 +0200
Subject: [PATCH 065/259] Step 8.9: require user to access PartyDetails

---
 client/imports/party-details/party-details.ts | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/client/imports/party-details/party-details.ts b/client/imports/party-details/party-details.ts
index 35b097d..7c95dfc 100644
--- a/client/imports/party-details/party-details.ts
+++ b/client/imports/party-details/party-details.ts
@@ -3,12 +3,14 @@ import { ActivatedRoute, ROUTER_DIRECTIVES } from '@angular/router';
 import { Tracker } from 'meteor/tracker';
 import {Parties} from '../../../collections/parties.ts';
 import { Meteor } from 'meteor/meteor';
+import { RequireUser } from 'angular2-meteor-accounts-ui';
 
 @Component({
   selector: 'party-details',
   templateUrl: '/client/imports/party-details/party-details.html',
   directives: [ROUTER_DIRECTIVES]
 })
+@RequireUser()
 export class PartyDetails {
   partyId: string;
   party: Party;
-- 
2.7.4


From cfda14eef3508ecd05efa24895d8f184de7586ff Mon Sep 17 00:00:00 2001
From: Uri Goldshtein <uri.goldshtein@gmail.com>
Date: Sat, 14 May 2016 16:02:32 +0300
Subject: [PATCH 066/259] Step 9.0: Removed autopublish

---
 .meteor/packages | 1 -
 .meteor/versions | 1 -
 2 files changed, 2 deletions(-)

diff --git a/.meteor/packages b/.meteor/packages
index 753b279..58b1017 100644
--- a/.meteor/packages
+++ b/.meteor/packages
@@ -15,7 +15,6 @@ standard-minifiers      # JS/CSS minifiers run for production mode
 es5-shim                # ECMAScript 5 compatibility for older browsers.
 ecmascript              # Enable ECMAScript2015+ syntax in app code
 
-autopublish             # Publish all data to the clients (for prototyping)
 angular2-compilers
 barbatus:angular2-runtime
 accounts-password
diff --git a/.meteor/versions b/.meteor/versions
index 31ec9a5..585e7e1 100644
--- a/.meteor/versions
+++ b/.meteor/versions
@@ -3,7 +3,6 @@ accounts-password@1.1.8
 allow-deny@1.0.4
 angular2-compilers@0.5.7
 angular2-html-templates@0.5.3
-autopublish@1.0.7
 autoupdate@1.2.9
 babel-compiler@6.6.4
 babel-runtime@0.1.8
-- 
2.7.4


From e73d17a8119b2bed01c88f8b072e2236820c25f5 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 28 Jan 2016 23:22:04 +0200
Subject: [PATCH 067/259] Step 9.1: publish parties collection

---
 server/parties.ts | 6 ++++++
 1 file changed, 6 insertions(+)
 create mode 100644 server/parties.ts

diff --git a/server/parties.ts b/server/parties.ts
new file mode 100644
index 0000000..24e96e5
--- /dev/null
+++ b/server/parties.ts
@@ -0,0 +1,6 @@
+import {Parties} from '../collections/parties';
+import {Meteor} from 'meteor/meteor';
+
+Meteor.publish('parties', function() {
+  return Parties.find();
+});
\ No newline at end of file
-- 
2.7.4


From c53efa9b17fe9079cb6c480bb026fb17a981c32d Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 28 Jan 2016 23:22:36 +0200
Subject: [PATCH 068/259] Step 9.2: import parties publications on the server

---
 server/main.ts | 1 +
 1 file changed, 1 insertion(+)

diff --git a/server/main.ts b/server/main.ts
index cdda65d..7330ae5 100644
--- a/server/main.ts
+++ b/server/main.ts
@@ -1,4 +1,5 @@
 import {loadParties} from './load-parties.ts';
 import {Meteor} from 'meteor/meteor';
+import './parties.ts';
 
 Meteor.startup(loadParties);
\ No newline at end of file
-- 
2.7.4


From 31a333cf5d84e2218a8b535c5670aa02074a0668 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 28 Jan 2016 23:24:12 +0200
Subject: [PATCH 069/259] Step 9.3: extend PartiesList and make use of
 subscribe method

---
 client/imports/parties-list/parties-list.ts | 8 ++++++--
 1 file changed, 6 insertions(+), 2 deletions(-)

diff --git a/client/imports/parties-list/parties-list.ts b/client/imports/parties-list/parties-list.ts
index 2fb1b4c..2dacabe 100644
--- a/client/imports/parties-list/parties-list.ts
+++ b/client/imports/parties-list/parties-list.ts
@@ -4,17 +4,21 @@ import { PartiesForm } from '../parties-form/parties-form';
 import { Mongo }       from 'meteor/mongo';
 import { ROUTER_DIRECTIVES }  from '@angular/router';
 import { LoginButtons } from 'angular2-meteor-accounts-ui';
+import { MeteorComponent } from 'angular2-meteor';
 
 @Component({
   selector: 'parties-list',
   templateUrl: '/client/imports/parties-list/parties-list.html',
   directives: [PartiesForm, ROUTER_DIRECTIVES, LoginButtons]
 })
-export class PartiesList {
+export class PartiesList extends MeteorComponent{
   parties: Mongo.Cursor<Party>;
 
   constructor() {
-    this.parties = Parties.find();
+    super();
+    this.subscribe('parties', () => {
+      this.parties = Parties.find();
+    }, true);
   }
 
   removeParty(party) {
-- 
2.7.4


From 6082b703970f2f475f85e4c94474c5fd24785772 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 28 Jan 2016 23:24:47 +0200
Subject: [PATCH 070/259] Step 9.4: add "Public" checkbox

---
 client/imports/parties-form/parties-form.html | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/client/imports/parties-form/parties-form.html b/client/imports/parties-form/parties-form.html
index 754b9ff..1dc86c7 100644
--- a/client/imports/parties-form/parties-form.html
+++ b/client/imports/parties-form/parties-form.html
@@ -6,4 +6,6 @@
   <label>Location</label>
   <input type="text" ngControl="location">
   <button>Add</button>
+  <label>Public</label>
+  <input type="checkbox" ngControl="public">
 </form>
\ No newline at end of file
-- 
2.7.4


From e7ad9491ba1437d4e0d780f167f2f04426330602 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 28 Jan 2016 23:26:03 +0200
Subject: [PATCH 071/259] Step 9.5: update PartiesForm component

---
 client/imports/parties-form/parties-form.ts | 7 +++++--
 typings/party.d.ts                          | 1 +
 2 files changed, 6 insertions(+), 2 deletions(-)

diff --git a/client/imports/parties-form/parties-form.ts b/client/imports/parties-form/parties-form.ts
index 24ab7ba..1e89ddb 100644
--- a/client/imports/parties-form/parties-form.ts
+++ b/client/imports/parties-form/parties-form.ts
@@ -17,23 +17,26 @@ export class PartiesForm {
     this.partiesForm = fb.group({
       name: ['', Validators.required],
       description: [''],
-      location: ['', Validators.required]
+      location: ['', Validators.required],
+      'public': [false]
     });
   }
 
   addParty(party) {
     if (this.partiesForm.valid) {
       if (Meteor.userId()) {
-        Parties.insert({
+        Parties.insert(<Party>{
           name: party.name,
           description: party.description,
           location: party.location,
+          'public': party.public,
           owner: Meteor.userId()
         });
 
         (<Control>this.partiesForm.controls['name']).updateValue('');
         (<Control>this.partiesForm.controls['description']).updateValue('');
         (<Control>this.partiesForm.controls['location']).updateValue('');
+        (<Control>this.partiesForm.controls['public']).updateValue(false);
       } else {
         alert('Please log in to add a party');
       }
diff --git a/typings/party.d.ts b/typings/party.d.ts
index a503ec1..6ebcc01 100644
--- a/typings/party.d.ts
+++ b/typings/party.d.ts
@@ -4,4 +4,5 @@ interface Party {
   description?: string;
   location: string;
   owner?: string;
+  public: boolean;
 }
\ No newline at end of file
-- 
2.7.4


From 4daf071921b0cbe913f02aef43e4d4a61bbc3481 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 28 Jan 2016 23:26:35 +0200
Subject: [PATCH 072/259] Step 9.6: add public field to the initial parties

---
 server/load-parties.ts | 9 ++++++---
 1 file changed, 6 insertions(+), 3 deletions(-)

diff --git a/server/load-parties.ts b/server/load-parties.ts
index 9e0751c..68adcf7 100644
--- a/server/load-parties.ts
+++ b/server/load-parties.ts
@@ -7,17 +7,20 @@ export function loadParties() {
       {
         'name': 'Dubstep-Free Zone',
         'description': 'Can we please just for an evening not listen to dubstep.',
-        'location': 'Palo Alto'
+        'location': 'Palo Alto',
+        'public': true
       },
       {
         'name': 'All dubstep all the time',
         'description': 'Get it on!',
-        'location': 'Palo Alto'
+        'location': 'Palo Alto',
+        'public': true
       },
       {
         'name': 'Savage lounging',
         'description': 'Leisure suit required. And only fiercest manners.',
-        'location': 'San Francisco'
+        'location': 'San Francisco',
+        'public': false
       }
     ];
 
-- 
2.7.4


From 9a02cd851f135073c8d33dbfa36c2a3d1232f7bc Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 28 Jan 2016 23:27:18 +0200
Subject: [PATCH 073/259] Step 9.7: limit data sent to the client

---
 server/parties.ts | 12 +++++++++++-
 1 file changed, 11 insertions(+), 1 deletion(-)

diff --git a/server/parties.ts b/server/parties.ts
index 24e96e5..c7c7552 100644
--- a/server/parties.ts
+++ b/server/parties.ts
@@ -2,5 +2,15 @@ import {Parties} from '../collections/parties';
 import {Meteor} from 'meteor/meteor';
 
 Meteor.publish('parties', function() {
-  return Parties.find();
+  return Parties.find({
+    $or: [
+      { 'public': true },
+      {
+        $and: [
+          { owner: this.userId },
+          { owner: { $exists: true } }
+        ]
+      }
+    ]
+  });
 });
\ No newline at end of file
-- 
2.7.4


From 69db00c8bff12d13ade557df68b8ad5cad8287a0 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 28 Jan 2016 23:27:50 +0200
Subject: [PATCH 074/259] Step 9.8: add "party" publication

---
 server/parties.ts | 20 +++++++++++++++++---
 1 file changed, 17 insertions(+), 3 deletions(-)

diff --git a/server/parties.ts b/server/parties.ts
index c7c7552..8345468 100644
--- a/server/parties.ts
+++ b/server/parties.ts
@@ -1,8 +1,8 @@
 import {Parties} from '../collections/parties';
 import {Meteor} from 'meteor/meteor';
 
-Meteor.publish('parties', function() {
-  return Parties.find({
+function buildQuery(partyId?: string): Object {
+  var isAvailable = {
     $or: [
       { 'public': true },
       {
@@ -12,5 +12,19 @@ Meteor.publish('parties', function() {
         ]
       }
     ]
-  });
+  };
+
+  if (partyId) {
+    return { $and: [{ _id: partyId }, isAvailable] };
+  }
+
+  return isAvailable;
+}
+
+Meteor.publish('parties', function() {
+  return Parties.find(buildQuery.call(this));
+});
+
+Meteor.publish('party', function(partyId: string) {
+  return Parties.find(buildQuery.call(this, partyId));
 });
\ No newline at end of file
-- 
2.7.4


From ec6516e34af70e8c8c3b05609f4e0af43597683f Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 28 Jan 2016 23:29:31 +0200
Subject: [PATCH 075/259] Step 9.9: subscribe to the "party" publication

---
 client/imports/party-details/party-details.ts | 18 +++++++++---------
 1 file changed, 9 insertions(+), 9 deletions(-)

diff --git a/client/imports/party-details/party-details.ts b/client/imports/party-details/party-details.ts
index 7c95dfc..76671f8 100644
--- a/client/imports/party-details/party-details.ts
+++ b/client/imports/party-details/party-details.ts
@@ -1,9 +1,9 @@
-import { Component, NgZone } from '@angular/core';
+import { Component } from '@angular/core';
 import { ActivatedRoute, ROUTER_DIRECTIVES } from '@angular/router';
-import { Tracker } from 'meteor/tracker';
 import {Parties} from '../../../collections/parties.ts';
 import { Meteor } from 'meteor/meteor';
 import { RequireUser } from 'angular2-meteor-accounts-ui';
+import { MeteorComponent } from 'angular2-meteor';
 
 @Component({
   selector: 'party-details',
@@ -11,21 +11,21 @@ import { RequireUser } from 'angular2-meteor-accounts-ui';
   directives: [ROUTER_DIRECTIVES]
 })
 @RequireUser()
-export class PartyDetails {
+export class PartyDetails extends MeteorComponent {
   partyId: string;
   party: Party;
 
-  constructor(private route: ActivatedRoute, private ngZone: NgZone) {}
+  constructor(private route: ActivatedRoute) {
+    super();
+  }
 
   ngOnInit() {
     this.route.params.subscribe((params) => {
       this.partyId = params['partyId'];
 
-      Tracker.autorun(() => {
-        this.ngZone.run(() => {
-          this.party = Parties.findOne(this.partyId);
-        });
-      });
+      this.subscribe('party', this.partyId, () => {
+        this.party = Parties.findOne(this.partyId);
+      }, true);
     });
   }
 
-- 
2.7.4


From ad15bf42ec1f5fc4c34f789dc90f085742668e92 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 28 Jan 2016 23:29:57 +0200
Subject: [PATCH 076/259] Step 9.10: show PartyDetails when the party is loaded

---
 client/imports/party-details/party-details.html | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/client/imports/party-details/party-details.html b/client/imports/party-details/party-details.html
index b19fa80..d58f5b4 100644
--- a/client/imports/party-details/party-details.html
+++ b/client/imports/party-details/party-details.html
@@ -1,4 +1,4 @@
-<form (submit)="saveParty(party)">
+<form (submit)="saveParty(party)" *ngIf="party">
   <label>Name</label>
   <input type="text" [(ngModel)]="party.name">
 
-- 
2.7.4


From 7f850fd61fa224854fd75ae5ad375e22795d581d Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 28 Jan 2016 23:30:38 +0200
Subject: [PATCH 077/259] Step 9.11: add search inputs

---
 client/imports/parties-list/parties-list.html | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/client/imports/parties-list/parties-list.html b/client/imports/parties-list/parties-list.html
index 41ece1a..e4fdcba 100644
--- a/client/imports/parties-list/parties-list.html
+++ b/client/imports/parties-list/parties-list.html
@@ -1,5 +1,7 @@
 <div>
-  <parties-form></parties-form>
+  <parties-form style="float: left"></parties-form>
+  <input type="text" #searchtext placeholder="Search by Location">
+  <button type="button" (click)="search(searchtext.value)">Search</button>
   <login-buttons></login-buttons>
   <ul>
     <li *ngFor="let party of parties">
-- 
2.7.4


From 6c608beea2e5b096df825c9cc19a5f02b3be2e84 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 28 Jan 2016 23:31:13 +0200
Subject: [PATCH 078/259] Step 9.12: add search click event handler

---
 client/imports/parties-list/parties-list.ts | 8 ++++++++
 1 file changed, 8 insertions(+)

diff --git a/client/imports/parties-list/parties-list.ts b/client/imports/parties-list/parties-list.ts
index 2dacabe..e7e8ce7 100644
--- a/client/imports/parties-list/parties-list.ts
+++ b/client/imports/parties-list/parties-list.ts
@@ -24,4 +24,12 @@ export class PartiesList extends MeteorComponent{
   removeParty(party) {
     Parties.remove(party._id);
   }
+
+  search(value: string) {
+    if (value) {
+      this.parties = Parties.find({ location: value });
+    } else {
+      this.parties = Parties.find();
+    }
+  }
 }
-- 
2.7.4


From 790d4c14f0312781550d2724fbf872877f792342 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 28 Jan 2016 23:32:09 +0200
Subject: [PATCH 079/259] Step 12.1: add options to the parties publication

---
 server/parties.ts | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/server/parties.ts b/server/parties.ts
index 8345468..5b9cb4f 100644
--- a/server/parties.ts
+++ b/server/parties.ts
@@ -21,8 +21,8 @@ function buildQuery(partyId?: string): Object {
   return isAvailable;
 }
 
-Meteor.publish('parties', function() {
-  return Parties.find(buildQuery.call(this));
+Meteor.publish('parties', function(options: Object) {
+  return Parties.find(buildQuery.call(this), options);
 });
 
 Meteor.publish('party', function(partyId: string) {
-- 
2.7.4


From cf43bbf14c10dc9be11386aec78ca1e38f0becf6 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 28 Jan 2016 23:33:12 +0200
Subject: [PATCH 080/259] Step 12.2: create options and add them to the parties
 subscription

---
 client/imports/parties-list/parties-list.ts | 12 +++++++++++-
 1 file changed, 11 insertions(+), 1 deletion(-)

diff --git a/client/imports/parties-list/parties-list.ts b/client/imports/parties-list/parties-list.ts
index e7e8ce7..51f6a6d 100644
--- a/client/imports/parties-list/parties-list.ts
+++ b/client/imports/parties-list/parties-list.ts
@@ -13,10 +13,20 @@ import { MeteorComponent } from 'angular2-meteor';
 })
 export class PartiesList extends MeteorComponent{
   parties: Mongo.Cursor<Party>;
+  pageSize: number = 10;
+  curPage: number = 1;
+  nameOrder: number = 1;
 
   constructor() {
     super();
-    this.subscribe('parties', () => {
+
+    let options = {
+      limit: this.pageSize,
+      skip: (this.curPage - 1) * this.pageSize,
+      sort: { name: this.nameOrder }
+    };
+
+    this.subscribe('parties', options, () => {
       this.parties = Parties.find();
     }, true);
   }
-- 
2.7.4


From 17c6b74c43c549c838dfa39da74b99780d61dee5 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 28 Jan 2016 23:33:40 +0200
Subject: [PATCH 081/259] Step 12.3: add sorting by party name to PartiesList

---
 client/imports/parties-list/parties-list.ts | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/client/imports/parties-list/parties-list.ts b/client/imports/parties-list/parties-list.ts
index 51f6a6d..46bdad3 100644
--- a/client/imports/parties-list/parties-list.ts
+++ b/client/imports/parties-list/parties-list.ts
@@ -27,7 +27,7 @@ export class PartiesList extends MeteorComponent{
     };
 
     this.subscribe('parties', options, () => {
-      this.parties = Parties.find();
+      this.parties = Parties.find({}, {sort: { name: this.nameOrder }});
     }, true);
   }
 
-- 
2.7.4


From 52aa3e22e0d93c9c5a82a873d21fe090db5e70c2 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 28 Jan 2016 23:34:40 +0200
Subject: [PATCH 082/259] Step 12.4: re-subscribe on current page changes
 reactively

---
 client/imports/parties-list/parties-list.ts | 20 +++++++++++---------
 1 file changed, 11 insertions(+), 9 deletions(-)

diff --git a/client/imports/parties-list/parties-list.ts b/client/imports/parties-list/parties-list.ts
index 46bdad3..f0d9f13 100644
--- a/client/imports/parties-list/parties-list.ts
+++ b/client/imports/parties-list/parties-list.ts
@@ -14,21 +14,23 @@ import { MeteorComponent } from 'angular2-meteor';
 export class PartiesList extends MeteorComponent{
   parties: Mongo.Cursor<Party>;
   pageSize: number = 10;
-  curPage: number = 1;
+  curPage: ReactiveVar<number> = new ReactiveVar<number>(1);
   nameOrder: number = 1;
 
   constructor() {
     super();
 
-    let options = {
-      limit: this.pageSize,
-      skip: (this.curPage - 1) * this.pageSize,
-      sort: { name: this.nameOrder }
-    };
+    this.autorun(() => {
+      let options = {
+        limit: this.pageSize,
+        skip: (this.curPage.get() - 1) * this.pageSize,
+        sort: { name: this.nameOrder }
+      };
 
-    this.subscribe('parties', options, () => {
-      this.parties = Parties.find({}, {sort: { name: this.nameOrder }});
-    }, true);
+      this.subscribe('parties', options, () => {
+        this.parties = Parties.find({}, { sort: { name: this.nameOrder } });
+      }, true);
+    });
   }
 
   removeParty(party) {
-- 
2.7.4


From 60d359f2f624620e1fe571b6359ab272185b6d3c Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Fri, 29 Jan 2016 00:16:46 +0200
Subject: [PATCH 083/259] Step 12.5: Add reactive var package

---
 .meteor/packages | 1 +
 1 file changed, 1 insertion(+)

diff --git a/.meteor/packages b/.meteor/packages
index 58b1017..8db539b 100644
--- a/.meteor/packages
+++ b/.meteor/packages
@@ -19,3 +19,4 @@ angular2-compilers
 barbatus:angular2-runtime
 accounts-password
 fourseven:scss
+reactive-var
-- 
2.7.4


From 948fe514cb9df784074cb2e7eb29c3f343eaa1f2 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Fri, 29 Jan 2016 00:19:23 +0200
Subject: [PATCH 084/259] Step 12.6: Import reactive var from meteor

---
 client/imports/parties-list/parties-list.ts | 1 +
 1 file changed, 1 insertion(+)

diff --git a/client/imports/parties-list/parties-list.ts b/client/imports/parties-list/parties-list.ts
index f0d9f13..5847450 100644
--- a/client/imports/parties-list/parties-list.ts
+++ b/client/imports/parties-list/parties-list.ts
@@ -5,6 +5,7 @@ import { Mongo }       from 'meteor/mongo';
 import { ROUTER_DIRECTIVES }  from '@angular/router';
 import { LoginButtons } from 'angular2-meteor-accounts-ui';
 import { MeteorComponent } from 'angular2-meteor';
+import { ReactiveVar } from 'meteor/reactive-var';
 
 @Component({
   selector: 'parties-list',
-- 
2.7.4


From 7b67ed1c7cfac1b235855d553d5aea9f64d8097d Mon Sep 17 00:00:00 2001
From: Uri Goldshtein <uri.goldshtein@gmail.com>
Date: Sat, 14 May 2016 17:29:11 +0300
Subject: [PATCH 085/259] Step 12.7: Add dependency for the pagination package

---
 package.json | 1 +
 1 file changed, 1 insertion(+)

diff --git a/package.json b/package.json
index 336a26b..997a908 100644
--- a/package.json
+++ b/package.json
@@ -15,6 +15,7 @@
     "angular2-meteor-accounts-ui": "0.5.0",
     "angular2-meteor-auto-bootstrap": "^0.5.6",
     "angular2-meteor-polyfills": "^0.1.1",
+    "angular2-pagination": "0.2.1",
     "es6-shim": "^0.35.1",
     "meteor-node-stubs": "^0.2.3",
     "reflect-metadata": "^0.1.2",
-- 
2.7.4


From 5576cb1d18525a66875c6a2f46fd127ce4095ceb Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Fri, 29 Jan 2016 00:23:44 +0200
Subject: [PATCH 086/259] Step 12.8: import and set up pagination components

---
 client/css/main.scss                        | 1 +
 client/imports/parties-list/parties-list.ts | 5 ++++-
 2 files changed, 5 insertions(+), 1 deletion(-)

diff --git a/client/css/main.scss b/client/css/main.scss
index a7ccb1a..a3dd324 100644
--- a/client/css/main.scss
+++ b/client/css/main.scss
@@ -1 +1,2 @@
 @import "{}/node_modules/angular2-meteor-accounts-ui/build/login-buttons.scss";
+@import "{}/node_modules/angular2-pagination/build/pagination-controls-cmp.scss";
\ No newline at end of file
diff --git a/client/imports/parties-list/parties-list.ts b/client/imports/parties-list/parties-list.ts
index 5847450..e18a420 100644
--- a/client/imports/parties-list/parties-list.ts
+++ b/client/imports/parties-list/parties-list.ts
@@ -6,11 +6,14 @@ import { ROUTER_DIRECTIVES }  from '@angular/router';
 import { LoginButtons } from 'angular2-meteor-accounts-ui';
 import { MeteorComponent } from 'angular2-meteor';
 import { ReactiveVar } from 'meteor/reactive-var';
+import { PaginationService, PaginatePipe, PaginationControlsCmp } from 'angular2-pagination';
 
 @Component({
   selector: 'parties-list',
+  viewProviders: [PaginationService],
   templateUrl: '/client/imports/parties-list/parties-list.html',
-  directives: [PartiesForm, ROUTER_DIRECTIVES, LoginButtons]
+  directives: [PartiesForm, ROUTER_DIRECTIVES, LoginButtons, PaginationControlsCmp],
+  pipes: [PaginatePipe]
 })
 export class PartiesList extends MeteorComponent{
   parties: Mongo.Cursor<Party>;
-- 
2.7.4


From 27de73a35a584a1a489d6d656a08a1b6f8e0fdf3 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Wed, 3 Feb 2016 22:00:29 +0200
Subject: [PATCH 087/259] Step 12.9: add pagination markup to the PartiesList's
 template

---
 client/imports/parties-list/parties-list.html | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/client/imports/parties-list/parties-list.html b/client/imports/parties-list/parties-list.html
index e4fdcba..7f00827 100644
--- a/client/imports/parties-list/parties-list.html
+++ b/client/imports/parties-list/parties-list.html
@@ -4,11 +4,12 @@
   <button type="button" (click)="search(searchtext.value)">Search</button>
   <login-buttons></login-buttons>
   <ul>
-    <li *ngFor="let party of parties">
+    <li *ngFor="let party of parties | paginate:{currentPage: 1, itemsPerPage: pageSize, totalItems: 30}">
       <a [routerLink]="['/party', party._id]">{{party.name}}</a>
       <p>{{party.description}}</p>
       <p>{{party.location}}</p>
       <button (click)="removeParty(party)">X</button>
     </li>
   </ul>
+  <pagination-controls></pagination-controls>
 </div>
-- 
2.7.4


From 7a7999de02d9fbb2a69eebbb68540658e8bbf4cd Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Wed, 3 Feb 2016 22:00:55 +0200
Subject: [PATCH 088/259] Step 12.10: handle page changed event of the
 pagination controls

---
 client/imports/parties-list/parties-list.html | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/client/imports/parties-list/parties-list.html b/client/imports/parties-list/parties-list.html
index 7f00827..b778254 100644
--- a/client/imports/parties-list/parties-list.html
+++ b/client/imports/parties-list/parties-list.html
@@ -11,5 +11,5 @@
       <button (click)="removeParty(party)">X</button>
     </li>
   </ul>
-  <pagination-controls></pagination-controls>
+  <pagination-controls (change)="onPageChanged($event.page)"></pagination-controls>
 </div>
-- 
2.7.4


From ebcdbd95957b690d108a26bdc75723aabadea813 Mon Sep 17 00:00:00 2001
From: dotansimha <dotansimha@gmail.com>
Date: Fri, 6 May 2016 21:52:55 +0300
Subject: [PATCH 089/259] Step 12.11: add page changed event handler to the
 component

---
 client/imports/parties-list/parties-list.ts | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/client/imports/parties-list/parties-list.ts b/client/imports/parties-list/parties-list.ts
index e18a420..f5c91aa 100644
--- a/client/imports/parties-list/parties-list.ts
+++ b/client/imports/parties-list/parties-list.ts
@@ -48,4 +48,8 @@ export class PartiesList extends MeteorComponent{
       this.parties = Parties.find();
     }
   }
+
+  onPageChanged(page: number) {
+    this.curPage.set(page);
+  }
 }
-- 
2.7.4


From 3bebe90211246ee9045719be74264de651bd3693 Mon Sep 17 00:00:00 2001
From: dotansimha <dotansimha@gmail.com>
Date: Fri, 6 May 2016 21:53:44 +0300
Subject: [PATCH 090/259] Step 12.12: Add counts package and the typings file

---
 .meteor/packages            | 1 +
 .meteor/versions            | 1 +
 typings/publish-counts.d.ts | 8 ++++++++
 3 files changed, 10 insertions(+)
 create mode 100644 typings/publish-counts.d.ts

diff --git a/.meteor/packages b/.meteor/packages
index 8db539b..410ce64 100644
--- a/.meteor/packages
+++ b/.meteor/packages
@@ -20,3 +20,4 @@ barbatus:angular2-runtime
 accounts-password
 fourseven:scss
 reactive-var
+tmeasday:publish-counts
diff --git a/.meteor/versions b/.meteor/versions
index 585e7e1..19c9bf5 100644
--- a/.meteor/versions
+++ b/.meteor/versions
@@ -73,6 +73,7 @@ srp@1.0.8
 standard-minifier-css@1.0.6
 standard-minifier-js@1.0.6
 standard-minifiers@1.0.6
+tmeasday:publish-counts@0.7.3
 tracker@1.0.13
 ui@1.0.11
 underscore@1.0.8
diff --git a/typings/publish-counts.d.ts b/typings/publish-counts.d.ts
new file mode 100644
index 0000000..765120e
--- /dev/null
+++ b/typings/publish-counts.d.ts
@@ -0,0 +1,8 @@
+interface CountsObject {
+  get(publicationName : string) : number;
+  publish(context : any, publicationName : string, cursor : Mongo.Cursor, options : any) : number;
+}
+
+declare module "meteor/tmeasday:publish-counts" {
+  export let Counts : CountsObject;
+}
\ No newline at end of file
-- 
2.7.4


From 6db983d80ef773367167b5ba5eb7f075374f7c14 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Wed, 3 Feb 2016 22:04:13 +0200
Subject: [PATCH 091/259] Step 12.13: publish total number of parties

---
 server/parties.ts | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/server/parties.ts b/server/parties.ts
index 5b9cb4f..37f9922 100644
--- a/server/parties.ts
+++ b/server/parties.ts
@@ -1,5 +1,6 @@
 import {Parties} from '../collections/parties';
 import {Meteor} from 'meteor/meteor';
+import {Counts} from 'meteor/tmeasday:publish-counts';
 
 function buildQuery(partyId?: string): Object {
   var isAvailable = {
@@ -22,6 +23,8 @@ function buildQuery(partyId?: string): Object {
 }
 
 Meteor.publish('parties', function(options: Object) {
+  Counts.publish(this, 'numberOfParties', Parties.find(buildQuery.call(this)), { noReady: true });
+
   return Parties.find(buildQuery.call(this), options);
 });
 
-- 
2.7.4


From 28f8b348d68e35c1b223aa0f3b9eb023bb6f8806 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Wed, 3 Feb 2016 22:06:01 +0200
Subject: [PATCH 092/259] Step 12.14: handle reactive updates of the parties
 total number

---
 client/imports/parties-list/parties-list.ts | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/client/imports/parties-list/parties-list.ts b/client/imports/parties-list/parties-list.ts
index f5c91aa..41c5a84 100644
--- a/client/imports/parties-list/parties-list.ts
+++ b/client/imports/parties-list/parties-list.ts
@@ -6,6 +6,7 @@ import { ROUTER_DIRECTIVES }  from '@angular/router';
 import { LoginButtons } from 'angular2-meteor-accounts-ui';
 import { MeteorComponent } from 'angular2-meteor';
 import { ReactiveVar } from 'meteor/reactive-var';
+import { Counts } from 'meteor/tmeasday:publish-counts';
 import { PaginationService, PaginatePipe, PaginationControlsCmp } from 'angular2-pagination';
 
 @Component({
@@ -20,6 +21,7 @@ export class PartiesList extends MeteorComponent{
   pageSize: number = 10;
   curPage: ReactiveVar<number> = new ReactiveVar<number>(1);
   nameOrder: number = 1;
+  partiesSize: number = 0;
 
   constructor() {
     super();
@@ -35,6 +37,10 @@ export class PartiesList extends MeteorComponent{
         this.parties = Parties.find({}, { sort: { name: this.nameOrder } });
       }, true);
     });
+
+    this.autorun(() => {
+      this.partiesSize = Counts.get('numberOfParties');
+    }, true);
   }
 
   removeParty(party) {
-- 
2.7.4


From 8c952b460d0c2449a6f2482acc748affc60fd172 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Wed, 3 Feb 2016 22:06:38 +0200
Subject: [PATCH 093/259] Step 12.15: add parties total number var in the
 template

---
 client/imports/parties-list/parties-list.html | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/client/imports/parties-list/parties-list.html b/client/imports/parties-list/parties-list.html
index b778254..e306d52 100644
--- a/client/imports/parties-list/parties-list.html
+++ b/client/imports/parties-list/parties-list.html
@@ -4,7 +4,7 @@
   <button type="button" (click)="search(searchtext.value)">Search</button>
   <login-buttons></login-buttons>
   <ul>
-    <li *ngFor="let party of parties | paginate:{currentPage: 1, itemsPerPage: pageSize, totalItems: 30}">
+    <li *ngFor="let party of parties | paginate:{currentPage: 1, itemsPerPage: pageSize, totalItems: partiesSize}">
       <a [routerLink]="['/party', party._id]">{{party.name}}</a>
       <p>{{party.description}}</p>
       <p>{{party.location}}</p>
-- 
2.7.4


From 5ea8a4ff4da734abb80af1feb72078f19cf12ac7 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Wed, 3 Feb 2016 22:07:37 +0200
Subject: [PATCH 094/259] Step 12.16: add a sort order dropdown

---
 client/imports/parties-list/parties-list.html | 7 +++++++
 1 file changed, 7 insertions(+)

diff --git a/client/imports/parties-list/parties-list.html b/client/imports/parties-list/parties-list.html
index e306d52..aeaa53d 100644
--- a/client/imports/parties-list/parties-list.html
+++ b/client/imports/parties-list/parties-list.html
@@ -3,6 +3,13 @@
   <input type="text" #searchtext placeholder="Search by Location">
   <button type="button" (click)="search(searchtext.value)">Search</button>
   <login-buttons></login-buttons>
+  <h1>Parties:</h1>
+  <div>
+    <select #sort (change)="changeSortOrder(sort.value)">
+      <option value="1" selected>Ascending</option>
+      <option value="-1">Descending</option>
+    </select>
+  </div>
   <ul>
     <li *ngFor="let party of parties | paginate:{currentPage: 1, itemsPerPage: pageSize, totalItems: partiesSize}">
       <a [routerLink]="['/party', party._id]">{{party.name}}</a>
-- 
2.7.4


From 5fba8fdf463c43f8092c45672250486727c8e8f4 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Wed, 3 Feb 2016 22:09:03 +0200
Subject: [PATCH 095/259] Step 12.17: re-subscribe reactively when sort order
 changes

---
 client/imports/parties-list/parties-list.ts | 10 +++++++---
 1 file changed, 7 insertions(+), 3 deletions(-)

diff --git a/client/imports/parties-list/parties-list.ts b/client/imports/parties-list/parties-list.ts
index 41c5a84..c14a1c6 100644
--- a/client/imports/parties-list/parties-list.ts
+++ b/client/imports/parties-list/parties-list.ts
@@ -20,7 +20,7 @@ export class PartiesList extends MeteorComponent{
   parties: Mongo.Cursor<Party>;
   pageSize: number = 10;
   curPage: ReactiveVar<number> = new ReactiveVar<number>(1);
-  nameOrder: number = 1;
+  nameOrder: ReactiveVar<number> = new ReactiveVar<number>(1);
   partiesSize: number = 0;
 
   constructor() {
@@ -30,11 +30,11 @@ export class PartiesList extends MeteorComponent{
       let options = {
         limit: this.pageSize,
         skip: (this.curPage.get() - 1) * this.pageSize,
-        sort: { name: this.nameOrder }
+        sort: { name: this.nameOrder.get() }
       };
 
       this.subscribe('parties', options, () => {
-        this.parties = Parties.find({}, { sort: { name: this.nameOrder } });
+        this.parties = Parties.find({}, { sort: { name: this.nameOrder.get() } });
       }, true);
     });
 
@@ -55,6 +55,10 @@ export class PartiesList extends MeteorComponent{
     }
   }
 
+  changeSortOrder(nameOrder: string) {
+    this.nameOrder.set(parseInt(nameOrder));
+  }
+
   onPageChanged(page: number) {
     this.curPage.set(page);
   }
-- 
2.7.4


From 28488a1c1883feb0143a672cea990f3e0dfb8d7c Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Wed, 3 Feb 2016 22:27:25 +0200
Subject: [PATCH 096/259] Step 12.18: add search by the party location using
 Mongo regex

---
 server/parties.ts | 16 +++++++++-------
 1 file changed, 9 insertions(+), 7 deletions(-)

diff --git a/server/parties.ts b/server/parties.ts
index 37f9922..9595708 100644
--- a/server/parties.ts
+++ b/server/parties.ts
@@ -2,10 +2,10 @@ import {Parties} from '../collections/parties';
 import {Meteor} from 'meteor/meteor';
 import {Counts} from 'meteor/tmeasday:publish-counts';
 
-function buildQuery(partyId?: string): Object {
+function buildQuery(partyId: string, location: string): Object {
   var isAvailable = {
     $or: [
-      { 'public': true },
+      { public: true },
       {
         $and: [
           { owner: this.userId },
@@ -19,13 +19,15 @@ function buildQuery(partyId?: string): Object {
     return { $and: [{ _id: partyId }, isAvailable] };
   }
 
-  return isAvailable;
-}
+  let searchRegEx = { '$regex': '.*' + (location || '') + '.*', '$options': 'i' };
 
-Meteor.publish('parties', function(options: Object) {
-  Counts.publish(this, 'numberOfParties', Parties.find(buildQuery.call(this)), { noReady: true });
+  return { $and: [{ location: searchRegEx }, isAvailable] };
+}
 
-  return Parties.find(buildQuery.call(this), options);
+Meteor.publish('parties', function(options: Object, location: string) {
+  Counts.publish(this, 'numberOfParties',
+    Parties.find(buildQuery.call(this, null, location)), { noReady: true });
+  return Parties.find(buildQuery.call(this, null, location), options);
 });
 
 Meteor.publish('party', function(partyId: string) {
-- 
2.7.4


From e495be5eb44cce698d50dc5dd92e85664e0cb729 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Wed, 3 Feb 2016 22:32:06 +0200
Subject: [PATCH 097/259] Step 12.19: add reactive search by the location on
 the client

---
 client/imports/parties-list/parties-list.ts | 10 ++++------
 1 file changed, 4 insertions(+), 6 deletions(-)

diff --git a/client/imports/parties-list/parties-list.ts b/client/imports/parties-list/parties-list.ts
index c14a1c6..4724be3 100644
--- a/client/imports/parties-list/parties-list.ts
+++ b/client/imports/parties-list/parties-list.ts
@@ -22,6 +22,7 @@ export class PartiesList extends MeteorComponent{
   curPage: ReactiveVar<number> = new ReactiveVar<number>(1);
   nameOrder: ReactiveVar<number> = new ReactiveVar<number>(1);
   partiesSize: number = 0;
+  location: ReactiveVar<string> = new ReactiveVar<string>(null);
 
   constructor() {
     super();
@@ -33,7 +34,7 @@ export class PartiesList extends MeteorComponent{
         sort: { name: this.nameOrder.get() }
       };
 
-      this.subscribe('parties', options, () => {
+      this.subscribe('parties', options, this.location.get(), () => {
         this.parties = Parties.find({}, { sort: { name: this.nameOrder.get() } });
       }, true);
     });
@@ -48,11 +49,8 @@ export class PartiesList extends MeteorComponent{
   }
 
   search(value: string) {
-    if (value) {
-      this.parties = Parties.find({ location: value });
-    } else {
-      this.parties = Parties.find();
-    }
+    this.curPage.set(1);
+    this.location.set(value);
   }
 
   changeSortOrder(nameOrder: string) {
-- 
2.7.4


From 1eb9f80e989c74d7578acf8014bfd581753f6ec4 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Wed, 3 Feb 2016 22:32:47 +0200
Subject: [PATCH 098/259] Step 13.1: add uninvited users publication

---
 server/users.ts | 16 ++++++++++++++++
 1 file changed, 16 insertions(+)
 create mode 100644 server/users.ts

diff --git a/server/users.ts b/server/users.ts
new file mode 100644
index 0000000..964ded4
--- /dev/null
+++ b/server/users.ts
@@ -0,0 +1,16 @@
+import {Parties} from '../collections/parties.ts';
+import { Meteor } from 'meteor/meteor';
+
+Meteor.publish('uninvited', function (partyId:string) {
+  let party = Parties.findOne(partyId);
+
+  if (!party)
+    throw new Meteor.Error('404', 'No such party!');
+
+  return Meteor.users.find({
+    _id: {
+      $nin: party.invited || [],
+      $ne: this.userId
+    }
+  });
+});
\ No newline at end of file
-- 
2.7.4


From 3cdd5b878d6d41cfbc7a88cdb561f9f03012a097 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Wed, 3 Feb 2016 22:33:15 +0200
Subject: [PATCH 099/259] Step 13.2: import users publications on the server
 start

---
 server/main.ts | 1 +
 1 file changed, 1 insertion(+)

diff --git a/server/main.ts b/server/main.ts
index 7330ae5..b2a5647 100644
--- a/server/main.ts
+++ b/server/main.ts
@@ -1,5 +1,6 @@
 import {loadParties} from './load-parties.ts';
 import {Meteor} from 'meteor/meteor';
 import './parties.ts';
+import './users.ts';
 
 Meteor.startup(loadParties);
\ No newline at end of file
-- 
2.7.4


From dcc9473098a705a5be02ff7b9fa4b01f1530bccf Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Wed, 3 Feb 2016 22:34:11 +0200
Subject: [PATCH 100/259] Step 13.3: load uninvited users

---
 client/imports/party-details/party-details.ts | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/client/imports/party-details/party-details.ts b/client/imports/party-details/party-details.ts
index 76671f8..db6130a 100644
--- a/client/imports/party-details/party-details.ts
+++ b/client/imports/party-details/party-details.ts
@@ -4,6 +4,7 @@ import {Parties} from '../../../collections/parties.ts';
 import { Meteor } from 'meteor/meteor';
 import { RequireUser } from 'angular2-meteor-accounts-ui';
 import { MeteorComponent } from 'angular2-meteor';
+import { Mongo } from 'meteor/mongo';
 
 @Component({
   selector: 'party-details',
@@ -14,6 +15,7 @@ import { MeteorComponent } from 'angular2-meteor';
 export class PartyDetails extends MeteorComponent {
   partyId: string;
   party: Party;
+  users: Mongo.Cursor<Object>;
 
   constructor(private route: ActivatedRoute) {
     super();
@@ -26,6 +28,10 @@ export class PartyDetails extends MeteorComponent {
       this.subscribe('party', this.partyId, () => {
         this.party = Parties.findOne(this.partyId);
       }, true);
+
+      this.subscribe('uninvited', partyId, () => {
+        this.users = Meteor.users.find({_id: {$ne: Meteor.userId()}});
+      }, true);
     });
   }
 
-- 
2.7.4


From b67dc6249f421a4d632d1380beb37d96fd96a9ba Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Wed, 3 Feb 2016 22:34:44 +0200
Subject: [PATCH 101/259] Step 13.4: Add invited to the party definition

---
 typings/party.d.ts | 1 +
 1 file changed, 1 insertion(+)

diff --git a/typings/party.d.ts b/typings/party.d.ts
index 6ebcc01..ef626f1 100644
--- a/typings/party.d.ts
+++ b/typings/party.d.ts
@@ -5,4 +5,5 @@ interface Party {
   location: string;
   owner?: string;
   public: boolean;
+  invited?: Array<string>;
 }
\ No newline at end of file
-- 
2.7.4


From e888be1842c0cbdfc67edcad817e63aca995ea30 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Wed, 3 Feb 2016 22:35:35 +0200
Subject: [PATCH 102/259] Step 13.5: render uninvited users

---
 client/imports/party-details/party-details.html | 7 +++++++
 1 file changed, 7 insertions(+)

diff --git a/client/imports/party-details/party-details.html b/client/imports/party-details/party-details.html
index d58f5b4..d30d992 100644
--- a/client/imports/party-details/party-details.html
+++ b/client/imports/party-details/party-details.html
@@ -11,3 +11,10 @@
   <button type="submit">Save</button>
   <button [routerLink]="['/']">Cancel</button>
 </form>
+
+<ul>
+  Users to invite:
+  <li *ngFor="let user of users">
+    <div>{{ user.emails[0].address }}</div>
+  </li>
+</ul>
-- 
2.7.4


From 3ea28c3e53327da935463f5fa15714021848f0c3 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Wed, 3 Feb 2016 22:45:15 +0200
Subject: [PATCH 103/259] Step 13.6: add new pipe to render user name

---
 client/imports/pipes/pipes.ts | 24 ++++++++++++++++++++++++
 1 file changed, 24 insertions(+)
 create mode 100644 client/imports/pipes/pipes.ts

diff --git a/client/imports/pipes/pipes.ts b/client/imports/pipes/pipes.ts
new file mode 100644
index 0000000..b7b6f2b
--- /dev/null
+++ b/client/imports/pipes/pipes.ts
@@ -0,0 +1,24 @@
+import 'reflect-metadata';
+import { Pipe } from '@angular/core';
+import { Meteor } from 'meteor/meteor';
+
+@Pipe({
+  name: 'displayName'
+})
+export class DisplayName {
+  transform(user: Meteor.User): string {
+    if (!user) {
+      return '';
+    }
+
+    if (user.username) {
+      return user.username;
+    }
+
+    if (user.emails) {
+      return user.emails[0].address;
+    }
+
+    return '';
+  }
+}
\ No newline at end of file
-- 
2.7.4


From 8396f3a4e5a0494cb3a6d8f261d9feff89040c35 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Wed, 3 Feb 2016 22:46:31 +0200
Subject: [PATCH 104/259] Step 13.7: make use of the pipe in the template

---
 client/imports/party-details/party-details.html | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/client/imports/party-details/party-details.html b/client/imports/party-details/party-details.html
index d30d992..b9a7314 100644
--- a/client/imports/party-details/party-details.html
+++ b/client/imports/party-details/party-details.html
@@ -15,6 +15,6 @@
 <ul>
   Users to invite:
   <li *ngFor="let user of users">
-    <div>{{ user.emails[0].address }}</div>
+    <div>{{ user | displayName }}</div>
   </li>
 </ul>
-- 
2.7.4


From 50f8032fc15ba851eae056fc931d6169ff245dc0 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Wed, 3 Feb 2016 22:48:00 +0200
Subject: [PATCH 105/259] Step 13.8: import DisplayName pipe and add it to the
 view

---
 client/imports/party-details/party-details.ts | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/client/imports/party-details/party-details.ts b/client/imports/party-details/party-details.ts
index db6130a..570ccd0 100644
--- a/client/imports/party-details/party-details.ts
+++ b/client/imports/party-details/party-details.ts
@@ -4,12 +4,14 @@ import {Parties} from '../../../collections/parties.ts';
 import { Meteor } from 'meteor/meteor';
 import { RequireUser } from 'angular2-meteor-accounts-ui';
 import { MeteorComponent } from 'angular2-meteor';
+import { DisplayName } from '../pipes/pipes.ts';
 import { Mongo } from 'meteor/mongo';
 
 @Component({
   selector: 'party-details',
   templateUrl: '/client/imports/party-details/party-details.html',
   directives: [ROUTER_DIRECTIVES]
+  pipes: [DisplayName]
 })
 @RequireUser()
 export class PartyDetails extends MeteorComponent {
-- 
2.7.4


From 65546df7dc9d3b29eb746d3da69e66b0cdd9b0d8 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Wed, 3 Feb 2016 22:50:45 +0200
Subject: [PATCH 106/259] Step 14.0: add a party invitation method

---
 collections/methods.ts | 47 +++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 47 insertions(+)
 create mode 100644 collections/methods.ts

diff --git a/collections/methods.ts b/collections/methods.ts
new file mode 100644
index 0000000..28e5487
--- /dev/null
+++ b/collections/methods.ts
@@ -0,0 +1,47 @@
+import {Parties} from './parties.ts';
+import {Email} from 'meteor/email';
+import {check} from 'meteor/check';
+import {Meteor} from 'meteor/meteor';
+
+function getContactEmail(user:Meteor.User):string {
+  if (user.emails && user.emails.length)
+    return user.emails[0].address;
+
+  return null;
+}
+
+Meteor.methods({
+  invite: function (partyId:string, userId:string) {
+    check(partyId, String);
+    check(userId, String);
+
+    let party = Parties.findOne(partyId);
+
+    if (!party)
+      throw new Meteor.Error('404', 'No such party!');
+
+    if (party.public)
+      throw new Meteor.Error('400', 'That party is public. No need to invite people.');
+
+    if (party.owner !== this.userId)
+      throw new Meteor.Error('403', 'No permissions!');
+
+    if (userId !== party.owner && (party.invited || []).indexOf(userId) == -1) {
+      Parties.update(partyId, {$addToSet: {invited: userId}});
+
+      let from = getContactEmail(Meteor.users.findOne(this.userId));
+      let to = getContactEmail(Meteor.users.findOne(userId));
+
+      if (Meteor.isServer && to) {
+        Email.send({
+          from: 'noreply@socially.com',
+          to: to,
+          replyTo: from || undefined,
+          subject: 'PARTY: ' + party.name,
+          text: `Hi, I just invited you to ${party.name} on Socially.
+                        \n\nCome check it out: ${Meteor.absoluteUrl()}\n`
+        });
+      }
+    }
+  }
+});
\ No newline at end of file
-- 
2.7.4


From 73695963cd8a15383f07f805d0347d51f8aef8a6 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Wed, 3 Feb 2016 22:51:24 +0200
Subject: [PATCH 107/259] Step 14.1: Add email and check packages

---
 .meteor/packages | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/.meteor/packages b/.meteor/packages
index 410ce64..b232d8b 100644
--- a/.meteor/packages
+++ b/.meteor/packages
@@ -21,3 +21,5 @@ accounts-password
 fourseven:scss
 reactive-var
 tmeasday:publish-counts
+email
+check
-- 
2.7.4


From c8360c8759a6dfb01c75a48913350287b0e58e93 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Wed, 3 Feb 2016 22:51:49 +0200
Subject: [PATCH 108/259] Step 14.2: import methods on the server side

---
 server/main.ts | 1 +
 1 file changed, 1 insertion(+)

diff --git a/server/main.ts b/server/main.ts
index b2a5647..e4eb2d1 100644
--- a/server/main.ts
+++ b/server/main.ts
@@ -2,5 +2,6 @@ import {loadParties} from './load-parties.ts';
 import {Meteor} from 'meteor/meteor';
 import './parties.ts';
 import './users.ts';
+import '../collections/methods.ts';
 
 Meteor.startup(loadParties);
\ No newline at end of file
-- 
2.7.4


From 5d8ee0d07236eaa8439d6efc4167d68d9d950347 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Wed, 3 Feb 2016 22:52:16 +0200
Subject: [PATCH 109/259] Step 14.3: import methods on the client

---
 client/app.ts | 1 +
 1 file changed, 1 insertion(+)

diff --git a/client/app.ts b/client/app.ts
index 06f91ad..f59e04d 100644
--- a/client/app.ts
+++ b/client/app.ts
@@ -5,6 +5,7 @@ import { provideRouter, RouterConfig, ROUTER_DIRECTIVES } from '@angular/router'
 import { APP_BASE_HREF } from '@angular/common';
 import { PartiesList } from './imports/parties-list/parties-list.ts';
 import { PartyDetails } from './imports/party-details/party-details.ts';
+import '../collections/methods.ts';
 
 @Component({
   selector: 'app',
-- 
2.7.4


From 6f6fd52ad0ac8bb3db03b98293a0e674384a375c Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Wed, 3 Feb 2016 22:52:40 +0200
Subject: [PATCH 110/259] Step 14.4: add "invite" button

---
 client/imports/party-details/party-details.html | 1 +
 1 file changed, 1 insertion(+)

diff --git a/client/imports/party-details/party-details.html b/client/imports/party-details/party-details.html
index b9a7314..bc2f1ce 100644
--- a/client/imports/party-details/party-details.html
+++ b/client/imports/party-details/party-details.html
@@ -16,5 +16,6 @@
   Users to invite:
   <li *ngFor="let user of users">
     <div>{{ user | displayName }}</div>
+    <button (click)="invite(user)">Invite</button>
   </li>
 </ul>
-- 
2.7.4


From 6d84686299bd601497ae999288f4df64b499af3c Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Wed, 3 Feb 2016 22:53:18 +0200
Subject: [PATCH 111/259] Step 14.5: add the click handler and call "invite"
 method

---
 client/imports/party-details/party-details.ts | 13 ++++++++++++-
 1 file changed, 12 insertions(+), 1 deletion(-)

diff --git a/client/imports/party-details/party-details.ts b/client/imports/party-details/party-details.ts
index 570ccd0..e8c0d75 100644
--- a/client/imports/party-details/party-details.ts
+++ b/client/imports/party-details/party-details.ts
@@ -50,4 +50,15 @@ export class PartyDetails extends MeteorComponent {
       alert('Please log in to change this party');
     }
   }
-}
+
+  invite(user: Meteor.User) {
+    this.call('invite', this.party._id, user._id, (error) => {
+      if (error) {
+        alert(`Failed to invite due to ${error}`);
+        return;
+      }
+
+      alert('User successfully invited.');
+    });
+  }
+}
\ No newline at end of file
-- 
2.7.4


From 54782b01d368bc0b8850aee0147463fff4f6a677 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Wed, 3 Feb 2016 22:54:04 +0200
Subject: [PATCH 112/259] Step 14.6: get the party reactively

---
 client/imports/party-details/party-details.ts | 8 +++++---
 1 file changed, 5 insertions(+), 3 deletions(-)

diff --git a/client/imports/party-details/party-details.ts b/client/imports/party-details/party-details.ts
index e8c0d75..e6740a4 100644
--- a/client/imports/party-details/party-details.ts
+++ b/client/imports/party-details/party-details.ts
@@ -28,10 +28,12 @@ export class PartyDetails extends MeteorComponent {
       this.partyId = params['partyId'];
 
       this.subscribe('party', this.partyId, () => {
-        this.party = Parties.findOne(this.partyId);
-      }, true);
+        this.autorun(() => {
+          this.party = Parties.findOne(this.partyId);
+        }, true);
+      });
 
-      this.subscribe('uninvited', partyId, () => {
+      this.subscribe('uninvited', this.partyId, () => {
         this.users = Meteor.users.find({_id: {$ne: Meteor.userId()}});
       }, true);
     });
-- 
2.7.4


From 960165d52fbacb899fa5fa43f08e898450f1fe24 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Wed, 3 Feb 2016 22:58:30 +0200
Subject: [PATCH 113/259] Step 14.7: update the users list reactively

---
 client/imports/party-details/party-details.ts | 14 +++++++++++++-
 1 file changed, 13 insertions(+), 1 deletion(-)

diff --git a/client/imports/party-details/party-details.ts b/client/imports/party-details/party-details.ts
index e6740a4..d47bb96 100644
--- a/client/imports/party-details/party-details.ts
+++ b/client/imports/party-details/party-details.ts
@@ -30,15 +30,27 @@ export class PartyDetails extends MeteorComponent {
       this.subscribe('party', this.partyId, () => {
         this.autorun(() => {
           this.party = Parties.findOne(this.partyId);
+          this.getUsers(this.party);
         }, true);
       });
 
       this.subscribe('uninvited', this.partyId, () => {
-        this.users = Meteor.users.find({_id: {$ne: Meteor.userId()}});
+        this.getUsers(this.party);
       }, true);
     });
   }
 
+  getUsers(party: Party) {
+    if (party) {
+      this.users = Meteor.users.find({
+        _id: {
+          $nin: party.invited || [],
+          $ne: Meteor.userId()
+        }
+      });
+    }
+  }
+
   saveParty(party) {
     if (Meteor.userId()) {
       Parties.update(party._id, {
-- 
2.7.4


From c515e59831a4fb50b433bbc1ec267dea36c5ed32 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Wed, 3 Feb 2016 22:59:21 +0200
Subject: [PATCH 114/259] Step 14.8: show private parties to the invited and
 owners only

---
 server/parties.ts | 8 +++++++-
 1 file changed, 7 insertions(+), 1 deletion(-)

diff --git a/server/parties.ts b/server/parties.ts
index 9595708..2a44e5e 100644
--- a/server/parties.ts
+++ b/server/parties.ts
@@ -5,11 +5,17 @@ import {Counts} from 'meteor/tmeasday:publish-counts';
 function buildQuery(partyId: string, location: string): Object {
   var isAvailable = {
     $or: [
-      { public: true },
+      { 'public': true },
       {
         $and: [
           { owner: this.userId },
           { owner: { $exists: true } }
+        ],
+      },
+      {
+        $and: [
+          { invited: this.userId },
+          { invited: { $exists: true } }
         ]
       }
     ]
-- 
2.7.4


From c0c19e14d2cdaa8019726ff3c123e404736d6fc0 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Wed, 3 Feb 2016 23:00:12 +0200
Subject: [PATCH 115/259] Step 14.9: add a "reply" method

---
 collections/methods.ts | 45 +++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 45 insertions(+)

diff --git a/collections/methods.ts b/collections/methods.ts
index 28e5487..d11acab 100644
--- a/collections/methods.ts
+++ b/collections/methods.ts
@@ -43,5 +43,50 @@ Meteor.methods({
         });
       }
     }
+  },
+  reply: function(partyId: string, rsvp: string) {
+    check(partyId, String);
+    check(rsvp, String);
+
+    if (!this.userId)
+      throw new Meteor.Error('403', 'You must be logged-in to reply');
+
+    if (['yes', 'no', 'maybe'].indexOf(rsvp) === -1)
+      throw new Meteor.Error('400', 'Invalid RSVP');
+
+    let party = Parties.findOne({ _id: partyId });
+
+    if (!party)
+      throw new Meteor.Error('404', 'No such party');
+
+    if (party.owner === this.userId)
+      throw new Meteor.Error('500', 'You are the owner!');
+
+    if (!party.public && (!party.invited || party.invited.indexOf(this.userId) == -1))
+      throw new Meteor.Error('403', 'No such party'); // its private, but let's not tell this to the user
+
+    let rsvpIndex = party.rsvps ? party.rsvps.findIndex((rsvp) => rsvp.userId === this.userId) : -1;
+
+    if (rsvpIndex !== -1) {
+      // update existing rsvp entry
+      if (Meteor.isServer) {
+        // update the appropriate rsvp entry with $
+        Parties.update(
+          { _id: partyId, 'rsvps.userId': this.userId },
+          { $set: { 'rsvps.$.response': rsvp } });
+      } else {
+        // minimongo doesn't yet support $ in modifier. as a temporary
+        // workaround, make a modifier that uses an index. this is
+        // safe on the client since there's only one thread.
+        let modifier = { $set: {} };
+        modifier.$set['rsvps.' + rsvpIndex + '.response'] = rsvp;
+
+        Parties.update(partyId, modifier);
+      }
+    } else {
+      // add new rsvp entry
+      Parties.update(partyId,
+        { $push: { rsvps: { userId: this.userId, response: rsvp } } });
+    }
   }
 });
\ No newline at end of file
-- 
2.7.4


From a2e4b168508c4e614fce1cfbff4c3aaa7e20f56c Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Wed, 3 Feb 2016 23:00:50 +0200
Subject: [PATCH 116/259] Step 14.10: update the party typings

---
 typings/party.d.ts | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/typings/party.d.ts b/typings/party.d.ts
index ef626f1..e22afd5 100644
--- a/typings/party.d.ts
+++ b/typings/party.d.ts
@@ -6,4 +6,10 @@ interface Party {
   owner?: string;
   public: boolean;
   invited?: Array<string>;
+  rsvps?: Array<RSVP>;
+}
+
+interface RSVP {
+  userId: string;
+  response: string;
 }
\ No newline at end of file
-- 
2.7.4


From 8b3cea76ba07595415b780ebf2b394508e61f11e Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Wed, 3 Feb 2016 23:01:23 +0200
Subject: [PATCH 117/259] Step 14.11: update PartyDetails view with the three
 response buttons

---
 client/imports/party-details/party-details.html | 7 +++++++
 1 file changed, 7 insertions(+)

diff --git a/client/imports/party-details/party-details.html b/client/imports/party-details/party-details.html
index bc2f1ce..c8b67d4 100644
--- a/client/imports/party-details/party-details.html
+++ b/client/imports/party-details/party-details.html
@@ -19,3 +19,10 @@
     <button (click)="invite(user)">Invite</button>
   </li>
 </ul>
+
+<div>
+  <h2>Reply to the invitation</h2>
+  <input type="button" value="I'm going!" (click)="reply('yes')">
+  <input type="button" value="Maybe" (click)="reply('maybe')">
+  <input type="button" value="No" (click)="reply('no')">
+</div>
-- 
2.7.4


From 264d1cf3c62f08293f05d58f835c4fee6e994d19 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Wed, 3 Feb 2016 23:02:06 +0200
Subject: [PATCH 118/259] Step 14.12: handle reply events in the PartyDetails
 component

---
 client/imports/party-details/party-details.ts | 11 +++++++++++
 1 file changed, 11 insertions(+)

diff --git a/client/imports/party-details/party-details.ts b/client/imports/party-details/party-details.ts
index d47bb96..b8004a4 100644
--- a/client/imports/party-details/party-details.ts
+++ b/client/imports/party-details/party-details.ts
@@ -75,4 +75,15 @@ export class PartyDetails extends MeteorComponent {
       alert('User successfully invited.');
     });
   }
+
+  reply(rsvp: string) {
+    this.call('reply', this.party._id, rsvp, (error) => {
+      if (error) {
+        alert(`Failed to reply due to ${error}`);
+      }
+      else {
+        alert('You successfully replied.');
+      }
+    });
+  }
 }
\ No newline at end of file
-- 
2.7.4


From 2a4c5c14601d2abce33c5f2af22b638ba7a5faf9 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Wed, 3 Feb 2016 23:21:50 +0200
Subject: [PATCH 119/259] Step 14.13: add a new response counting pipe

---
 client/imports/pipes/pipes.ts | 33 ++++++++++++++++++++++++++++++++-
 1 file changed, 32 insertions(+), 1 deletion(-)

diff --git a/client/imports/pipes/pipes.ts b/client/imports/pipes/pipes.ts
index b7b6f2b..ddce20e 100644
--- a/client/imports/pipes/pipes.ts
+++ b/client/imports/pipes/pipes.ts
@@ -1,6 +1,8 @@
 import 'reflect-metadata';
 import { Pipe } from '@angular/core';
 import { Meteor } from 'meteor/meteor';
+import { Parties } from '../../../collections/parties.ts';
+import { MeteorComponent } from 'angular2-meteor';
 
 @Pipe({
   name: 'displayName'
@@ -21,4 +23,33 @@ export class DisplayName {
 
     return '';
   }
-}
\ No newline at end of file
+}
+
+
+@Pipe({
+  name: 'rsvp',
+  pure: false
+})
+export class RsvpPipe extends MeteorComponent {
+  init: boolean = false;
+  total: number = 0;
+
+  transform(party: Party, type: string): number {
+    if (!type) {
+      return 0;
+    }
+
+    if (!this.init) {
+      this.autorun(() => {
+        const found = Parties.findOne(party._id);
+        if (found) {
+          this.total = found.rsvps ?
+            found.rsvps.filter(rsvp => rsvp.response === type).length : 0;
+        }
+      }, true);
+      this.init = true;
+    }
+
+    return this.total;
+  }
+}
-- 
2.7.4


From 793b6ba013cb10164aff69cdef157796daf291b7 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Wed, 3 Feb 2016 23:34:41 +0200
Subject: [PATCH 120/259] Step 14.14: display response statistics in the list

---
 client/imports/parties-list/parties-list.html | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/client/imports/parties-list/parties-list.html b/client/imports/parties-list/parties-list.html
index aeaa53d..224e87c 100644
--- a/client/imports/parties-list/parties-list.html
+++ b/client/imports/parties-list/parties-list.html
@@ -16,6 +16,12 @@
       <p>{{party.description}}</p>
       <p>{{party.location}}</p>
       <button (click)="removeParty(party)">X</button>
+      <div>
+        Who is coming:
+        Yes - {{party | rsvp:'yes'}}
+        Maybe - {{party | rsvp:'maybe'}}
+        No - {{party | rsvp:'no'}}
+      </div>
     </li>
   </ul>
   <pagination-controls (change)="onPageChanged($event.page)"></pagination-controls>
-- 
2.7.4


From 0a085ee6f3ce08ea344093a9a5ab73b6c0228643 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Wed, 3 Feb 2016 23:34:59 +0200
Subject: [PATCH 121/259] Step 14.15: import the RsvpPipe pipe

---
 client/imports/parties-list/parties-list.ts | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/client/imports/parties-list/parties-list.ts b/client/imports/parties-list/parties-list.ts
index 4724be3..d91393b 100644
--- a/client/imports/parties-list/parties-list.ts
+++ b/client/imports/parties-list/parties-list.ts
@@ -8,13 +8,14 @@ import { MeteorComponent } from 'angular2-meteor';
 import { ReactiveVar } from 'meteor/reactive-var';
 import { Counts } from 'meteor/tmeasday:publish-counts';
 import { PaginationService, PaginatePipe, PaginationControlsCmp } from 'angular2-pagination';
+import { RsvpPipe } from '../pipes/pipes.ts';
 
 @Component({
   selector: 'parties-list',
   viewProviders: [PaginationService],
   templateUrl: '/client/imports/parties-list/parties-list.html',
   directives: [PartiesForm, ROUTER_DIRECTIVES, LoginButtons, PaginationControlsCmp],
-  pipes: [PaginatePipe]
+  pipes: [PaginatePipe, RsvpPipe]
 })
 export class PartiesList extends MeteorComponent{
   parties: Mongo.Cursor<Party>;
-- 
2.7.4


From 7899be087d135b19d9371c22f8218fd8e586df35 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Wed, 3 Feb 2016 23:58:58 +0200
Subject: [PATCH 122/259] Step 15.1: inject Meteor user and add isOwner method

---
 client/imports/parties-list/parties-list.ts | 13 ++++++++++++-
 1 file changed, 12 insertions(+), 1 deletion(-)

diff --git a/client/imports/parties-list/parties-list.ts b/client/imports/parties-list/parties-list.ts
index d91393b..6e6e174 100644
--- a/client/imports/parties-list/parties-list.ts
+++ b/client/imports/parties-list/parties-list.ts
@@ -3,12 +3,13 @@ import { Parties }     from '../../../collections/parties';
 import { PartiesForm } from '../parties-form/parties-form';
 import { Mongo }       from 'meteor/mongo';
 import { ROUTER_DIRECTIVES }  from '@angular/router';
-import { LoginButtons } from 'angular2-meteor-accounts-ui';
+import { LoginButtons, InjectUser } from 'angular2-meteor-accounts-ui';
 import { MeteorComponent } from 'angular2-meteor';
 import { ReactiveVar } from 'meteor/reactive-var';
 import { Counts } from 'meteor/tmeasday:publish-counts';
 import { PaginationService, PaginatePipe, PaginationControlsCmp } from 'angular2-pagination';
 import { RsvpPipe } from '../pipes/pipes.ts';
+import { Meteor } from 'meteor/meteor';
 
 @Component({
   selector: 'parties-list',
@@ -17,6 +18,7 @@ import { RsvpPipe } from '../pipes/pipes.ts';
   directives: [PartiesForm, ROUTER_DIRECTIVES, LoginButtons, PaginationControlsCmp],
   pipes: [PaginatePipe, RsvpPipe]
 })
+@InjectUser()
 export class PartiesList extends MeteorComponent{
   parties: Mongo.Cursor<Party>;
   pageSize: number = 10;
@@ -24,6 +26,7 @@ export class PartiesList extends MeteorComponent{
   nameOrder: ReactiveVar<number> = new ReactiveVar<number>(1);
   partiesSize: number = 0;
   location: ReactiveVar<string> = new ReactiveVar<string>(null);
+  user: Meteor.User;
 
   constructor() {
     super();
@@ -61,4 +64,12 @@ export class PartiesList extends MeteorComponent{
   onPageChanged(page: number) {
     this.curPage.set(page);
   }
+
+  isOwner(party: Party): boolean {
+    if (this.user) {
+      return this.user._id === party.owner;
+    }
+
+    return false;
+  }
 }
-- 
2.7.4


From 637018b495af587f8d400eb9f3d910329b4b7a87 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 4 Feb 2016 00:00:15 +0200
Subject: [PATCH 123/259] Step 15.2: use the hidden attribute in the
 PartiesList template

---
 client/imports/parties-list/parties-list.html | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/client/imports/parties-list/parties-list.html b/client/imports/parties-list/parties-list.html
index 224e87c..5c62e53 100644
--- a/client/imports/parties-list/parties-list.html
+++ b/client/imports/parties-list/parties-list.html
@@ -1,5 +1,5 @@
 <div>
-  <parties-form style="float: left"></parties-form>
+  <parties-form [hidden]="!user" style="float: left"></parties-form>
   <input type="text" #searchtext placeholder="Search by Location">
   <button type="button" (click)="search(searchtext.value)">Search</button>
   <login-buttons></login-buttons>
@@ -15,7 +15,7 @@
       <a [routerLink]="['/party', party._id]">{{party.name}}</a>
       <p>{{party.description}}</p>
       <p>{{party.location}}</p>
-      <button (click)="removeParty(party)">X</button>
+      <button [hidden]="!isOwner(party)"  (click)="removeParty(party)">X</button>
       <div>
         Who is coming:
         Yes - {{party | rsvp:'yes'}}
-- 
2.7.4


From dea7bbcdb08e2ab303ec3db0292a7437dd22979f Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 4 Feb 2016 00:08:45 +0200
Subject: [PATCH 124/259] Step 15.3: add isOwner property into the PartyDetails

---
 client/imports/party-details/party-details.ts | 12 +++++++++++-
 1 file changed, 11 insertions(+), 1 deletion(-)

diff --git a/client/imports/party-details/party-details.ts b/client/imports/party-details/party-details.ts
index b8004a4..b75eaa4 100644
--- a/client/imports/party-details/party-details.ts
+++ b/client/imports/party-details/party-details.ts
@@ -2,7 +2,7 @@ import { Component } from '@angular/core';
 import { ActivatedRoute, ROUTER_DIRECTIVES } from '@angular/router';
 import {Parties} from '../../../collections/parties.ts';
 import { Meteor } from 'meteor/meteor';
-import { RequireUser } from 'angular2-meteor-accounts-ui';
+import { RequireUser, InjectUser } from 'angular2-meteor-accounts-ui';
 import { MeteorComponent } from 'angular2-meteor';
 import { DisplayName } from '../pipes/pipes.ts';
 import { Mongo } from 'meteor/mongo';
@@ -14,10 +14,12 @@ import { Mongo } from 'meteor/mongo';
   pipes: [DisplayName]
 })
 @RequireUser()
+@InjectUser()
 export class PartyDetails extends MeteorComponent {
   partyId: string;
   party: Party;
   users: Mongo.Cursor<Object>;
+  user: Meteor.User;
 
   constructor(private route: ActivatedRoute) {
     super();
@@ -86,4 +88,12 @@ export class PartyDetails extends MeteorComponent {
       }
     });
   }
+
+  get isOwner(): boolean {
+    if (this.party && this.user) {
+      return this.user._id === this.party.owner;
+    }
+
+    return false;
+  }
 }
\ No newline at end of file
-- 
2.7.4


From 3687ea0c02299348d0deb871b27461bae8f6df99 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 4 Feb 2016 00:10:07 +0200
Subject: [PATCH 125/259] Step 15.4: add disable attribute bindings

---
 client/imports/party-details/party-details.html | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/client/imports/party-details/party-details.html b/client/imports/party-details/party-details.html
index c8b67d4..278ffd2 100644
--- a/client/imports/party-details/party-details.html
+++ b/client/imports/party-details/party-details.html
@@ -1,14 +1,14 @@
 <form (submit)="saveParty(party)" *ngIf="party">
   <label>Name</label>
-  <input type="text" [(ngModel)]="party.name">
+  <input [disabled]="!isOwner" type="text" [(ngModel)]="party.name">
 
   <label>Description</label>
-  <input type="text" [(ngModel)]="party.description">
+  <input [disabled]="!isOwner" type="text" [(ngModel)]="party.description">
 
   <label>Location</label>
-  <input type="text" [(ngModel)]="party.location">
+  <input [disabled]="!isOwner" type="text" [(ngModel)]="party.location">
 
-  <button type="submit">Save</button>
+  <button [disabled]="!isOwner" type="submit">Save</button>
   <button [routerLink]="['/']">Cancel</button>
 </form>
 
-- 
2.7.4


From 039e9dd3b96f99630c972f1bfb3a1b2ee0136814 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 4 Feb 2016 00:11:12 +0200
Subject: [PATCH 126/259] Step 15.5: add isPublic and isInvited properties

---
 client/imports/party-details/party-details.ts | 17 +++++++++++++++++
 1 file changed, 17 insertions(+)

diff --git a/client/imports/party-details/party-details.ts b/client/imports/party-details/party-details.ts
index b75eaa4..73cae69 100644
--- a/client/imports/party-details/party-details.ts
+++ b/client/imports/party-details/party-details.ts
@@ -96,4 +96,21 @@ export class PartyDetails extends MeteorComponent {
 
     return false;
   }
+
+  get isPublic(): boolean {
+    if (this.party) {
+      return this.party.public;
+    }
+
+    return false;
+  }
+
+  get isInvited(): boolean {
+    if (this.party && this.user) {
+      let invited = this.party.invited || [];
+      return invited.indexOf(this.user._id) !== -1;
+    }
+
+    return false;
+  }
 }
\ No newline at end of file
-- 
2.7.4


From 608346a731207ca974d151e340c5b0582d2663a3 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 4 Feb 2016 00:32:36 +0200
Subject: [PATCH 127/259] Step 15.6: make use of the properties in the template

---
 client/imports/party-details/party-details.html | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/client/imports/party-details/party-details.html b/client/imports/party-details/party-details.html
index 278ffd2..0cca495 100644
--- a/client/imports/party-details/party-details.html
+++ b/client/imports/party-details/party-details.html
@@ -12,7 +12,7 @@
   <button [routerLink]="['/']">Cancel</button>
 </form>
 
-<ul>
+<ul *ngIf="isOwner || isPublic">
   Users to invite:
   <li *ngFor="let user of users">
     <div>{{ user | displayName }}</div>
@@ -20,7 +20,7 @@
   </li>
 </ul>
 
-<div>
+<div *ngIf="isInvited">
   <h2>Reply to the invitation</h2>
   <input type="button" value="I'm going!" (click)="reply('yes')">
   <input type="button" value="Maybe" (click)="reply('maybe')">
-- 
2.7.4


From 832bccb4fc433a74380db93dff37353bfc96ec3c Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 4 Feb 2016 00:33:40 +0200
Subject: [PATCH 128/259] Step 16.1: extend party location with lat and lng
 coordinates

---
 typings/party.d.ts | 6 +++++-
 1 file changed, 5 insertions(+), 1 deletion(-)

diff --git a/typings/party.d.ts b/typings/party.d.ts
index e22afd5..2872814 100644
--- a/typings/party.d.ts
+++ b/typings/party.d.ts
@@ -2,9 +2,13 @@ interface Party {
   _id?: string;
   name: string;
   description?: string;
-  location: string;
   owner?: string;
   public: boolean;
+  location: {
+    name: string;
+    lat?: number;
+    lng?: number;
+  };
   invited?: Array<string>;
   rsvps?: Array<RSVP>;
 }
-- 
2.7.4


From 1b05b0c808e38e382d584d0f47b9e7a5692a0826 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 4 Feb 2016 00:34:28 +0200
Subject: [PATCH 129/259] Step 16.2: change initial parties accordingly

---
 server/load-parties.ts | 18 ++++++++++++------
 1 file changed, 12 insertions(+), 6 deletions(-)

diff --git a/server/load-parties.ts b/server/load-parties.ts
index 68adcf7..b0e63e6 100644
--- a/server/load-parties.ts
+++ b/server/load-parties.ts
@@ -7,20 +7,26 @@ export function loadParties() {
       {
         'name': 'Dubstep-Free Zone',
         'description': 'Can we please just for an evening not listen to dubstep.',
-        'location': 'Palo Alto',
-        'public': true
+        'public': true,
+        'location': {
+          name: 'Palo Alto'
+        }
       },
       {
         'name': 'All dubstep all the time',
         'description': 'Get it on!',
-        'location': 'Palo Alto',
-        'public': true
+        'public': true,
+        'location': {
+          name: 'Palo Alto'
+        }
       },
       {
         'name': 'Savage lounging',
         'description': 'Leisure suit required. And only fiercest manners.',
-        'location': 'San Francisco',
-        'public': false
+        'public': false,
+        'location': {
+          name: 'Palo Alto'
+        }
       }
     ];
 
-- 
2.7.4


From 0060a7e4f99834eb6c12a14bc8565f997d3963eb Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 4 Feb 2016 00:35:21 +0200
Subject: [PATCH 130/259] Step 16.3: change party creation component

---
 client/imports/parties-form/parties-form.ts | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/client/imports/parties-form/parties-form.ts b/client/imports/parties-form/parties-form.ts
index 1e89ddb..74a19a1 100644
--- a/client/imports/parties-form/parties-form.ts
+++ b/client/imports/parties-form/parties-form.ts
@@ -28,7 +28,9 @@ export class PartiesForm {
         Parties.insert(<Party>{
           name: party.name,
           description: party.description,
-          location: party.location,
+          location: {
+            name: party.location
+          },
           'public': party.public,
           owner: Meteor.userId()
         });
-- 
2.7.4


From dabad78bb26a80059d1501cfbdd476a6f8f143db Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 4 Feb 2016 00:36:06 +0200
Subject: [PATCH 131/259] Step 16.4: reflect type changes in the parties search

---
 server/parties.ts | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/server/parties.ts b/server/parties.ts
index 2a44e5e..88cbd96 100644
--- a/server/parties.ts
+++ b/server/parties.ts
@@ -27,7 +27,7 @@ function buildQuery(partyId: string, location: string): Object {
 
   let searchRegEx = { '$regex': '.*' + (location || '') + '.*', '$options': 'i' };
 
-  return { $and: [{ location: searchRegEx }, isAvailable] };
+  return { $and: [{ 'location.name': searchRegEx }, isAvailable] };
 }
 
 Meteor.publish('parties', function(options: Object, location: string) {
-- 
2.7.4


From d2eb118707f892e8898773567b7a12948dd12b4f Mon Sep 17 00:00:00 2001
From: Uri Goldshtein <uri.goldshtein@gmail.com>
Date: Sat, 14 May 2016 18:34:10 +0300
Subject: [PATCH 132/259] Step 16.5: add angular2 google maps package

---
 package.json | 1 +
 1 file changed, 1 insertion(+)

diff --git a/package.json b/package.json
index 997a908..e560f63 100644
--- a/package.json
+++ b/package.json
@@ -11,6 +11,7 @@
     "@angular/platform-browser": "^2.0.0-rc.4",
     "@angular/platform-browser-dynamic": "^2.0.0-rc.4",
     "@angular/router": "3.0.0-beta.2",
+    "angular2-google-maps": "0.12.0",
     "angular2-meteor": "^0.5.6",
     "angular2-meteor-accounts-ui": "0.5.0",
     "angular2-meteor-auto-bootstrap": "^0.5.6",
-- 
2.7.4


From 2d108abc2fa0f704f381f226f8f715fd002d8d17 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 4 Feb 2016 00:40:08 +0200
Subject: [PATCH 133/259] Step 16.6: import and install maps providers globally

---
 client/app.ts | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/client/app.ts b/client/app.ts
index f59e04d..6e184a6 100644
--- a/client/app.ts
+++ b/client/app.ts
@@ -6,6 +6,7 @@ import { APP_BASE_HREF } from '@angular/common';
 import { PartiesList } from './imports/parties-list/parties-list.ts';
 import { PartyDetails } from './imports/party-details/party-details.ts';
 import '../collections/methods.ts';
+import {GOOGLE_MAPS_PROVIDERS} from 'angular2-google-maps/core';
 
 @Component({
   selector: 'app',
@@ -23,4 +24,4 @@ const APP_ROUTER_PROVIDERS = [
   provideRouter(routes)
 ];
 
-bootstrap(Socially, [APP_ROUTER_PROVIDERS, provide(APP_BASE_HREF, { useValue: '/' })]);
+bootstrap(Socially, [APP_ROUTER_PROVIDERS, GOOGLE_MAPS_PROVIDERS, provide(APP_BASE_HREF, { useValue: '/' })]);
-- 
2.7.4


From a8906f733020fb80e326942f3897cb21baa1e455 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 4 Feb 2016 00:41:07 +0200
Subject: [PATCH 134/259] Step 16.7: add maps markup to the PartyDetails
 template

---
 client/imports/party-details/party-details.html | 14 +++++++++++++-
 1 file changed, 13 insertions(+), 1 deletion(-)

diff --git a/client/imports/party-details/party-details.html b/client/imports/party-details/party-details.html
index 0cca495..ba4c29a 100644
--- a/client/imports/party-details/party-details.html
+++ b/client/imports/party-details/party-details.html
@@ -6,7 +6,7 @@
   <input [disabled]="!isOwner" type="text" [(ngModel)]="party.description">
 
   <label>Location</label>
-  <input [disabled]="!isOwner" type="text" [(ngModel)]="party.location">
+  <input [disabled]="!isOwner" type="text" [(ngModel)]="party.location.name">
 
   <button [disabled]="!isOwner" type="submit">Save</button>
   <button [routerLink]="['/']">Cancel</button>
@@ -26,3 +26,15 @@
   <input type="button" value="Maybe" (click)="reply('maybe')">
   <input type="button" value="No" (click)="reply('no')">
 </div>
+
+<sebm-google-map
+        [latitude]="lat || centerLat"
+        [longitude]="lng || centerLng"
+        [zoom]="8"
+        (mapClick)="mapClicked($event)">
+  <sebm-google-map-marker
+          *ngIf="lat && lng"
+          [latitude]="lat"
+          [longitude]="lng">
+  </sebm-google-map-marker>
+</sebm-google-map>
-- 
2.7.4


From b665c7c5dea82f6ca4594d76b6a6d2eeb02d8b09 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 4 Feb 2016 00:42:28 +0200
Subject: [PATCH 135/259] Step 16.8: add maps logic to the PartyDetails
 component

---
 client/imports/party-details/party-details.ts | 21 +++++++++++++++++++--
 1 file changed, 19 insertions(+), 2 deletions(-)

diff --git a/client/imports/party-details/party-details.ts b/client/imports/party-details/party-details.ts
index 73cae69..586b539 100644
--- a/client/imports/party-details/party-details.ts
+++ b/client/imports/party-details/party-details.ts
@@ -6,11 +6,12 @@ import { RequireUser, InjectUser } from 'angular2-meteor-accounts-ui';
 import { MeteorComponent } from 'angular2-meteor';
 import { DisplayName } from '../pipes/pipes.ts';
 import { Mongo } from 'meteor/mongo';
+import {GOOGLE_MAPS_DIRECTIVES, MouseEvent} from 'angular2-google-maps/core';
 
 @Component({
   selector: 'party-details',
   templateUrl: '/client/imports/party-details/party-details.html',
-  directives: [ROUTER_DIRECTIVES]
+  directives: [ROUTER_DIRECTIVES, GOOGLE_MAPS_DIRECTIVES],
   pipes: [DisplayName]
 })
 @RequireUser()
@@ -20,6 +21,9 @@ export class PartyDetails extends MeteorComponent {
   party: Party;
   users: Mongo.Cursor<Object>;
   user: Meteor.User;
+  // Default center Palo Alto coordinates.
+  centerLat: Number = 37.4292;
+  centerLng: Number = -122.1381;
 
   constructor(private route: ActivatedRoute) {
     super();
@@ -113,4 +117,17 @@ export class PartyDetails extends MeteorComponent {
 
     return false;
   }
-}
\ No newline at end of file
+
+  get lat(): Number {
+    return this.party && this.party.location.lat;
+  }
+
+  get lng(): Number {
+    return this.party && this.party.location.lng;
+  }
+
+  mapClicked($event: MouseEvent) {
+    this.party.location.lat = $event.coords.lat;
+    this.party.location.lng = $event.coords.lng;
+  }
+}
-- 
2.7.4


From 8f6ee3ebf68c43e9235dd5fa29b9d47172e4de80 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 4 Feb 2016 10:56:33 +0200
Subject: [PATCH 136/259] Step 16.9: create main CSS file and add maps styles
 there

---
 client/css/main.css  | 4 ++++
 client/css/main.scss | 7 ++++++-
 2 files changed, 10 insertions(+), 1 deletion(-)
 create mode 100644 client/css/main.css

diff --git a/client/css/main.css b/client/css/main.css
new file mode 100644
index 0000000..a5234b3
--- /dev/null
+++ b/client/css/main.css
@@ -0,0 +1,4 @@
+.sebm-google-map-container {
+    width: 400px;
+    height: 400px;
+}
\ No newline at end of file
diff --git a/client/css/main.scss b/client/css/main.scss
index a3dd324..9570b91 100644
--- a/client/css/main.scss
+++ b/client/css/main.scss
@@ -1,2 +1,7 @@
 @import "{}/node_modules/angular2-meteor-accounts-ui/build/login-buttons.scss";
-@import "{}/node_modules/angular2-pagination/build/pagination-controls-cmp.scss";
\ No newline at end of file
+@import "{}/node_modules/angular2-pagination/build/pagination-controls-cmp.scss";
+
+.sebm-google-map-container {
+  width: 400px;
+  height: 400px;
+}
\ No newline at end of file
-- 
2.7.4


From ea0704c3e3ffcc90ae8ff82c0469534d3a0a9128 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 4 Feb 2016 10:57:33 +0200
Subject: [PATCH 137/259] Step 16.10: add all parties locations on the map

---
 client/imports/parties-list/parties-list.html | 14 +++++++++++++-
 1 file changed, 13 insertions(+), 1 deletion(-)

diff --git a/client/imports/parties-list/parties-list.html b/client/imports/parties-list/parties-list.html
index 5c62e53..5150174 100644
--- a/client/imports/parties-list/parties-list.html
+++ b/client/imports/parties-list/parties-list.html
@@ -14,7 +14,7 @@
     <li *ngFor="let party of parties | paginate:{currentPage: 1, itemsPerPage: pageSize, totalItems: partiesSize}">
       <a [routerLink]="['/party', party._id]">{{party.name}}</a>
       <p>{{party.description}}</p>
-      <p>{{party.location}}</p>
+      <p>{{party.location.name}}</p>
       <button [hidden]="!isOwner(party)"  (click)="removeParty(party)">X</button>
       <div>
         Who is coming:
@@ -24,5 +24,17 @@
       </div>
     </li>
   </ul>
+  <sebm-google-map
+          [latitude]="0"
+          [longitude]="0"
+          [zoom]="1">
+    <div *ngFor="let party of parties">
+      <sebm-google-map-marker
+              *ngIf="party.location.lat"
+              [latitude]="party.location.lat"
+              [longitude]="party.location.lng">
+      </sebm-google-map-marker>
+    </div>
+  </sebm-google-map>
   <pagination-controls (change)="onPageChanged($event.page)"></pagination-controls>
 </div>
-- 
2.7.4


From 73382ad392741beeee00f04830aa42ba4e00bc50 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 4 Feb 2016 10:58:13 +0200
Subject: [PATCH 138/259] Step 16.11: import maps dependencies in the
 PartiesList

---
 client/imports/parties-list/parties-list.ts | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/client/imports/parties-list/parties-list.ts b/client/imports/parties-list/parties-list.ts
index 6e6e174..d635119 100644
--- a/client/imports/parties-list/parties-list.ts
+++ b/client/imports/parties-list/parties-list.ts
@@ -10,12 +10,13 @@ import { Counts } from 'meteor/tmeasday:publish-counts';
 import { PaginationService, PaginatePipe, PaginationControlsCmp } from 'angular2-pagination';
 import { RsvpPipe } from '../pipes/pipes.ts';
 import { Meteor } from 'meteor/meteor';
+import {GOOGLE_MAPS_DIRECTIVES} from 'angular2-google-maps/core';
 
 @Component({
   selector: 'parties-list',
   viewProviders: [PaginationService],
   templateUrl: '/client/imports/parties-list/parties-list.html',
-  directives: [PartiesForm, ROUTER_DIRECTIVES, LoginButtons, PaginationControlsCmp],
+  directives: [GOOGLE_MAPS_DIRECTIVES, PartiesForm, ROUTER_DIRECTIVES, LoginButtons, PaginationControlsCmp],
   pipes: [PaginatePipe, RsvpPipe]
 })
 @InjectUser()
-- 
2.7.4


From 5b81abf5e5f968072779b1b7efcb463a2d4d1828 Mon Sep 17 00:00:00 2001
From: Uri Goldshtein <uri.goldshtein@gmail.com>
Date: Sat, 14 May 2016 19:17:38 +0300
Subject: [PATCH 139/259] Step 17.1: Add bootstrap package to the project

---
 package.json | 1 +
 1 file changed, 1 insertion(+)

diff --git a/package.json b/package.json
index e560f63..f5604b6 100644
--- a/package.json
+++ b/package.json
@@ -17,6 +17,7 @@
     "angular2-meteor-auto-bootstrap": "^0.5.6",
     "angular2-meteor-polyfills": "^0.1.1",
     "angular2-pagination": "0.2.1",
+    "bootstrap": "4.0.0-alpha.2",
     "es6-shim": "^0.35.1",
     "meteor-node-stubs": "^0.2.3",
     "reflect-metadata": "^0.1.2",
-- 
2.7.4


From 6460f56c3017d64d8629a97cbfd2e06fdcbb26fb Mon Sep 17 00:00:00 2001
From: Uri Goldshtein <uri.goldshtein@gmail.com>
Date: Sat, 14 May 2016 19:20:26 +0300
Subject: [PATCH 140/259] Step 17.2: Import bootstrap style into the main style
 file

---
 client/css/main.scss | 1 +
 1 file changed, 1 insertion(+)

diff --git a/client/css/main.scss b/client/css/main.scss
index 9570b91..d858488 100644
--- a/client/css/main.scss
+++ b/client/css/main.scss
@@ -1,5 +1,6 @@
 @import "{}/node_modules/angular2-meteor-accounts-ui/build/login-buttons.scss";
 @import "{}/node_modules/angular2-pagination/build/pagination-controls-cmp.scss";
+@import "{}/node_modules/bootstrap/scss/bootstrap.scss";
 
 .sebm-google-map-container {
   width: 400px;
-- 
2.7.4


From 0e0df5d399302c842f294a83c67f213d46d1fc9c Mon Sep 17 00:00:00 2001
From: dotansimha <dotansimha@gmail.com>
Date: Fri, 6 May 2016 21:57:52 +0300
Subject: [PATCH 141/259] Step 17.3: Add bootstrap navbar

---
 client/app.html | 7 ++++++-
 1 file changed, 6 insertions(+), 1 deletion(-)

diff --git a/client/app.html b/client/app.html
index 90c6b64..b3c49f0 100644
--- a/client/app.html
+++ b/client/app.html
@@ -1 +1,6 @@
-<router-outlet></router-outlet>
\ No newline at end of file
+<nav class="navbar navbar-light bg-faded">
+  <a class="navbar-brand" href="#">Socially</a>
+</nav>
+<div class="container-fluid">
+  <router-outlet></router-outlet>
+</div>
\ No newline at end of file
-- 
2.7.4


From d4f4a67992394665b8a026633f1d2f162a83b4ed Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 4 Feb 2016 13:05:49 +0200
Subject: [PATCH 142/259] Step 17.4: Remove the login buttons from the parties
 list component

---
 client/imports/parties-list/parties-list.html | 1 -
 client/imports/parties-list/parties-list.ts   | 4 ++--
 2 files changed, 2 insertions(+), 3 deletions(-)

diff --git a/client/imports/parties-list/parties-list.html b/client/imports/parties-list/parties-list.html
index 5150174..1fad728 100644
--- a/client/imports/parties-list/parties-list.html
+++ b/client/imports/parties-list/parties-list.html
@@ -2,7 +2,6 @@
   <parties-form [hidden]="!user" style="float: left"></parties-form>
   <input type="text" #searchtext placeholder="Search by Location">
   <button type="button" (click)="search(searchtext.value)">Search</button>
-  <login-buttons></login-buttons>
   <h1>Parties:</h1>
   <div>
     <select #sort (change)="changeSortOrder(sort.value)">
diff --git a/client/imports/parties-list/parties-list.ts b/client/imports/parties-list/parties-list.ts
index d635119..7ddaed3 100644
--- a/client/imports/parties-list/parties-list.ts
+++ b/client/imports/parties-list/parties-list.ts
@@ -3,7 +3,7 @@ import { Parties }     from '../../../collections/parties';
 import { PartiesForm } from '../parties-form/parties-form';
 import { Mongo }       from 'meteor/mongo';
 import { ROUTER_DIRECTIVES }  from '@angular/router';
-import { LoginButtons, InjectUser } from 'angular2-meteor-accounts-ui';
+import { InjectUser } from 'angular2-meteor-accounts-ui';
 import { MeteorComponent } from 'angular2-meteor';
 import { ReactiveVar } from 'meteor/reactive-var';
 import { Counts } from 'meteor/tmeasday:publish-counts';
@@ -16,7 +16,7 @@ import {GOOGLE_MAPS_DIRECTIVES} from 'angular2-google-maps/core';
   selector: 'parties-list',
   viewProviders: [PaginationService],
   templateUrl: '/client/imports/parties-list/parties-list.html',
-  directives: [GOOGLE_MAPS_DIRECTIVES, PartiesForm, ROUTER_DIRECTIVES, LoginButtons, PaginationControlsCmp],
+  directives: [GOOGLE_MAPS_DIRECTIVES, PartiesForm, ROUTER_DIRECTIVES, PaginationControlsCmp],
   pipes: [PaginatePipe, RsvpPipe]
 })
 @InjectUser()
-- 
2.7.4


From 9c90e7e70039d0e0fb122ead38a078f2078202f8 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 4 Feb 2016 13:06:13 +0200
Subject: [PATCH 143/259] Step 17.5: Add the login buttons to the app component

---
 client/app.html | 1 +
 1 file changed, 1 insertion(+)

diff --git a/client/app.html b/client/app.html
index b3c49f0..dffc2ea 100644
--- a/client/app.html
+++ b/client/app.html
@@ -1,5 +1,6 @@
 <nav class="navbar navbar-light bg-faded">
   <a class="navbar-brand" href="#">Socially</a>
+  <login-buttons class="pull-right"></login-buttons>
 </nav>
 <div class="container-fluid">
   <router-outlet></router-outlet>
-- 
2.7.4


From 0b450838c10e0b728fc9fe6c80a3fd48fe5cf9a0 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 4 Feb 2016 13:06:25 +0200
Subject: [PATCH 144/259] Step 17.6: Import LoginButtons

---
 client/app.ts | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/client/app.ts b/client/app.ts
index 6e184a6..cae2863 100644
--- a/client/app.ts
+++ b/client/app.ts
@@ -7,11 +7,12 @@ import { PartiesList } from './imports/parties-list/parties-list.ts';
 import { PartyDetails } from './imports/party-details/party-details.ts';
 import '../collections/methods.ts';
 import {GOOGLE_MAPS_PROVIDERS} from 'angular2-google-maps/core';
+import {LoginButtons} from 'angular2-meteor-accounts-ui';
 
 @Component({
   selector: 'app',
   templateUrl: '/client/app.html',
-  directives: [ROUTER_DIRECTIVES]
+  directives: [ROUTER_DIRECTIVES, LoginButtons]
 })
 class Socially {}
 
-- 
2.7.4


From 6a8c792517687049d5d4887fae28d9464c993433 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 4 Feb 2016 13:07:00 +0200
Subject: [PATCH 145/259] Step 17.7: Add fonts and font awesome

---
 client/index.html | 5 +++++
 1 file changed, 5 insertions(+)

diff --git a/client/index.html b/client/index.html
index 2662e56..8a56f1a 100644
--- a/client/index.html
+++ b/client/index.html
@@ -1,3 +1,8 @@
+<head>
+  <meta name="viewport" content="width=device-width, initial-scale=1">
+  <link href='http://fonts.googleapis.com/css?family=Muli:400,300' rel='stylesheet' type='text/css'>
+  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css">
+</head>
 <body>
   <app></app>
 </body>
\ No newline at end of file
-- 
2.7.4


From 67e556ded20966aa482a4e77b963f26ab340e518 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 4 Feb 2016 14:24:13 +0200
Subject: [PATCH 146/259] Step 17.8: Update the add new party form layout

---
 client/imports/parties-form/parties-form.html | 30 ++++++++++++++++++---------
 1 file changed, 20 insertions(+), 10 deletions(-)

diff --git a/client/imports/parties-form/parties-form.html b/client/imports/parties-form/parties-form.html
index 1dc86c7..a5d11ef 100644
--- a/client/imports/parties-form/parties-form.html
+++ b/client/imports/parties-form/parties-form.html
@@ -1,11 +1,21 @@
-<form [ngFormModel]="partiesForm" #f="ngForm" (submit)="addParty(f.value)">
-  <label>Name</label>
-  <input type="text" ngControl="name">
-  <label>Description</label>
-  <input type="text" ngControl="description">
-  <label>Location</label>
-  <input type="text" ngControl="location">
-  <button>Add</button>
-  <label>Public</label>
-  <input type="checkbox" ngControl="public">
+<form [ngFormModel]="partiesForm" #f="ngForm" (submit)="addParty(f.value)" class="form-inline">
+  <fieldset class="form-group">
+    <label for="partyName">Party name</label>
+    <input id="partyName" class="form-control" type="text" ngControl="name" placeholder="Party name" />
+
+    <label for="description">Description</label>
+    <input id="description" class="form-control" type="text" ngControl="description" placeholder="Description">
+
+    <label for="location_name">Location</label>
+    <input id="location_name" class="form-control" type="text" ngControl="location" placeholder="Location name">
+
+    <div class="checkbox">
+      <label>
+        <input type="checkbox" ngControl="public">
+        Public
+      </label>
+    </div>
+
+    <button type="submit" class="btn btn-primary">Add Party!</button>
+  </fieldset>
 </form>
\ No newline at end of file
-- 
2.7.4


From bf38b9ca05a1e6cf9af7cedb6f4dec725b27cd99 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 4 Feb 2016 14:24:29 +0200
Subject: [PATCH 147/259] Step 17.9: Update parties list layout

---
 client/imports/parties-list/parties-list.html | 129 +++++++++++++++++++-------
 1 file changed, 95 insertions(+), 34 deletions(-)

diff --git a/client/imports/parties-list/parties-list.html b/client/imports/parties-list/parties-list.html
index 1fad728..dabce49 100644
--- a/client/imports/parties-list/parties-list.html
+++ b/client/imports/parties-list/parties-list.html
@@ -1,39 +1,100 @@
-<div>
-  <parties-form [hidden]="!user" style="float: left"></parties-form>
-  <input type="text" #searchtext placeholder="Search by Location">
-  <button type="button" (click)="search(searchtext.value)">Search</button>
-  <h1>Parties:</h1>
-  <div>
-    <select #sort (change)="changeSortOrder(sort.value)">
+<div class="row">
+  <div class="col-md-12">
+    <div class="jumbotron">
+      <h3>Create a new party!</h3>
+      <parties-form [hidden]="!user"></parties-form>
+      <div [hidden]="user">You need to login to create new parties!</div>
+    </div>
+  </div>
+</div>
+<div class="row ma-filters">
+  <div class="col-md-6">
+    <h3>All Parties:</h3>
+    <form class="form-inline">
+      <input type="text" class="form-control" #searchtext placeholder="Search by Location">
+      <button type="button" class="btn btn-primary" (click)="search(searchtext.value)">Search</button>
+      Sort by name: <select class="form-control" #sort (change)="changeSortOrder(sort.value)">
       <option value="1" selected>Ascending</option>
       <option value="-1">Descending</option>
     </select>
+    </form>
+  </div>
+</div>
+<div class="row">
+  <div class="col-md-6">
+    <ul class="list-group">
+      <li class="list-group-item">
+        <pagination-controls (change)="onPageChanged($event.page)"></pagination-controls>
+      </li>
+      <li *ngFor="let party of parties | paginate:{currentPage: 1, itemsPerPage: pageSize, totalItems: partiesSize}"
+          class="list-group-item ma-party-item">
+        <div class="row">
+          <div class="col-sm-8">
+            <h2 class="ma-party-name">
+              <a [routerLink]="['/party', party._id]">{{party.name}}</a>
+            </h2>
+            @ {{party.location.name}}
+            <p class="ma-party-description">
+              {{party.description}}
+            </p>
+          </div>
+          <div class="col-sm-4">
+            <button class="btn btn-danger pull-right" [hidden]="!isOwner(party)" (click)="removeParty(party)"><i
+                    class="fa fa-times"></i></button>
+          </div>
+        </div>
+        <div class="row ma-party-item-bottom">
+          <div class="col-sm-4">
+            <div class="ma-rsvp-sum">
+              <div class="ma-rsvp-amount">
+                <div class="ma-amount">
+                  {{party | rsvp:'yes'}}
+                </div>
+                <div class="ma-rsvp-title">
+                  YES
+                </div>
+              </div>
+              <div class="ma-rsvp-amount">
+                <div class="ma-amount">
+                  {{party | rsvp:'maybe'}}
+                </div>
+                <div class="ma-rsvp-title">
+                  MAYBE
+                </div>
+              </div>
+              <div class="ma-rsvp-amount">
+                <div class="ma-amount">
+                  {{party | rsvp:'no'}}
+                </div>
+                <div class="ma-rsvp-title">
+                  NO
+                </div>
+              </div>
+            </div>
+          </div>
+        </div>
+      </li>
+      <li class="list-group-item">
+        <pagination-controls (change)="onPageChanged($event.page)"></pagination-controls>
+      </li>
+    </ul>
+  </div>
+  <div class="col-md-6">
+    <ul class="list-group">
+      <li class="list-group-item">
+        <sebm-google-map
+                [latitude]="0"
+                [longitude]="0"
+                [zoom]="1">
+          <div *ngFor="let party of parties">
+            <sebm-google-map-marker
+                    *ngIf="party.location.lat"
+                    [latitude]="party.location.lat"
+                    [longitude]="party.location.lng">
+            </sebm-google-map-marker>
+          </div>
+        </sebm-google-map>
+      </li>
+    </ul>
   </div>
-  <ul>
-    <li *ngFor="let party of parties | paginate:{currentPage: 1, itemsPerPage: pageSize, totalItems: partiesSize}">
-      <a [routerLink]="['/party', party._id]">{{party.name}}</a>
-      <p>{{party.description}}</p>
-      <p>{{party.location.name}}</p>
-      <button [hidden]="!isOwner(party)"  (click)="removeParty(party)">X</button>
-      <div>
-        Who is coming:
-        Yes - {{party | rsvp:'yes'}}
-        Maybe - {{party | rsvp:'maybe'}}
-        No - {{party | rsvp:'no'}}
-      </div>
-    </li>
-  </ul>
-  <sebm-google-map
-          [latitude]="0"
-          [longitude]="0"
-          [zoom]="1">
-    <div *ngFor="let party of parties">
-      <sebm-google-map-marker
-              *ngIf="party.location.lat"
-              [latitude]="party.location.lat"
-              [longitude]="party.location.lng">
-      </sebm-google-map-marker>
-    </div>
-  </sebm-google-map>
-  <pagination-controls (change)="onPageChanged($event.page)"></pagination-controls>
 </div>
-- 
2.7.4


From f387a7a08790af607c5fba9b9ad4212a70c02754 Mon Sep 17 00:00:00 2001
From: Uri Goldshtein <uri.goldshtein@gmail.com>
Date: Sat, 14 May 2016 19:44:24 +0300
Subject: [PATCH 148/259] Step 17.10: Add parties-list styles

---
 client/css/main.scss                           |  43 ++++++++-
 client/imports/parties-list/_parties-list.scss | 125 +++++++++++++++++++++++++
 2 files changed, 165 insertions(+), 3 deletions(-)
 create mode 100644 client/imports/parties-list/_parties-list.scss

diff --git a/client/css/main.scss b/client/css/main.scss
index d858488..6040abd 100644
--- a/client/css/main.scss
+++ b/client/css/main.scss
@@ -2,7 +2,44 @@
 @import "{}/node_modules/angular2-pagination/build/pagination-controls-cmp.scss";
 @import "{}/node_modules/bootstrap/scss/bootstrap.scss";
 
+$color1 : #2F2933;
+$color2 : #01A2A6;
+$color3 : #29D9C2;
+$color4 : #BDF271;
+$color5 : #FFFFA6;
+$color6 : #2F2933;
+$color7 : #FF6F69;
+
+html, body {
+  height: 100%;
+}
+
+body {
+  background-color: #f8f8f8;
+  font-family: 'Muli', sans-serif;
+}
+
 .sebm-google-map-container {
-  width: 400px;
-  height: 400px;
-}
\ No newline at end of file
+  width: 450px;
+  height: 450px;
+}
+
+.navbar {
+  background-color: #ffffff;
+  border-bottom: #eee 1px solid;
+  color: $color3;
+  font-family: 'Muli', sans-serif;
+  a {
+    color: $color3;
+    text-decoration: none !important;
+  }
+
+  .navbar-right-container {
+    position: absolute;
+    top: 17px;
+    right: 17px;
+  }
+}
+
+@import "../imports/parties-list/parties-list";
+
diff --git a/client/imports/parties-list/_parties-list.scss b/client/imports/parties-list/_parties-list.scss
new file mode 100644
index 0000000..3393841
--- /dev/null
+++ b/client/imports/parties-list/_parties-list.scss
@@ -0,0 +1,125 @@
+.ma-add-button-container {
+  button.btn {
+    background: $color3;
+    float: right;
+    margin-right: 5px;
+    outline: none;
+    i {
+      color: $color5;
+    }
+  }
+}
+
+.ma-parties-col {
+  padding-top: 20px;
+}
+
+.ma-filters {
+  margin-bottom: 10px;
+}
+
+.ma-party-item {
+  .ma-party-name {
+    margin-bottom: 20px;
+    a {
+      color: $color6;
+      text-decoration: none !important;
+      font-weight: 400;
+    }
+  }
+  .ma-party-description {
+    color: $color6;
+    font-weight: 300;
+    padding-left: 18px;
+    font-size: 14px;
+  }
+
+  .ma-remove {
+    color: lighten($color7, 20%);
+    position: absolute;
+    right: 20px;
+    top: 20px;
+    &:hover {
+      color: $color7;
+    }
+  }
+
+  .ma-party-item-bottom {
+    padding-top: 10px;
+    .ma-posted-by-col {
+      .ma-posted-by {
+        color: darken($color4, 30%);
+        font-size: 12px;
+      }
+      .ma-everyone-invited {
+        @media (max-width: 400px) {
+          display: block;
+          i {
+            margin-left: 0px !important;
+          }
+        }
+        font-size: 12px;
+        color: darken($color4, 10%);
+        i {
+          color: darken($color4, 10%);
+          margin-left: 5px;
+        }
+      }
+    }
+
+    .ma-rsvp-buttons {
+      input.btn {
+        color: darken($color3, 20%);
+        background: transparent !important;
+        outline: none;
+        padding-left: 0;
+        &:active {
+          box-shadow: none;
+        }
+        &:hover {
+          color: darken($color3, 30%);
+        }
+        &.btn-primary {
+          color: lighten($color3, 10%);
+          border: 0;
+          background: transparent !important;
+        }
+      }
+    }
+
+    .ma-rsvp-sum {
+      width: 160px;
+      @media (min-width: 400px) {
+        float: right;
+      }
+      @media (max-width: 400px) {
+        margin: 0 auto;
+      }
+    }
+    .ma-rsvp-amount {
+      display: inline-block;
+      text-align: center;
+      width: 50px;
+      .ma-amount {
+        font-weight: bold;
+        font-size: 20px;
+      }
+      .ma-rsvp-title {
+        font-size: 11px;
+        color: #aaa;
+        text-transform: uppercase;
+      }
+    }
+  }
+}
+
+.ma-angular-map-col {
+  .angular-google-map-container, .angular-google-map {
+    height: 100%;
+    width: 100%;
+  }
+}
+
+.search-form {
+  margin-bottom: 1em;
+}
-- 
2.7.4


From 93c7ef8680f32ff6835d6888032f119978cc717b Mon Sep 17 00:00:00 2001
From: Uri Goldshtein <uri.goldshtein@gmail.com>
Date: Sat, 14 May 2016 19:50:49 +0300
Subject: [PATCH 149/259] Step 17.11: Add style file for the party details page

---
 client/css/main.scss                             |  1 +
 client/imports/party-details/_party-details.scss | 32 ++++++++++++++++++++++++
 2 files changed, 33 insertions(+)
 create mode 100644 client/imports/party-details/_party-details.scss

diff --git a/client/css/main.scss b/client/css/main.scss
index 6040abd..eb2bce1 100644
--- a/client/css/main.scss
+++ b/client/css/main.scss
@@ -42,4 +42,5 @@ body {
 }
 
 @import "../imports/parties-list/parties-list";
+@import "../imports/party-details/party-details";
 
diff --git a/client/imports/party-details/_party-details.scss b/client/imports/party-details/_party-details.scss
new file mode 100644
index 0000000..f237bb0
--- /dev/null
+++ b/client/imports/party-details/_party-details.scss
@@ -0,0 +1,32 @@
+.ma-party-details-container {
+  padding: 20px;
+
+  .angular-google-map-container {
+    width: 100%;
+    height: 100%;
+  }
+
+  .angular-google-map {
+    width: 100%;
+    height: 400px;
+  }
+
+  .ma-map-title {
+    font-size: 16px;
+    font-weight: bolder;
+  }
+
+  .ma-invite-list {
+    margin-top: 20px;
+    margin-bottom: 20px;
+
+    h3 {
+      font-size: 16px;
+      font-weight: bolder;
+    }
+
+    ul {
+      padding: 0;
+    }
+  }
+}
-- 
2.7.4


From 512d9ac4459db1b01309269f9bfe19aee9c5edf7 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Fri, 5 Feb 2016 16:16:43 +0200
Subject: [PATCH 150/259] Step 17.12: Update the layout of the party details
 page

---
 client/imports/party-details/party-details.html | 90 +++++++++++++++----------
 1 file changed, 55 insertions(+), 35 deletions(-)

diff --git a/client/imports/party-details/party-details.html b/client/imports/party-details/party-details.html
index ba4c29a..0a56268 100644
--- a/client/imports/party-details/party-details.html
+++ b/client/imports/party-details/party-details.html
@@ -1,40 +1,60 @@
-<form (submit)="saveParty(party)" *ngIf="party">
-  <label>Name</label>
-  <input [disabled]="!isOwner" type="text" [(ngModel)]="party.name">
+<div class="row ma-party-details-container">
+  <div class="col-sm-6 col-sm-offset-3">
 
-  <label>Description</label>
-  <input [disabled]="!isOwner" type="text" [(ngModel)]="party.description">
+    <legend>View and Edit Your Party Details:</legend>
+    <form class="form-horizontal" (submit)="saveParty(party)" *ngIf="party">
+      <div class="form-group">
+        <label>Party Name</label>
+        <input [disabled]="!isOwner" type="text" [(ngModel)]="party.name" class="form-control">
+      </div>
+      <div class="form-group">
+        <label>Description</label>
+        <input [disabled]="!isOwner" type="text" [(ngModel)]="party.description" class="form-control">
+      </div>
+      <div class="form-group">
+        <label>Location name</label>
+        <input [disabled]="!isOwner" type="text" [(ngModel)]="party.location.name" class="form-control">
+      </div>
+      <div class="form-group">
+        <button [disabled]="!isOwner" type="submit" class="btn btn-primary">Save</button>
+        <button [routerLink]="['/']" class="btn">Back</button>
+      </div>
+    </form>
 
-  <label>Location</label>
-  <input [disabled]="!isOwner" type="text" [(ngModel)]="party.location.name">
+    <div class="ma-invite-list" ng-show="partyDetails.canInvite()">
+      <h3>
+        Users to invite:
+      </h3>
+      <ul>
+        <li *ngFor="let user of users">
+          <div>{{ user | displayName }}</div>
+          <button (click)="invite(user)" class="btn btn-primary btn-sm">Invite</button>
+        </li>
+      </ul>
+      <div *ngIf="isInvited">
+        <h2>Reply to the invitation</h2>
+        <input type="button" class="btn btn-primary" value="I'm going!" (click)="reply('yes')">
+        <input type="button" class="btn btn-warning" value="Maybe" (click)="reply('maybe')">
+        <input type="button" class="btn btn-danger" value="No" (click)="reply('no')">
+      </div>
+    </div>
 
-  <button [disabled]="!isOwner" type="submit">Save</button>
-  <button [routerLink]="['/']">Cancel</button>
-</form>
+    <h3 class="ma-map-title">
+      Click the map to set the party location
+    </h3>
 
-<ul *ngIf="isOwner || isPublic">
-  Users to invite:
-  <li *ngFor="let user of users">
-    <div>{{ user | displayName }}</div>
-    <button (click)="invite(user)">Invite</button>
-  </li>
-</ul>
-
-<div *ngIf="isInvited">
-  <h2>Reply to the invitation</h2>
-  <input type="button" value="I'm going!" (click)="reply('yes')">
-  <input type="button" value="Maybe" (click)="reply('maybe')">
-  <input type="button" value="No" (click)="reply('no')">
+    <div class="angular-google-map-container">
+      <sebm-google-map
+              [latitude]="lat || centerLat"
+              [longitude]="lng || centerLng"
+              [zoom]="8"
+              (mapClick)="mapClicked($event)">
+        <sebm-google-map-marker
+                *ngIf="lat && lng"
+                [latitude]="lat"
+                [longitude]="lng">
+        </sebm-google-map-marker>
+      </sebm-google-map>
+    </div>
+  </div>
 </div>
-
-<sebm-google-map
-        [latitude]="lat || centerLat"
-        [longitude]="lng || centerLng"
-        [zoom]="8"
-        (mapClick)="mapClicked($event)">
-  <sebm-google-map-marker
-          *ngIf="lat && lng"
-          [latitude]="lat"
-          [longitude]="lng">
-  </sebm-google-map-marker>
-</sebm-google-map>
-- 
2.7.4


From 095386b6f1cad0e9aabca8ebbe9447e58024e104 Mon Sep 17 00:00:00 2001
From: Uri Goldshtein <uri.goldshtein@gmail.com>
Date: Sat, 14 May 2016 19:59:53 +0300
Subject: [PATCH 151/259] Step 18.1: Removed bootstrap import

---
 client/css/main.scss | 1 -
 1 file changed, 1 deletion(-)

diff --git a/client/css/main.scss b/client/css/main.scss
index eb2bce1..f3a2528 100644
--- a/client/css/main.scss
+++ b/client/css/main.scss
@@ -1,6 +1,5 @@
 @import "{}/node_modules/angular2-meteor-accounts-ui/build/login-buttons.scss";
 @import "{}/node_modules/angular2-pagination/build/pagination-controls-cmp.scss";
-@import "{}/node_modules/bootstrap/scss/bootstrap.scss";
 
 $color1 : #2F2933;
 $color2 : #01A2A6;
-- 
2.7.4


From f6ce007606fce7bb4303e1e3951acd3ee794e143 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Sat, 6 Feb 2016 10:32:42 +0200
Subject: [PATCH 152/259] Step 18.2: Add ng2 material package

---
 package.json | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/package.json b/package.json
index f5604b6..ec542e7 100644
--- a/package.json
+++ b/package.json
@@ -17,9 +17,9 @@
     "angular2-meteor-auto-bootstrap": "^0.5.6",
     "angular2-meteor-polyfills": "^0.1.1",
     "angular2-pagination": "0.2.1",
-    "bootstrap": "4.0.0-alpha.2",
     "es6-shim": "^0.35.1",
     "meteor-node-stubs": "^0.2.3",
+    "ng2-material": "0.4.1",
     "reflect-metadata": "^0.1.2",
     "rxjs": "5.0.0-beta.6",
     "zone.js": "^0.6.12"
-- 
2.7.4


From 8401c73822ee262495d1d92d1d7e4242a4373eb8 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Sat, 6 Feb 2016 10:32:57 +0200
Subject: [PATCH 153/259] Step 18.3: Import ng2 material components to the main
 app

---
 client/app.ts        | 6 ++++--
 client/css/main.scss | 2 ++
 2 files changed, 6 insertions(+), 2 deletions(-)

diff --git a/client/app.ts b/client/app.ts
index cae2863..f81e37e 100644
--- a/client/app.ts
+++ b/client/app.ts
@@ -1,4 +1,6 @@
 import 'reflect-metadata';
+import {MATERIAL_PROVIDERS, MATERIAL_DIRECTIVES} from 'ng2-material';
+
 import { Component, provide } from '@angular/core';
 import { bootstrap } from 'angular2-meteor-auto-bootstrap';
 import { provideRouter, RouterConfig, ROUTER_DIRECTIVES } from '@angular/router';
@@ -12,7 +14,7 @@ import {LoginButtons} from 'angular2-meteor-accounts-ui';
 @Component({
   selector: 'app',
   templateUrl: '/client/app.html',
-  directives: [ROUTER_DIRECTIVES, LoginButtons]
+  directives: [ROUTER_DIRECTIVES, LoginButtons, MATERIAL_DIRECTIVES]
 })
 class Socially {}
 
@@ -25,4 +27,4 @@ const APP_ROUTER_PROVIDERS = [
   provideRouter(routes)
 ];
 
-bootstrap(Socially, [APP_ROUTER_PROVIDERS, GOOGLE_MAPS_PROVIDERS, provide(APP_BASE_HREF, { useValue: '/' })]);
+bootstrap(Socially, [MATERIAL_PROVIDERS, APP_ROUTER_PROVIDERS, GOOGLE_MAPS_PROVIDERS, provide(APP_BASE_HREF, { useValue: '/' })]);
diff --git a/client/css/main.scss b/client/css/main.scss
index f3a2528..71a87ec 100644
--- a/client/css/main.scss
+++ b/client/css/main.scss
@@ -1,5 +1,7 @@
 @import "{}/node_modules/angular2-meteor-accounts-ui/build/login-buttons.scss";
 @import "{}/node_modules/angular2-pagination/build/pagination-controls-cmp.scss";
+@import "{}/node_modules/ng2-material/all.scss";
+@import "{}/node_modules/ng2-material/font/font.scss";
 
 $color1 : #2F2933;
 $color2 : #01A2A6;
-- 
2.7.4


From 2c0b02d61b7085f1804eaa4e49b7aa3e15114d8d Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Sat, 6 Feb 2016 10:33:22 +0200
Subject: [PATCH 154/259] Step 18.4: Import the fonts for material

---
 client/index.html | 5 ++---
 1 file changed, 2 insertions(+), 3 deletions(-)

diff --git a/client/index.html b/client/index.html
index 8a56f1a..c6c91b2 100644
--- a/client/index.html
+++ b/client/index.html
@@ -1,8 +1,7 @@
 <head>
   <meta name="viewport" content="width=device-width, initial-scale=1">
-  <link href='http://fonts.googleapis.com/css?family=Muli:400,300' rel='stylesheet' type='text/css'>
-  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css">
+  <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
 </head>
 <body>
-  <app></app>
+  <app layout="column"></app>
 </body>
\ No newline at end of file
-- 
2.7.4


From 602dd74d19c7784700416b91d9595623e6b3b45b Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Sat, 6 Feb 2016 10:33:40 +0200
Subject: [PATCH 155/259] Step 18.5: Change the nav bar and the layout

---
 client/app.html | 17 ++++++++++-------
 client/app.ts   |  4 +++-
 package.json    |  2 ++
 3 files changed, 15 insertions(+), 8 deletions(-)

diff --git a/client/app.html b/client/app.html
index dffc2ea..4ad9b7e 100644
--- a/client/app.html
+++ b/client/app.html
@@ -1,7 +1,10 @@
-<nav class="navbar navbar-light bg-faded">
-  <a class="navbar-brand" href="#">Socially</a>
-  <login-buttons class="pull-right"></login-buttons>
-</nav>
-<div class="container-fluid">
-  <router-outlet></router-outlet>
-</div>
\ No newline at end of file
+<md-toolbar>
+  <h2>
+    <a ui-sref="parties"><span class="md-title">Socially</span></a>
+  </h2>
+  <span flex></span>
+  <div class="navbar-right navbar-text">
+    <login-buttons></login-buttons>
+  </div>
+</md-toolbar>
+<router-outlet flex-gt-sm layout-gt-sm="row"></router-outlet>
\ No newline at end of file
diff --git a/client/app.ts b/client/app.ts
index f81e37e..f670098 100644
--- a/client/app.ts
+++ b/client/app.ts
@@ -1,5 +1,6 @@
 import 'reflect-metadata';
 import {MATERIAL_PROVIDERS, MATERIAL_DIRECTIVES} from 'ng2-material';
+import {MdToolbar} from '@angular2-material/toolbar';
 
 import { Component, provide } from '@angular/core';
 import { bootstrap } from 'angular2-meteor-auto-bootstrap';
@@ -10,11 +11,12 @@ import { PartyDetails } from './imports/party-details/party-details.ts';
 import '../collections/methods.ts';
 import {GOOGLE_MAPS_PROVIDERS} from 'angular2-google-maps/core';
 import {LoginButtons} from 'angular2-meteor-accounts-ui';
+import '../node_modules/@angular2-material/toolbar/toolbar.css'
 
 @Component({
   selector: 'app',
   templateUrl: '/client/app.html',
-  directives: [ROUTER_DIRECTIVES, LoginButtons, MATERIAL_DIRECTIVES]
+  directives: [ROUTER_DIRECTIVES, LoginButtons, MATERIAL_DIRECTIVES, MdToolbar]
 })
 class Socially {}
 
diff --git a/package.json b/package.json
index ec542e7..6d0f70e 100644
--- a/package.json
+++ b/package.json
@@ -11,6 +11,8 @@
     "@angular/platform-browser": "^2.0.0-rc.4",
     "@angular/platform-browser-dynamic": "^2.0.0-rc.4",
     "@angular/router": "3.0.0-beta.2",
+    "@angular2-material/core": "2.0.0-alpha.4",
+    "@angular2-material/toolbar": "2.0.0-alpha.4",
     "angular2-google-maps": "0.12.0",
     "angular2-meteor": "^0.5.6",
     "angular2-meteor-accounts-ui": "0.5.0",
-- 
2.7.4


From 1e70b4696f81f159e5cc38dec2892495652113c8 Mon Sep 17 00:00:00 2001
From: dotansimha <dotansimha@gmail.com>
Date: Tue, 24 May 2016 21:35:46 +0300
Subject: [PATCH 156/259] Step 18.6: Import the components into the parties
 form

---
 client/imports/parties-form/parties-form.ts | 6 +++++-
 package.json                                | 2 ++
 2 files changed, 7 insertions(+), 1 deletion(-)

diff --git a/client/imports/parties-form/parties-form.ts b/client/imports/parties-form/parties-form.ts
index 74a19a1..fe3fdf0 100644
--- a/client/imports/parties-form/parties-form.ts
+++ b/client/imports/parties-form/parties-form.ts
@@ -3,10 +3,14 @@ import { Component } from '@angular/core';
 import { FormBuilder, ControlGroup, Validators, Control } from '@angular/common';
 import { Parties } from '../../../collections/parties.ts';
 import { Meteor } from 'meteor/meteor';
+import {MATERIAL_DIRECTIVES} from 'ng2-material';
+import {MdCheckbox} from '@angular2-material/checkbox';
+import {MD_INPUT_DIRECTIVES} from '@angular2-material/input';
 
 @Component({
   selector: 'parties-form',
-  templateUrl: '/client/imports/parties-form/parties-form.html'
+  templateUrl: '/client/imports/parties-form/parties-form.html',
+  directives: [MATERIAL_DIRECTIVES, MdCheckbox, MD_INPUT_DIRECTIVES]
 })
 export class PartiesForm {
   partiesForm: ControlGroup;
diff --git a/package.json b/package.json
index 6d0f70e..a6e5972 100644
--- a/package.json
+++ b/package.json
@@ -12,6 +12,8 @@
     "@angular/platform-browser-dynamic": "^2.0.0-rc.4",
     "@angular/router": "3.0.0-beta.2",
     "@angular2-material/core": "2.0.0-alpha.4",
+    "@angular2-material/checkbox": "2.0.0-alpha.4",
+    "@angular2-material/input": "2.0.0-alpha.4",
     "@angular2-material/toolbar": "2.0.0-alpha.4",
     "angular2-google-maps": "0.12.0",
     "angular2-meteor": "^0.5.6",
-- 
2.7.4


From 2703582d668044172308411c4d9cbc2d5f7f9066 Mon Sep 17 00:00:00 2001
From: dotansimha <dotansimha@gmail.com>
Date: Tue, 24 May 2016 21:36:00 +0300
Subject: [PATCH 157/259] Step 18.7: Update the view of the parties form

---
 client/imports/parties-form/parties-form.html | 20 ++++++--------------
 1 file changed, 6 insertions(+), 14 deletions(-)

diff --git a/client/imports/parties-form/parties-form.html b/client/imports/parties-form/parties-form.html
index a5d11ef..1a2c0ff 100644
--- a/client/imports/parties-form/parties-form.html
+++ b/client/imports/parties-form/parties-form.html
@@ -1,21 +1,13 @@
-<form [ngFormModel]="partiesForm" #f="ngForm" (submit)="addParty(f.value)" class="form-inline">
+<form [ngFormModel]="partiesForm" #f="ngForm" (submit)="addParty(f.value)">
   <fieldset class="form-group">
-    <label for="partyName">Party name</label>
-    <input id="partyName" class="form-control" type="text" ngControl="name" placeholder="Party name" />
-
-    <label for="description">Description</label>
-    <input id="description" class="form-control" type="text" ngControl="description" placeholder="Description">
-
-    <label for="location_name">Location</label>
-    <input id="location_name" class="form-control" type="text" ngControl="location" placeholder="Location name">
+    <md-input ngControl="name" placeholder="Party name"></md-input>
+    <md-input ngControl="description" placeholder="Description"></md-input>
+    <md-input ngControl="location" placeholder="Location name"></md-input>
 
     <div class="checkbox">
-      <label>
-        <input type="checkbox" ngControl="public">
-        Public
-      </label>
+        <md-checkbox [(checked)]="public">Public</md-checkbox>
     </div>
 
-    <button type="submit" class="btn btn-primary">Add Party!</button>
+    <button md-raised-button type="submit" class="md-primary">Add Party!</button>
   </fieldset>
 </form>
\ No newline at end of file
-- 
2.7.4


From 8f0a7142e1d033a9060a4687c94cdf6280ea1a98 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Sat, 6 Feb 2016 11:14:41 +0200
Subject: [PATCH 158/259] Step 18.8: Add the import to the parties list

---
 client/imports/parties-list/parties-list.ts | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/client/imports/parties-list/parties-list.ts b/client/imports/parties-list/parties-list.ts
index 7ddaed3..83177bd 100644
--- a/client/imports/parties-list/parties-list.ts
+++ b/client/imports/parties-list/parties-list.ts
@@ -11,12 +11,13 @@ import { PaginationService, PaginatePipe, PaginationControlsCmp } from 'angular2
 import { RsvpPipe } from '../pipes/pipes.ts';
 import { Meteor } from 'meteor/meteor';
 import {GOOGLE_MAPS_DIRECTIVES} from 'angular2-google-maps/core';
+import {MATERIAL_DIRECTIVES} from 'ng2-material';
 
 @Component({
   selector: 'parties-list',
   viewProviders: [PaginationService],
   templateUrl: '/client/imports/parties-list/parties-list.html',
-  directives: [GOOGLE_MAPS_DIRECTIVES, PartiesForm, ROUTER_DIRECTIVES, PaginationControlsCmp],
+  directives: [MATERIAL_DIRECTIVES, GOOGLE_MAPS_DIRECTIVES, PartiesForm, ROUTER_DIRECTIVES, PaginationControlsCmp],
   pipes: [PaginatePipe, RsvpPipe]
 })
 @InjectUser()
-- 
2.7.4


From aeea9e362a1c09fb79b946a69ee06ed705a901f1 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Sat, 6 Feb 2016 11:15:01 +0200
Subject: [PATCH 159/259] Step 18.9: Change that layout of the parties list

---
 client/imports/parties-list/parties-list.html | 164 +++++++++++---------------
 client/imports/parties-list/parties-list.ts   |   3 +-
 2 files changed, 71 insertions(+), 96 deletions(-)

diff --git a/client/imports/parties-list/parties-list.html b/client/imports/parties-list/parties-list.html
index dabce49..b25eb0b 100644
--- a/client/imports/parties-list/parties-list.html
+++ b/client/imports/parties-list/parties-list.html
@@ -1,100 +1,74 @@
-<div class="row">
-  <div class="col-md-12">
-    <div class="jumbotron">
-      <h3>Create a new party!</h3>
-      <parties-form [hidden]="!user"></parties-form>
-      <div [hidden]="user">You need to login to create new parties!</div>
-    </div>
-  </div>
-</div>
-<div class="row ma-filters">
-  <div class="col-md-6">
-    <h3>All Parties:</h3>
-    <form class="form-inline">
-      <input type="text" class="form-control" #searchtext placeholder="Search by Location">
-      <button type="button" class="btn btn-primary" (click)="search(searchtext.value)">Search</button>
-      Sort by name: <select class="form-control" #sort (change)="changeSortOrder(sort.value)">
-      <option value="1" selected>Ascending</option>
-      <option value="-1">Descending</option>
-    </select>
-    </form>
-  </div>
-</div>
-<div class="row">
-  <div class="col-md-6">
-    <ul class="list-group">
-      <li class="list-group-item">
-        <pagination-controls (change)="onPageChanged($event.page)"></pagination-controls>
-      </li>
-      <li *ngFor="let party of parties | paginate:{currentPage: 1, itemsPerPage: pageSize, totalItems: partiesSize}"
-          class="list-group-item ma-party-item">
-        <div class="row">
-          <div class="col-sm-8">
-            <h2 class="ma-party-name">
-              <a [routerLink]="['/party', party._id]">{{party.name}}</a>
-            </h2>
-            @ {{party.location.name}}
-            <p class="ma-party-description">
-              {{party.description}}
-            </p>
-          </div>
-          <div class="col-sm-4">
-            <button class="btn btn-danger pull-right" [hidden]="!isOwner(party)" (click)="removeParty(party)"><i
-                    class="fa fa-times"></i></button>
-          </div>
-        </div>
-        <div class="row ma-party-item-bottom">
-          <div class="col-sm-4">
-            <div class="ma-rsvp-sum">
-              <div class="ma-rsvp-amount">
-                <div class="ma-amount">
-                  {{party | rsvp:'yes'}}
-                </div>
-                <div class="ma-rsvp-title">
-                  YES
-                </div>
-              </div>
-              <div class="ma-rsvp-amount">
-                <div class="ma-amount">
-                  {{party | rsvp:'maybe'}}
+<md-content flex layout="row" class="ma-parties-list">
+    <div layout="row" flex>
+        <div flex="50">
+            <div>
+                <md-content class="new-party-form-container">
+                    <md-toolbar>
+                        <div class="md-toolbar-tools">
+                            <h3>Create a new party!</h3>
+                        </div>
+                    </md-toolbar>
+                    <parties-form [hidden]="!user"></parties-form>
+                    <div [hidden]="user">You need to login to create new parties!</div>
+                </md-content>
+                <div layout-padding layout="row">
+                    <md-input #searchtext placeholder="Search by Location"></md-input>
                 </div>
-                <div class="ma-rsvp-title">
-                  MAYBE
+                <div layout-padding layout="row">
+                    Sort by name: <select class="form-control" #sort (change)="changeSortOrder(sort.value)">
+                    <option value="1" selected>Ascending</option>
+                    <option value="-1">Descending</option>
+                </select>
                 </div>
-              </div>
-              <div class="ma-rsvp-amount">
-                <div class="ma-amount">
-                  {{party | rsvp:'no'}}
+            </div>
+            <md-content class="md-padding" style="padding-top:0;">
+                <pagination-controls (change)="onPageChanged($event.page)"></pagination-controls>
+                <div *ngFor="let party of parties | paginate:{currentPage: 1, itemsPerPage: pageSize, totalItems: partiesSize}"
+                     class="ma-party">
+                    <md-card>
+                        <md-card-content>
+                            <h2 class="md-title ma-name" style=""><a
+                                    [routerLink]="['/party', party._id]">{{party.name}}</a></h2>
+                            <p class="ma-description"
+                               style="padding:0 10px;margin-bottom:35px;margin-top: 6px;">{{party.description}}</p>
+                            <div layout="row">
+                                <div layout="row" layout-align="end end">
+                                    <div>
+                                        <div class="rsvps-sum">
+                                            <div class="rsvps-amount">{{party | rsvp:'yes'}}</div>
+                                            <div class="rsvps-title">Yes</div>
+                                        </div>
+                                        <div class="rsvps-sum">
+                                            <div class="rsvps-amount">{{party | rsvp:'maybe'}}</div>
+                                            <div class="rsvps-title">Maybe</div>
+                                        </div>
+                                        <div class="rsvps-sum">
+                                            <div class="rsvps-amount">{{party | rsvp:'no'}}</div>
+                                            <div class="rsvps-title">No</div>
+                                        </div>
+                                    </div>
+                                </div>
+                            </div>
+                        </md-card-content>
+                    </md-card>
                 </div>
-                <div class="ma-rsvp-title">
-                  NO
+            </md-content>
+        </div>
+        <div flex="50" layout="row" style="min-height:300px;">
+            <sebm-google-map
+                    style="width: 100%; min-height:300px;"
+                    flex layout="row"
+                    [latitude]="0"
+                    [longitude]="0"
+                    [zoom]="1">
+                <div *ngFor="let party of parties">
+                    <sebm-google-map-marker
+                            *ngIf="party.location.lat"
+                            [latitude]="party.location.lat"
+                            [longitude]="party.location.lng">
+                    </sebm-google-map-marker>
                 </div>
-              </div>
-            </div>
-          </div>
+            </sebm-google-map>
         </div>
-      </li>
-      <li class="list-group-item">
-        <pagination-controls (change)="onPageChanged($event.page)"></pagination-controls>
-      </li>
-    </ul>
-  </div>
-  <div class="col-md-6">
-    <ul class="list-group">
-      <li class="list-group-item">
-        <sebm-google-map
-                [latitude]="0"
-                [longitude]="0"
-                [zoom]="1">
-          <div *ngFor="let party of parties">
-            <sebm-google-map-marker
-                    *ngIf="party.location.lat"
-                    [latitude]="party.location.lat"
-                    [longitude]="party.location.lng">
-            </sebm-google-map-marker>
-          </div>
-        </sebm-google-map>
-      </li>
-    </ul>
-  </div>
-</div>
+    </div>
+</md-content>
diff --git a/client/imports/parties-list/parties-list.ts b/client/imports/parties-list/parties-list.ts
index 83177bd..e9df0a1 100644
--- a/client/imports/parties-list/parties-list.ts
+++ b/client/imports/parties-list/parties-list.ts
@@ -12,12 +12,13 @@ import { RsvpPipe } from '../pipes/pipes.ts';
 import { Meteor } from 'meteor/meteor';
 import {GOOGLE_MAPS_DIRECTIVES} from 'angular2-google-maps/core';
 import {MATERIAL_DIRECTIVES} from 'ng2-material';
+import {MD_INPUT_DIRECTIVES} from '@angular2-material/input';
 
 @Component({
   selector: 'parties-list',
   viewProviders: [PaginationService],
   templateUrl: '/client/imports/parties-list/parties-list.html',
-  directives: [MATERIAL_DIRECTIVES, GOOGLE_MAPS_DIRECTIVES, PartiesForm, ROUTER_DIRECTIVES, PaginationControlsCmp],
+  directives: [MATERIAL_DIRECTIVES, GOOGLE_MAPS_DIRECTIVES, PartiesForm, ROUTER_DIRECTIVES, PaginationControlsCmp, MD_INPUT_DIRECTIVES],
   pipes: [PaginatePipe, RsvpPipe]
 })
 @InjectUser()
-- 
2.7.4


From 1c949f8487af99115858caf7b1086feea4fef200 Mon Sep 17 00:00:00 2001
From: Uri Goldshtein <uri.goldshtein@gmail.com>
Date: Sat, 14 May 2016 20:19:07 +0300
Subject: [PATCH 160/259] Step 18.10: Add some style

---
 client/imports/parties-list/_parties-list.scss | 150 +++++++------------------
 1 file changed, 43 insertions(+), 107 deletions(-)

diff --git a/client/imports/parties-list/_parties-list.scss b/client/imports/parties-list/_parties-list.scss
index 3393841..d6512b5 100644
--- a/client/imports/parties-list/_parties-list.scss
+++ b/client/imports/parties-list/_parties-list.scss
@@ -1,125 +1,61 @@
-.ma-add-button-container {
-  button.btn {
-    background: $color3;
-    float: right;
-    margin-right: 5px;
-    outline: none;
-    i {
-      color: $color5;
-    }
-  }
-}
-
-.ma-parties-col {
-  padding-top: 20px;
-}
-
-.ma-filters {
-  margin-bottom: 10px;
+.new-party-form-container {
+  margin: 20px;
+  border: 1px gainsboro solid;
 }
-
-.ma-party-item {
-  .ma-party-name {
-    margin-bottom: 20px;
-    a {
-      color: $color6;
-      text-decoration: none !important;
-      font-weight: 400;
-    }
+.ma-parties-list {
+  .sebm-google-map {
+    box-sizing: border-box;
+    -webkit-flex: 1;
+    -ms-flex: 1;
+    flex: 1;
+    -webkit-flex-direction: row;
+    -ms-flex-direction: row;
+    flex-direction: row;
+    box-sizing: border-box;
+    display: -webkit-flex;
+    display: -ms-flexbox;
+    display: flex;
   }
-  .ma-party-description {
-    color: $color6;
-    font-weight: 300;
-    padding-left: 18px;
-    font-size: 14px;
+
+  .angular-google-map-container {
+    box-sizing: border-box;
+    -webkit-flex: 1;
+    -ms-flex: 1;
+    flex: 1;
   }
 
-  .ma-remove {
-    color: lighten($color7, 20%);
-    position: absolute;
-    right: 20px;
-    top: 20px;
-    &:hover {
-      color: $color7;
+  .rsvps-sum {
+    float: left;
+    width: 50px;
+    text-align: center;
+    .rsvps-amount {
+      font-size: 24px;
+    }
+    .rsvps-title {
+      font-size: 13px;
+      color: #aaa;
     }
   }
 
-  .ma-party-item-bottom {
-    padding-top: 10px;
-    .ma-posted-by-col {
-      .ma-posted-by {
-        color: darken($color4, 30%);
-        font-size: 12px;
-      }
-      .ma-everyone-invited {
-        @media (max-width: 400px) {
-          display: block;
-          i {
-            margin-left: 0px !important;
-          }
-        }
-        font-size: 12px;
-        color: darken($color4, 10%);
-        i {
-          color: darken($color4, 10%);
-          margin-left: 5px;
-        }
-      }
+  .ma-party {
+    .party-image {
+      background-size: cover;
+      width: 100%;
+      height: 200px;
     }
 
-    .ma-rsvp-buttons {
-      input.btn {
-        color: darken($color3, 20%);
-        background: transparent !important;
-        outline: none;
-        padding-left: 0;
-        &:active {
-          box-shadow: none;
-        }
-        &:hover {
-          color: darken($color3, 30%);
-        }
-        &.btn-primary {
-          color: lighten($color3, 10%);
-          border: 0;
-          background: transparent !important;
-        }
+    .ma-name {
+      a {
+        text-decoration: none;
+        color: #333;
       }
     }
+    .ma-description {
 
-    .ma-rsvp-sum {
-      width: 160px;
-      @media (min-width: 400px) {
-        float: right;
-      }
-      @media (max-width: 400px) {
-        margin: 0 auto;
-      }
-    }
-    .ma-rsvp-amount {
-      display: inline-block;
-      text-align: center;
-      width: 50px;
-      .ma-amount {
-        font-weight: bold;
-        font-size: 20px;
-      }
-      .ma-rsvp-title {
-        font-size: 11px;
-        color: #aaa;
-        text-transform: uppercase;
-      }
     }
   }
 }
 
-.ma-angular-map-col {
-  .angular-google-map-container, .angular-google-map {
-    height: 100%;
-    width: 100%;
-  }
-}
-
 .search-form {
   margin-bottom: 1em;
-}
+}
\ No newline at end of file
-- 
2.7.4


From 57ae829ea9d91ae8981575e0bee2252c140576e8 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Sat, 6 Feb 2016 11:22:54 +0200
Subject: [PATCH 161/259] Step 18.11: Import the directives in the party
 details page

---
 client/imports/party-details/party-details.ts | 5 ++++-
 1 file changed, 4 insertions(+), 1 deletion(-)

diff --git a/client/imports/party-details/party-details.ts b/client/imports/party-details/party-details.ts
index 586b539..7fa50ed 100644
--- a/client/imports/party-details/party-details.ts
+++ b/client/imports/party-details/party-details.ts
@@ -7,11 +7,14 @@ import { MeteorComponent } from 'angular2-meteor';
 import { DisplayName } from '../pipes/pipes.ts';
 import { Mongo } from 'meteor/mongo';
 import {GOOGLE_MAPS_DIRECTIVES, MouseEvent} from 'angular2-google-maps/core';
+import {MATERIAL_DIRECTIVES} from 'ng2-material';
+import {MD_INPUT_DIRECTIVES} from '@angular2-material/input';
+import {MdCheckbox} from '@angular2-material/checkbox';
 
 @Component({
   selector: 'party-details',
   templateUrl: '/client/imports/party-details/party-details.html',
-  directives: [ROUTER_DIRECTIVES, GOOGLE_MAPS_DIRECTIVES],
+  directives: [ROUTER_DIRECTIVES, GOOGLE_MAPS_DIRECTIVES, MATERIAL_DIRECTIVES, MD_INPUT_DIRECTIVES, MdCheckbox],
   pipes: [DisplayName]
 })
 @RequireUser()
-- 
2.7.4


From cc6708e766bba101c9cc629527f0f5497de84ddd Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Sat, 6 Feb 2016 11:23:20 +0200
Subject: [PATCH 162/259] Step 18.12: Update the layout of the party details
 page

---
 client/imports/party-details/party-details.html | 106 ++++++++++++------------
 1 file changed, 51 insertions(+), 55 deletions(-)

diff --git a/client/imports/party-details/party-details.html b/client/imports/party-details/party-details.html
index 0a56268..8bcb8ac 100644
--- a/client/imports/party-details/party-details.html
+++ b/client/imports/party-details/party-details.html
@@ -1,60 +1,56 @@
-<div class="row ma-party-details-container">
-  <div class="col-sm-6 col-sm-offset-3">
+<div layout="row" flex class="ma-party-details" *ngIf="party">
+  <div flex="33" offset="33">
+    <md-content class="new-party-form-container">
+      <md-toolbar>
+        <div class="md-toolbar-tools">
+          <h3>Your party details:</h3>
+        </div>
+      </md-toolbar>
+      <form layout="column">
+        <md-input-container>
+          <label>Party Name: </label>
+          <md-input [disabled]="!isOwner" [(ngModel)]="party.name"></md-input>
+        </md-input-container>
+        <md-input-container>
+          <label>Party Description</label>
+          <md-input [disabled]="!isOwner" [(ngModel)]="party.description"></md-input>
+        </md-input-container>
+        <md-input-container>
+          <label>Location name</label>
+          <md-input [disabled]="!isOwner" [(ngModel)]="party.location.name"></md-input>
+        </md-input-container>
+        <md-checkbox [(checked)]="party.public" aria-label="Public">
+          Is public
+        </md-checkbox>
 
-    <legend>View and Edit Your Party Details:</legend>
-    <form class="form-horizontal" (submit)="saveParty(party)" *ngIf="party">
-      <div class="form-group">
-        <label>Party Name</label>
-        <input [disabled]="!isOwner" type="text" [(ngModel)]="party.name" class="form-control">
-      </div>
-      <div class="form-group">
-        <label>Description</label>
-        <input [disabled]="!isOwner" type="text" [(ngModel)]="party.description" class="form-control">
-      </div>
-      <div class="form-group">
-        <label>Location name</label>
-        <input [disabled]="!isOwner" type="text" [(ngModel)]="party.location.name" class="form-control">
-      </div>
-      <div class="form-group">
-        <button [disabled]="!isOwner" type="submit" class="btn btn-primary">Save</button>
-        <button [routerLink]="['/']" class="btn">Back</button>
-      </div>
-    </form>
+        <div layout="row" layout-align="left">
+          <button [disabled]="!isOwner" type="submit" md-raised-button class="md-raised md-primary">Save</button>
+          <button [routerLink]="['/']" md-raised-button class="md-raised">Back</button>
+        </div>
 
-    <div class="ma-invite-list" ng-show="partyDetails.canInvite()">
-      <h3>
-        Users to invite:
-      </h3>
-      <ul>
-        <li *ngFor="let user of users">
-          <div>{{ user | displayName }}</div>
-          <button (click)="invite(user)" class="btn btn-primary btn-sm">Invite</button>
-        </li>
-      </ul>
-      <div *ngIf="isInvited">
-        <h2>Reply to the invitation</h2>
-        <input type="button" class="btn btn-primary" value="I'm going!" (click)="reply('yes')">
-        <input type="button" class="btn btn-warning" value="Maybe" (click)="reply('maybe')">
-        <input type="button" class="btn btn-danger" value="No" (click)="reply('no')">
-      </div>
-    </div>
+        <md-list>
+          <md-subheader class="md-no-sticky">Users to invite:</md-subheader>
+          <md-list-item *ngFor="let user of users">
+            <div>{{ user | displayName }}</div>
+            <button (click)="invite(user)" md-raised-button class="md-raised">Invite</button>
+          </md-list-item>
+        </md-list>
 
-    <h3 class="ma-map-title">
-      Click the map to set the party location
-    </h3>
-
-    <div class="angular-google-map-container">
-      <sebm-google-map
-              [latitude]="lat || centerLat"
-              [longitude]="lng || centerLng"
-              [zoom]="8"
-              (mapClick)="mapClicked($event)">
-        <sebm-google-map-marker
-                *ngIf="lat && lng"
-                [latitude]="lat"
-                [longitude]="lng">
-        </sebm-google-map-marker>
-      </sebm-google-map>
-    </div>
+        <div class="angular-google-map-container">
+          <sebm-google-map
+                  style="height: 300px;"
+                  [latitude]="lat || centerLat"
+                  [longitude]="lng || centerLng"
+                  [zoom]="8"
+                  (mapClick)="mapClicked($event)">
+            <sebm-google-map-marker
+                    *ngIf="lat && lng"
+                    [latitude]="lat"
+                    [longitude]="lng">
+            </sebm-google-map-marker>
+          </sebm-google-map>
+        </div>
+      </form>
+    </md-content>
   </div>
 </div>
-- 
2.7.4


From 2efe47d65339b8dc74e2ad270066574cc7555d13 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Sat, 6 Feb 2016 13:38:10 +0200
Subject: [PATCH 163/259] Step 18.13: Replace login buttons with custom buttons

---
 client/app.html | 11 +++++++++--
 1 file changed, 9 insertions(+), 2 deletions(-)

diff --git a/client/app.html b/client/app.html
index 4ad9b7e..5fdaeae 100644
--- a/client/app.html
+++ b/client/app.html
@@ -4,7 +4,14 @@
   </h2>
   <span flex></span>
   <div class="navbar-right navbar-text">
-    <login-buttons></login-buttons>
+    <div [hidden]="user">
+      <button md-button [routerLink]="['/login']" >Login</button>
+      <button md-button [routerLink]="['/signup']">Sign up</button>
+    </div>
+    <div [hidden]="!user">
+      <span>{{ user | displayName }}</span>
+      <button md-button (click)="logout()">Logout</button>
+    </div>
   </div>
 </md-toolbar>
-<router-outlet flex-gt-sm layout-gt-sm="row"></router-outlet>
\ No newline at end of file
+<router-outlet flex-gt-sm layout-gt-sm="row"></router-outlet>
-- 
2.7.4


From 134c8ff2fca96545ce0e56fd98b4300796efa302 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Sat, 6 Feb 2016 13:38:32 +0200
Subject: [PATCH 164/259] Step 18.14: Add logic to support custom login

---
 client/app.ts | 24 +++++++++++++++++++++---
 1 file changed, 21 insertions(+), 3 deletions(-)

diff --git a/client/app.ts b/client/app.ts
index f670098..df5b29e 100644
--- a/client/app.ts
+++ b/client/app.ts
@@ -1,6 +1,7 @@
 import 'reflect-metadata';
 import {MATERIAL_PROVIDERS, MATERIAL_DIRECTIVES} from 'ng2-material';
 import {MdToolbar} from '@angular2-material/toolbar';
+import {MeteorComponent} from 'angular2-meteor';
 
 import { Component, provide } from '@angular/core';
 import { bootstrap } from 'angular2-meteor-auto-bootstrap';
@@ -11,18 +12,35 @@ import { PartyDetails } from './imports/party-details/party-details.ts';
 import '../collections/methods.ts';
 import {GOOGLE_MAPS_PROVIDERS} from 'angular2-google-maps/core';
 import {LoginButtons} from 'angular2-meteor-accounts-ui';
-import '../node_modules/@angular2-material/toolbar/toolbar.css'
+import '../node_modules/@angular2-material/toolbar/toolbar.css';
+import { DisplayName } from './imports/pipes/pipes';
+import { InjectUser } from 'angular2-meteor-accounts-ui';
+import { Login } from './imports/auth/login';
+import { Signup } from './imports/auth/signup';
+import { Recover } from './imports/auth/recover';
+import { Meteor } from 'meteor/meteor';
 
 @Component({
   selector: 'app',
   templateUrl: '/client/app.html',
-  directives: [ROUTER_DIRECTIVES, LoginButtons, MATERIAL_DIRECTIVES, MdToolbar]
+  directives: [ROUTER_DIRECTIVES, LoginButtons, MATERIAL_DIRECTIVES, MdToolbar],
+  pipes: [DisplayName]
 })
-class Socially {}
+@InjectUser()
+class Socially extends MeteorComponent {
+  user: Meteor.User;
+
+  constructor() {
+    super();
+  }
+}
 
 const routes: RouterConfig = [
   { path: '',              	component: PartiesList },
   { path: 'party/:partyId',	component: PartyDetails },
+  { path: 'login', 		component: Login },
+  { path: 'signup', 		component: Signup },
+  { path: 'recover', 		component: Recover }
 ];
 
 const APP_ROUTER_PROVIDERS = [
-- 
2.7.4


From 1fb5409c10351ee90ffef983d67eda133ce10fe5 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Sat, 6 Feb 2016 14:11:40 +0200
Subject: [PATCH 165/259] Step 18.15: Create the login component

---
 client/imports/auth/login.ts | 44 ++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 44 insertions(+)
 create mode 100644 client/imports/auth/login.ts

diff --git a/client/imports/auth/login.ts b/client/imports/auth/login.ts
new file mode 100644
index 0000000..8d7ed78
--- /dev/null
+++ b/client/imports/auth/login.ts
@@ -0,0 +1,44 @@
+import { Component } from '@angular/core';
+import { MeteorComponent } from 'angular2-meteor';
+import { FormBuilder, ControlGroup, Validators } from '@angular/common';
+import { MATERIAL_DIRECTIVES } from 'ng2-material';
+import { Router , ROUTER_DIRECTIVES} from '@angular/router';
+import { MD_INPUT_DIRECTIVES } from '@angular2-material/input';
+import { MdToolbar } from '@angular2-material/toolbar';
+import { Meteor } from 'meteor/meteor';
+
+@Component({
+  selector: 'login',
+  directives: [MATERIAL_DIRECTIVES, ROUTER_DIRECTIVES, MD_INPUT_DIRECTIVES, MdToolbar],
+  templateUrl: '/client/imports/auth/login.html'
+})
+export class Login extends MeteorComponent {
+  loginForm: ControlGroup;
+  error: string;
+
+  constructor(private router: Router) {
+    super();
+
+    let fb = new FormBuilder();
+
+    this.loginForm = fb.group({
+      email: ['', Validators.required],
+      password: ['', Validators.required]
+    });
+
+    this.error = '';
+  }
+
+  login(credentials) {
+    if (this.loginForm.valid) {
+      Meteor.loginWithPassword(credentials.email, credentials.password, (err) => {
+        if (err) {
+          this.error = err;
+        }
+        else {
+          this.router.navigate(['/']);
+        }
+      });
+    }
+  }
+}
-- 
2.7.4


From c8da970527cd91ef7846cb25713def008329142c Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Sat, 6 Feb 2016 14:11:48 +0200
Subject: [PATCH 166/259] Step 18.16: Create the login view

---
 client/imports/auth/login.html | 33 +++++++++++++++++++++++++++++++++
 1 file changed, 33 insertions(+)
 create mode 100644 client/imports/auth/login.html

diff --git a/client/imports/auth/login.html b/client/imports/auth/login.html
new file mode 100644
index 0000000..d4c9c96
--- /dev/null
+++ b/client/imports/auth/login.html
@@ -0,0 +1,33 @@
+<md-content layout="row" layout-align="center start" layout-fill layout-margin>
+    <md-whiteframe layout="column" flex flex-md="50" flex-lg="50" flex-gt-lg="33" class="md-whiteframe-z2" layout-fill>
+        <md-toolbar class="md-primary" color="primary">
+            Sign in
+        </md-toolbar>
+        <div layout="column" layout-fill layout-margin layout-padding>
+            <div layout="row" layout-fill layout-margin>
+                <p class="md-body-2"> Sign in with your email</p>
+            </div>
+
+            <form [ngFormModel]="loginForm" #f="ngForm" (submit)="login(f.value)" layout="column" layout-fill
+                  layout-padding layout-margin>
+                <md-input ngControl="email" placeholder="Email" aria-label="email"></md-input>
+                <md-input type="password" placeholder="Password" ngControl="password" aria-label="password"></md-input>
+
+                <div layout="row" layout-align="space-between center">
+                    <button md-button [routerLink]="['/recover']">Forgot password?</button>
+                    <button md-raised-button class="md-primary" type="submit" aria-label="login">Sign In
+                    </button>
+                </div>
+            </form>
+            <div [hidden]="error == ''">
+                <md-toolbar class="md-warn" layout="row" layout-fill layout-padding layout-margin>
+                    <p class="md-body-1">{{ error }}</p>
+                </md-toolbar>
+            </div>
+            <md-divider></md-divider>
+            <div layout="row" layout-align="center">
+                <button md-button [routerLink]="['/signup']">Need an account?</button>
+            </div>
+        </div>
+    </md-whiteframe>
+</md-content>
-- 
2.7.4


From 4696a9f1190183eaf31f4ebdf1510d359a695bf7 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Sat, 6 Feb 2016 14:12:04 +0200
Subject: [PATCH 167/259] Step 18.17: Create the signup component

---
 client/imports/auth/signup.ts | 44 +++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 44 insertions(+)
 create mode 100644 client/imports/auth/signup.ts

diff --git a/client/imports/auth/signup.ts b/client/imports/auth/signup.ts
new file mode 100644
index 0000000..dcec6a1
--- /dev/null
+++ b/client/imports/auth/signup.ts
@@ -0,0 +1,44 @@
+import { Component } from '@angular/core';
+import { MeteorComponent } from 'angular2-meteor';
+import { FormBuilder, ControlGroup, Validators } from '@angular/common';
+import { MATERIAL_DIRECTIVES } from 'ng2-material';
+import { Router , ROUTER_DIRECTIVES} from '@angular/router';
+import { MD_INPUT_DIRECTIVES } from '@angular2-material/input';
+import { MdToolbar } from '@angular2-material/toolbar';
+import { Accounts } from 'meteor/accounts-base';
+
+@Component({
+  selector: 'signup',
+  directives: [MATERIAL_DIRECTIVES, ROUTER_DIRECTIVES, MD_INPUT_DIRECTIVES, MdToolbar],
+  templateUrl: '/client/imports/auth/signup.html'
+})
+export class Signup extends MeteorComponent {
+  signupForm: ControlGroup;
+  error: string;
+
+  constructor(private router: Router) {
+    super();
+
+    let fb = new FormBuilder();
+
+    this.signupForm = fb.group({
+      email: ['', Validators.required],
+      password: ['', Validators.required]
+    });
+
+    this.error = '';
+  }
+
+  signup(credentials) {
+    if (this.signupForm.valid) {
+      Accounts.createUser({ email: credentials.email, password: credentials.password}, (err) => {
+        if (err) {
+          this.error = err;
+        }
+        else {
+          this.router.navigate(['/']);
+        }
+      });
+    }
+  }
+}
-- 
2.7.4


From 74dadca9d3dced662971d9ea816677889fed5224 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Sat, 6 Feb 2016 14:12:12 +0200
Subject: [PATCH 168/259] Step 18.18: Create the signup view

---
 client/imports/auth/signup.html | 26 ++++++++++++++++++++++++++
 1 file changed, 26 insertions(+)
 create mode 100644 client/imports/auth/signup.html

diff --git a/client/imports/auth/signup.html b/client/imports/auth/signup.html
new file mode 100644
index 0000000..f57fd26
--- /dev/null
+++ b/client/imports/auth/signup.html
@@ -0,0 +1,26 @@
+<md-content layout="row" layout-align="center start" layout-fill layout-margin>
+    <md-whiteframe layout="column" flex flex-md="50" flex-lg="50" flex-gt-lg="33" class="md-whiteframe-z2" layout-fill>
+        <md-toolbar class="md-primary" color="primary">
+            Sign up
+        </md-toolbar>
+        <div layout="column" layout-fill layout-margin layout-padding>
+            <form [ngFormModel]="signupForm" #f="ngForm" (submit)="signup(f.value)" layout="column" layout-fill layout-padding layout-margin>
+                <md-input type="text" ngControl="email" aria-label="email" placeholder="Email"></md-input>
+                <md-input type="password" ngControl="password" aria-label="password" placeholder="Password"></md-input>
+                <div layout="row" layout-align="space-between center">
+                    <button md-raised-button class="md-primary" type="submit" aria-label="login">Sign Up!
+                    </button>
+                </div>
+            </form>
+        </div>
+        <div [hidden]="error == ''">
+            <md-toolbar class="md-warn" layout="row" layout-fill layout-padding layout-margin>
+                <p class="md-body-1">{{ error }}</p>
+            </md-toolbar>
+        </div>
+        <md-divider></md-divider>
+        <div layout="row" layout-align="center">
+            <button md-button [routerLink]="['/login']">Already a user?</button>
+        </div>
+    </md-whiteframe>
+</md-content>
-- 
2.7.4


From 4e068a5ba9aca9b5178bf223c03ae8f4ef5f62c2 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Sat, 6 Feb 2016 14:15:27 +0200
Subject: [PATCH 169/259] Step 18.19: Create the recover component

---
 client/imports/auth/recover.ts | 43 ++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 43 insertions(+)
 create mode 100644 client/imports/auth/recover.ts

diff --git a/client/imports/auth/recover.ts b/client/imports/auth/recover.ts
new file mode 100644
index 0000000..f85dc6e
--- /dev/null
+++ b/client/imports/auth/recover.ts
@@ -0,0 +1,43 @@
+import { Component } from '@angular/core';
+import { MeteorComponent } from 'angular2-meteor';
+import { FormBuilder, ControlGroup, Validators } from '@angular/common';
+import { MATERIAL_DIRECTIVES } from 'ng2-material';
+import { Router , ROUTER_DIRECTIVES} from '@angular/router';
+import { MD_INPUT_DIRECTIVES } from '@angular2-material/input';
+import { MdToolbar } from '@angular2-material/toolbar';
+import { Accounts } from 'meteor/accounts-base';
+
+@Component({
+  selector: 'recover',
+  directives: [MATERIAL_DIRECTIVES, ROUTER_DIRECTIVES, MD_INPUT_DIRECTIVES, MdToolbar],
+  templateUrl: '/client/imports/auth/recover.html'
+})
+export class Recover extends MeteorComponent {
+  recoverForm: ControlGroup;
+  error: string;
+
+  constructor(private router: Router) {
+    super();
+
+    let fb = new FormBuilder();
+
+    this.recoverForm = fb.group({
+      email: ['', Validators.required]
+    });
+
+    this.error = '';
+  }
+
+  recover(credentials) {
+    if (this.recoverForm.valid) {
+      Accounts.forgotPassword({ email: credentials.email}, (err) => {
+        if (err) {
+          this.error = err;
+        }
+        else {
+          this.router.navigate(['/']);
+        }
+      });
+    }
+  }
+}
-- 
2.7.4


From 0e5c160c406d7f15def407b83a0836d858a284df Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Sat, 6 Feb 2016 14:15:37 +0200
Subject: [PATCH 170/259] Step 18.20: Create the recover view

---
 client/imports/auth/recover.html | 24 ++++++++++++++++++++++++
 1 file changed, 24 insertions(+)
 create mode 100644 client/imports/auth/recover.html

diff --git a/client/imports/auth/recover.html b/client/imports/auth/recover.html
new file mode 100644
index 0000000..4fb2396
--- /dev/null
+++ b/client/imports/auth/recover.html
@@ -0,0 +1,24 @@
+<md-content layout="row" layout-align="center start" layout-fill layout-margin>
+    <md-whiteframe layout="column" flex flex-md="50" flex-lg="50" flex-gt-lg="33" class="md-whiteframe-z2" layout-fill>
+        <md-toolbar class="md-primary" color="primary">
+            Recover Your Password
+        </md-toolbar>
+        <div layout="column" layout-fill layout-margin layout-padding>
+            <form [ngFormModel]="recoverForm" #f="ngForm" (submit)="recover(f.value)" layout="column" layout-fill layout-padding layout-margin>
+                <md-input type="text" ngControl="email" aria-label="email" placeholder="Email"></md-input>
+                <div layout="row" layout-align="space-between center">
+                    <button md-raised-button class="md-primary" type="submit" aria-label="login">Recover
+                    </button>
+                </div>
+            </form>
+            <div [hidden]="error == ''">
+                <md-toolbar class="md-warn" layout="row" layout-fill layout-padding layout-margin>
+                    <p class="md-body-1">{{ error }}</p>
+                </md-toolbar>
+            </div>
+            <div layout="row" layout-align="center">
+                <button md-button [routerLink]="['/login']">Remember your password?</button>
+            </div>
+        </div>
+    </md-whiteframe>
+</md-content>
-- 
2.7.4


From f565f092be73b2ec4983f9cf1deaa0b30564cc69 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Sat, 6 Feb 2016 14:16:57 +0200
Subject: [PATCH 171/259] Step 18.21: Add the logout method to the main
 component

---
 client/app.ts | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/client/app.ts b/client/app.ts
index df5b29e..55bee82 100644
--- a/client/app.ts
+++ b/client/app.ts
@@ -33,6 +33,12 @@ class Socially extends MeteorComponent {
   constructor() {
     super();
   }
+
+  logout() {
+    this.autorun(() => {
+      Meteor.logout();
+    });
+  }
 }
 
 const routes: RouterConfig = [
-- 
2.7.4


From 39790c9ad6a467609e839e2289fa41531cd93d03 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 2 Jun 2016 18:56:47 +0200
Subject: [PATCH 172/259] Step 20.1: Add jalik:ufs

---
 .meteor/packages | 1 +
 .meteor/versions | 5 +++++
 2 files changed, 6 insertions(+)

diff --git a/.meteor/packages b/.meteor/packages
index b232d8b..dc3f046 100644
--- a/.meteor/packages
+++ b/.meteor/packages
@@ -23,3 +23,4 @@ reactive-var
 tmeasday:publish-counts
 email
 check
+jalik:ufs
diff --git a/.meteor/versions b/.meteor/versions
index 19c9bf5..14421c0 100644
--- a/.meteor/versions
+++ b/.meteor/versions
@@ -14,6 +14,7 @@ blaze@2.1.7
 blaze-tools@1.0.8
 boilerplate-generator@1.0.8
 caching-compiler@1.0.4
+caching-html-compiler@1.0.6
 callback-hook@1.0.8
 check@1.2.1
 ddp@1.2.5
@@ -36,11 +37,13 @@ html-tools@1.0.9
 htmljs@1.0.9
 http@1.1.5
 id-map@1.0.7
+jalik:ufs@0.5.5
 jquery@1.11.8
 launch-screen@1.0.11
 livedata@1.0.18
 localstorage@1.0.9
 logging@1.0.12
+matb33:collection-hooks@0.7.15
 meteor@1.1.14
 meteor-base@1.0.4
 minifier-css@1.1.11
@@ -73,6 +76,8 @@ srp@1.0.8
 standard-minifier-css@1.0.6
 standard-minifier-js@1.0.6
 standard-minifiers@1.0.6
+templating@1.1.9
+templating-tools@1.0.4
 tmeasday:publish-counts@0.7.3
 tracker@1.0.13
 ui@1.0.11
-- 
2.7.4


From 2cab1426b5379b693ee63c9ba625a2ce35a45872 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 2 Jun 2016 18:58:09 +0200
Subject: [PATCH 173/259] Step 20.2: Add jalik:ufs-gridfs

---
 .meteor/packages | 1 +
 .meteor/versions | 1 +
 2 files changed, 2 insertions(+)

diff --git a/.meteor/packages b/.meteor/packages
index dc3f046..22f664c 100644
--- a/.meteor/packages
+++ b/.meteor/packages
@@ -24,3 +24,4 @@ tmeasday:publish-counts
 email
 check
 jalik:ufs
+jalik:ufs-gridfs
diff --git a/.meteor/versions b/.meteor/versions
index 14421c0..dc6d1f4 100644
--- a/.meteor/versions
+++ b/.meteor/versions
@@ -38,6 +38,7 @@ htmljs@1.0.9
 http@1.1.5
 id-map@1.0.7
 jalik:ufs@0.5.5
+jalik:ufs-gridfs@0.1.1
 jquery@1.11.8
 launch-screen@1.0.11
 livedata@1.0.18
-- 
2.7.4


From 3ff64e85f03f8f59f32bcbf7edbd89395f9e063e Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 2 Jun 2016 19:00:44 +0200
Subject: [PATCH 174/259] Step 20.3: Create Images and Thumbs collections

---
 collections/images.ts | 21 +++++++++++++++++++++
 1 file changed, 21 insertions(+)
 create mode 100644 collections/images.ts

diff --git a/collections/images.ts b/collections/images.ts
new file mode 100644
index 0000000..a522111
--- /dev/null
+++ b/collections/images.ts
@@ -0,0 +1,21 @@
+import { Meteor } from 'meteor/meteor';
+import { Mongo } from 'meteor/mongo';
+
+export const Images = new Mongo.Collection('images');
+export const Thumbs = new Mongo.Collection('thumbs');
+
+function loggedIn(userId) {
+  return !!userId;
+}
+
+Thumbs.allow({
+  insert: loggedIn,
+  update: loggedIn,
+  remove: loggedIn
+});
+
+Images.allow({
+  insert: loggedIn,
+  update: loggedIn,
+  remove: loggedIn
+});
-- 
2.7.4


From 7d5a81fead99ab3a9a9051beeb73be7cc8e32a7c Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Tue, 7 Jun 2016 21:39:01 +0200
Subject: [PATCH 175/259] Step 20.4: Add Image interface

---
 typings/image.d.ts | 15 +++++++++++++++
 1 file changed, 15 insertions(+)
 create mode 100644 typings/image.d.ts

diff --git a/typings/image.d.ts b/typings/image.d.ts
new file mode 100644
index 0000000..ceb206a
--- /dev/null
+++ b/typings/image.d.ts
@@ -0,0 +1,15 @@
+interface Image {
+  _id?: string;
+  complete: boolean;
+  extension: string;
+  name: string;
+  progress: number;
+  size: number;
+  store: string;
+  token: string;
+  type: string;
+  uploadedAt: Date;
+  uploading: boolean;
+  url: string;
+  userId?: string;
+}
-- 
2.7.4


From 175a8ccbeca2a99482126166b3184d31bdcc07be Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Tue, 7 Jun 2016 21:39:11 +0200
Subject: [PATCH 176/259] Step 20.5: Add Thumb interface

---
 typings/thumb.d.ts | 4 ++++
 1 file changed, 4 insertions(+)
 create mode 100644 typings/thumb.d.ts

diff --git a/typings/thumb.d.ts b/typings/thumb.d.ts
new file mode 100644
index 0000000..01ef773
--- /dev/null
+++ b/typings/thumb.d.ts
@@ -0,0 +1,4 @@
+interface Thumb extends Image  {
+  originalStore?: string;
+  originalId?: string;
+}
-- 
2.7.4


From 5d8096a0cd77604c0196e3859fbdae228a637c40 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Tue, 7 Jun 2016 21:39:34 +0200
Subject: [PATCH 177/259] Step 20.6: Add Image interface to Images Collection

---
 collections/images.ts | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/collections/images.ts b/collections/images.ts
index a522111..05b681b 100644
--- a/collections/images.ts
+++ b/collections/images.ts
@@ -1,8 +1,8 @@
 import { Meteor } from 'meteor/meteor';
 import { Mongo } from 'meteor/mongo';
 
-export const Images = new Mongo.Collection('images');
-export const Thumbs = new Mongo.Collection('thumbs');
+export const Images = new Mongo.Collection<Image>('images');
+export const Thumbs = new Mongo.Collection<Thumb>('thumbs');
 
 function loggedIn(userId) {
   return !!userId;
-- 
2.7.4


From cdc4242ad535fe2670092bcfe04b31c73547d39d Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 2 Jun 2016 19:01:43 +0200
Subject: [PATCH 178/259] Step 20.7: Create ThumbsStore and ImagesStore

---
 collections/images.ts | 17 +++++++++++++++++
 1 file changed, 17 insertions(+)

diff --git a/collections/images.ts b/collections/images.ts
index 05b681b..23b9d1a 100644
--- a/collections/images.ts
+++ b/collections/images.ts
@@ -1,5 +1,6 @@
 import { Meteor } from 'meteor/meteor';
 import { Mongo } from 'meteor/mongo';
+import { UploadFS } from 'meteor/jalik:ufs';
 
 export const Images = new Mongo.Collection<Image>('images');
 export const Thumbs = new Mongo.Collection<Thumb>('thumbs');
@@ -19,3 +20,19 @@ Images.allow({
   update: loggedIn,
   remove: loggedIn
 });
+
+export const ThumbsStore = new UploadFS.store.GridFS({
+  collection: Thumbs,
+  name: 'thumbs'
+});
+
+export const ImagesStore = new UploadFS.store.GridFS({
+  collection: Images,
+  name: 'images',
+  filter: new UploadFS.Filter({
+    contentTypes: ['image/*']
+  }),
+  copyTo: [
+    ThumbsStore
+  ]
+});
-- 
2.7.4


From aceccaa7546b8cba067fe097d98fc5a473f3a4a0 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 2 Jun 2016 19:04:16 +0200
Subject: [PATCH 179/259] Step 20.8: Resize images

---
 collections/images.ts | 14 +++++++++++++-
 1 file changed, 13 insertions(+), 1 deletion(-)

diff --git a/collections/images.ts b/collections/images.ts
index 23b9d1a..9286ded 100644
--- a/collections/images.ts
+++ b/collections/images.ts
@@ -23,7 +23,19 @@ Images.allow({
 
 export const ThumbsStore = new UploadFS.store.GridFS({
   collection: Thumbs,
-  name: 'thumbs'
+  name: 'thumbs',
+  transformWrite(from, to, fileId, file) {
+    // Resize to 32x32
+    const gm = require('gm');
+
+    gm(from, file.name)
+      .resize(32, 32)
+      .gravity('Center')
+      .extent(32, 32)
+      .quality(75)
+      .stream()
+      .pipe(to);
+  }
 });
 
 export const ImagesStore = new UploadFS.store.GridFS({
-- 
2.7.4


From 7859a9193257b7ad5122b9415c1f67e62363e894 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 2 Jun 2016 19:04:46 +0200
Subject: [PATCH 180/259] Step 20.9: Install gm

---
 package.json | 1 +
 1 file changed, 1 insertion(+)

diff --git a/package.json b/package.json
index a6e5972..1f9f29d 100644
--- a/package.json
+++ b/package.json
@@ -22,6 +22,7 @@
     "angular2-meteor-polyfills": "^0.1.1",
     "angular2-pagination": "0.2.1",
     "es6-shim": "^0.35.1",
+    "gm": "^1.22.0",
     "meteor-node-stubs": "^0.2.3",
     "ng2-material": "0.4.1",
     "reflect-metadata": "^0.1.2",
-- 
2.7.4


From 416830ec83b1da9fc67ed7eadd0efda837638871 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Fri, 3 Jun 2016 09:38:16 +0200
Subject: [PATCH 181/259] Step 20.10: Create a view for an upload

---
 client/imports/parties-upload/parties-upload.html | 5 +++++
 1 file changed, 5 insertions(+)
 create mode 100644 client/imports/parties-upload/parties-upload.html

diff --git a/client/imports/parties-upload/parties-upload.html b/client/imports/parties-upload/parties-upload.html
new file mode 100644
index 0000000..2a5ca95
--- /dev/null
+++ b/client/imports/parties-upload/parties-upload.html
@@ -0,0 +1,5 @@
+<div layout="column">
+  <div>
+    <div>Drop an image to here</div>
+  </div>
+</div>
-- 
2.7.4


From 4a508bcf59cfcd1020a62466e94db454df6f9aff Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Fri, 3 Jun 2016 09:41:02 +0200
Subject: [PATCH 182/259] Step 20.11: Create PartiesUpload component

---
 client/imports/parties-upload/parties-upload.ts | 11 +++++++++++
 1 file changed, 11 insertions(+)
 create mode 100644 client/imports/parties-upload/parties-upload.ts

diff --git a/client/imports/parties-upload/parties-upload.ts b/client/imports/parties-upload/parties-upload.ts
new file mode 100644
index 0000000..60ec8d0
--- /dev/null
+++ b/client/imports/parties-upload/parties-upload.ts
@@ -0,0 +1,11 @@
+import { Component } from '@angular/core';
+import { FileDropDirective } from 'angular2-file-drop';
+
+@Component({
+  selector: 'parties-upload',
+  templateUrl: '/client/imports/parties-upload/parties-upload.html',
+  directives: [ FileDropDirective ]
+})
+export class PartiesUpload {
+  constructor() {}
+}
-- 
2.7.4


From 5deb4b20a5a8449e74b854d0b600c8e01b090b3d Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Fri, 3 Jun 2016 09:45:05 +0200
Subject: [PATCH 183/259] Step 20.12: Add to PartiesForm

---
 client/imports/parties-form/parties-form.ts | 5 +++--
 1 file changed, 3 insertions(+), 2 deletions(-)

diff --git a/client/imports/parties-form/parties-form.ts b/client/imports/parties-form/parties-form.ts
index fe3fdf0..ae79ad7 100644
--- a/client/imports/parties-form/parties-form.ts
+++ b/client/imports/parties-form/parties-form.ts
@@ -2,6 +2,7 @@ import 'reflect-metadata';
 import { Component } from '@angular/core';
 import { FormBuilder, ControlGroup, Validators, Control } from '@angular/common';
 import { Parties } from '../../../collections/parties.ts';
+import { PartiesUpload } from '../parties-upload/parties-upload';
 import { Meteor } from 'meteor/meteor';
 import {MATERIAL_DIRECTIVES} from 'ng2-material';
 import {MdCheckbox} from '@angular2-material/checkbox';
@@ -10,7 +11,7 @@ import {MD_INPUT_DIRECTIVES} from '@angular2-material/input';
 @Component({
   selector: 'parties-form',
   templateUrl: '/client/imports/parties-form/parties-form.html',
-  directives: [MATERIAL_DIRECTIVES, MdCheckbox, MD_INPUT_DIRECTIVES]
+  directives: [ MATERIAL_DIRECTIVES, MdCheckbox, MD_INPUT_DIRECTIVES, PartiesUpload ]
 })
 export class PartiesForm {
   partiesForm: ControlGroup;
@@ -48,4 +49,4 @@ export class PartiesForm {
       }
     }
   }
-}
\ No newline at end of file
+}
-- 
2.7.4


From f81209ff1851a9458b1e07587640a6b58d49d2e2 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Fri, 3 Jun 2016 09:47:11 +0200
Subject: [PATCH 184/259] Step 20.13: Implement to the view

---
 client/imports/parties-form/parties-form.html | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/client/imports/parties-form/parties-form.html b/client/imports/parties-form/parties-form.html
index 1a2c0ff..4feae40 100644
--- a/client/imports/parties-form/parties-form.html
+++ b/client/imports/parties-form/parties-form.html
@@ -8,6 +8,8 @@
         <md-checkbox [(checked)]="public">Public</md-checkbox>
     </div>
 
+    <parties-upload></parties-upload>
+
     <button md-raised-button type="submit" class="md-primary">Add Party!</button>
   </fieldset>
-</form>
\ No newline at end of file
+</form>
-- 
2.7.4


From e87453f79816ec36cd07eea456fc7d0bf77d92fd Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Fri, 3 Jun 2016 09:48:15 +0200
Subject: [PATCH 185/259] Step 20.14: Install angular2-file-drop

---
 package.json | 1 +
 1 file changed, 1 insertion(+)

diff --git a/package.json b/package.json
index 1f9f29d..a97fed1 100644
--- a/package.json
+++ b/package.json
@@ -15,6 +15,7 @@
     "@angular2-material/checkbox": "2.0.0-alpha.4",
     "@angular2-material/input": "2.0.0-alpha.4",
     "@angular2-material/toolbar": "2.0.0-alpha.4",
+    "angular2-file-drop": "^0.0.3",
     "angular2-google-maps": "0.12.0",
     "angular2-meteor": "^0.5.6",
     "angular2-meteor-accounts-ui": "0.5.0",
-- 
2.7.4


From 1caccf559673b50a9b661702ddd67b3c67247fa1 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 6 Jun 2016 14:03:32 +0200
Subject: [PATCH 186/259] Step 20.15: Use in the view

---
 client/imports/parties-upload/parties-upload.html | 5 ++++-
 1 file changed, 4 insertions(+), 1 deletion(-)

diff --git a/client/imports/parties-upload/parties-upload.html b/client/imports/parties-upload/parties-upload.html
index 2a5ca95..63090cb 100644
--- a/client/imports/parties-upload/parties-upload.html
+++ b/client/imports/parties-upload/parties-upload.html
@@ -1,5 +1,8 @@
 <div layout="column">
-  <div>
+  <div fileDrop
+    [ngClass]="{'file-is-over': fileIsOver}"
+    (fileOver)="fileOver($event)"
+    (onFileDrop)="onFileDrop($event)">
     <div>Drop an image to here</div>
   </div>
 </div>
-- 
2.7.4


From 59ae4b663e241e57cc52a9740465fdc1737b7f53 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 6 Jun 2016 14:05:13 +0200
Subject: [PATCH 187/259] Step 20.16: Handle fileIsOver

---
 client/imports/parties-upload/parties-upload.ts | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/client/imports/parties-upload/parties-upload.ts b/client/imports/parties-upload/parties-upload.ts
index 60ec8d0..628b37b 100644
--- a/client/imports/parties-upload/parties-upload.ts
+++ b/client/imports/parties-upload/parties-upload.ts
@@ -7,5 +7,11 @@ import { FileDropDirective } from 'angular2-file-drop';
   directives: [ FileDropDirective ]
 })
 export class PartiesUpload {
+  public fileIsOver: boolean = false;
+
   constructor() {}
+
+  public fileOver(fileIsOver: boolean): void {
+    this.fileIsOver = fileIsOver;
+  }
 }
-- 
2.7.4


From a7b4467896c143c3afc033e4aa09529d2514c84a Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 6 Jun 2016 14:09:22 +0200
Subject: [PATCH 188/259] Step 20.17: Implement onFileDrop method

---
 client/imports/parties-upload/parties-upload.ts | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/client/imports/parties-upload/parties-upload.ts b/client/imports/parties-upload/parties-upload.ts
index 628b37b..55c3520 100644
--- a/client/imports/parties-upload/parties-upload.ts
+++ b/client/imports/parties-upload/parties-upload.ts
@@ -14,4 +14,8 @@ export class PartiesUpload {
   public fileOver(fileIsOver: boolean): void {
     this.fileIsOver = fileIsOver;
   }
+
+  public onFileDrop(file: File): void {
+    console.log('Got file');
+  }
 }
-- 
2.7.4


From a86b75dc9c2e0235eb516fab23de14006800bdec Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 6 Jun 2016 14:34:21 +0200
Subject: [PATCH 189/259] Step 20.18: Implement upload method

---
 collections/methods.ts | 33 ++++++++++++++++++++++++++++++++-
 1 file changed, 32 insertions(+), 1 deletion(-)

diff --git a/collections/methods.ts b/collections/methods.ts
index d11acab..9b1a7ba 100644
--- a/collections/methods.ts
+++ b/collections/methods.ts
@@ -2,6 +2,8 @@ import {Parties} from './parties.ts';
 import {Email} from 'meteor/email';
 import {check} from 'meteor/check';
 import {Meteor} from 'meteor/meteor';
+import { UploadFS } from 'meteor/jalik:ufs';
+import { ImagesStore } from './images';
 
 function getContactEmail(user:Meteor.User):string {
   if (user.emails && user.emails.length)
@@ -89,4 +91,33 @@ Meteor.methods({
         { $push: { rsvps: { userId: this.userId, response: rsvp } } });
     }
   }
-});
\ No newline at end of file
+});
+
+export function upload(sourceFile: File, resolve?: Function, reject?: Function) {
+  // pick from an object only: name, type and size
+  const file = {
+    name: sourceFile.name,
+    type: sourceFile.type,
+    size: sourceFile.size,
+  }
+  const reader = new FileReader();
+
+  // handle progress
+  reader.onload = (ev: ProgressEvent) => {
+    if (ev.type === 'load') {
+      const upload = new UploadFS.Uploader({
+        data: ev.target.result,
+        file,
+        store: ImagesStore,
+        onError: reject,
+        onComplete: resolve
+      });
+
+      upload.start();
+    } else if (ev.type === 'error') {
+      throw new Error(`Couldn't load file`);
+    }
+  };
+  // as ArrayBuffer
+  reader.readAsArrayBuffer(sourceFile);
+}
-- 
2.7.4


From 79cd06f3e2e4c7dc602bd427955f1cec7647e3a6 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Tue, 7 Jun 2016 18:24:14 +0200
Subject: [PATCH 190/259] Step 20.19: Use upload function

---
 client/imports/parties-upload/parties-upload.ts | 11 ++++++++++-
 1 file changed, 10 insertions(+), 1 deletion(-)

diff --git a/client/imports/parties-upload/parties-upload.ts b/client/imports/parties-upload/parties-upload.ts
index 55c3520..d0280cc 100644
--- a/client/imports/parties-upload/parties-upload.ts
+++ b/client/imports/parties-upload/parties-upload.ts
@@ -1,5 +1,6 @@
 import { Component } from '@angular/core';
 import { FileDropDirective } from 'angular2-file-drop';
+import { upload } from '../../../collections/methods';
 
 @Component({
   selector: 'parties-upload',
@@ -8,6 +9,7 @@ import { FileDropDirective } from 'angular2-file-drop';
 })
 export class PartiesUpload {
   public fileIsOver: boolean = false;
+  public uploading: boolean = false;
 
   constructor() {}
 
@@ -16,6 +18,13 @@ export class PartiesUpload {
   }
 
   public onFileDrop(file: File): void {
-    console.log('Got file');
+    this.uploading = true;
+
+    upload(file, (result) => {
+      this.uploading = false;
+    }, (error) => {
+      this.uploading = false;
+      console.log(`Something went wrong!`, error);
+    });
   }
 }
-- 
2.7.4


From 89378b479a5fb122e2abd72c231d1e6d6b662237 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Tue, 7 Jun 2016 18:32:37 +0200
Subject: [PATCH 191/259] Step 20.20: Implement classes

---
 client/imports/parties-upload/parties-upload.html | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/client/imports/parties-upload/parties-upload.html b/client/imports/parties-upload/parties-upload.html
index 63090cb..03308d4 100644
--- a/client/imports/parties-upload/parties-upload.html
+++ b/client/imports/parties-upload/parties-upload.html
@@ -1,6 +1,6 @@
 <div layout="column">
   <div fileDrop
-    [ngClass]="{'file-is-over': fileIsOver}"
+    [ngClass]="{'file-is-over': fileIsOver, 'file-uploading': uploading}"
     (fileOver)="fileOver($event)"
     (onFileDrop)="onFileDrop($event)">
     <div>Drop an image to here</div>
-- 
2.7.4


From 435d197ea1023571dd8946d5a18b7ed1d5c87676 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Tue, 7 Jun 2016 18:37:24 +0200
Subject: [PATCH 192/259] Step 20.21: Implement publications of Images and
 Thumbs

---
 server/images.ts | 15 +++++++++++++++
 1 file changed, 15 insertions(+)
 create mode 100644 server/images.ts

diff --git a/server/images.ts b/server/images.ts
new file mode 100644
index 0000000..4723250
--- /dev/null
+++ b/server/images.ts
@@ -0,0 +1,15 @@
+import { Meteor } from 'meteor/meteor';
+import { Thumbs, Images } from '../collections/images';
+
+Meteor.publish('thumbs', function(ids: string[]) {
+  return Thumbs.find({
+    originalStore: 'images',
+    originalId: {
+      $in: ids
+    }
+  });
+});
+
+Meteor.publish('images', function() {
+  return Images.find({});
+});
-- 
2.7.4


From d6b0865332f9621db1e2d1a6a831aa0fe6ba835d Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Tue, 7 Jun 2016 18:37:56 +0200
Subject: [PATCH 193/259] Step 20.22: Import those publications in the main
 server entry point

---
 server/main.ts | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/server/main.ts b/server/main.ts
index e4eb2d1..a710709 100644
--- a/server/main.ts
+++ b/server/main.ts
@@ -2,6 +2,7 @@ import {loadParties} from './load-parties.ts';
 import {Meteor} from 'meteor/meteor';
 import './parties.ts';
 import './users.ts';
+import './images';
 import '../collections/methods.ts';
 
-Meteor.startup(loadParties);
\ No newline at end of file
+Meteor.startup(loadParties);
-- 
2.7.4


From ebddeab6781bd941238fec17a3d8d68c45c79b37 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Tue, 7 Jun 2016 18:27:18 +0200
Subject: [PATCH 194/259] Step 20.23: Extend by MeteorComponent

---
 client/imports/parties-upload/parties-upload.ts | 7 +++++--
 1 file changed, 5 insertions(+), 2 deletions(-)

diff --git a/client/imports/parties-upload/parties-upload.ts b/client/imports/parties-upload/parties-upload.ts
index d0280cc..4010188 100644
--- a/client/imports/parties-upload/parties-upload.ts
+++ b/client/imports/parties-upload/parties-upload.ts
@@ -1,5 +1,6 @@
 import { Component } from '@angular/core';
 import { FileDropDirective } from 'angular2-file-drop';
+import { MeteorComponent } from 'angular2-meteor';
 import { upload } from '../../../collections/methods';
 
 @Component({
@@ -7,11 +8,13 @@ import { upload } from '../../../collections/methods';
   templateUrl: '/client/imports/parties-upload/parties-upload.html',
   directives: [ FileDropDirective ]
 })
-export class PartiesUpload {
+export class PartiesUpload extends MeteorComponent {
   public fileIsOver: boolean = false;
   public uploading: boolean = false;
 
-  constructor() {}
+  constructor() {
+    super();
+  }
 
   public fileOver(fileIsOver: boolean): void {
     this.fileIsOver = fileIsOver;
-- 
2.7.4


From 863f040baeceb5932963718c9f33bc5879823bd2 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Tue, 7 Jun 2016 18:28:16 +0200
Subject: [PATCH 195/259] Step 20.24: Use ReactiveVar to keep track of files

---
 client/imports/parties-upload/parties-upload.ts | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/client/imports/parties-upload/parties-upload.ts b/client/imports/parties-upload/parties-upload.ts
index 4010188..ee4adb0 100644
--- a/client/imports/parties-upload/parties-upload.ts
+++ b/client/imports/parties-upload/parties-upload.ts
@@ -1,6 +1,7 @@
 import { Component } from '@angular/core';
 import { FileDropDirective } from 'angular2-file-drop';
 import { MeteorComponent } from 'angular2-meteor';
+import { ReactiveVar } from 'meteor/reactive-var';
 import { upload } from '../../../collections/methods';
 
 @Component({
@@ -11,6 +12,7 @@ import { upload } from '../../../collections/methods';
 export class PartiesUpload extends MeteorComponent {
   public fileIsOver: boolean = false;
   public uploading: boolean = false;
+  public files: ReactiveVar<string[]> = new ReactiveVar<string[]>([]);
 
   constructor() {
     super();
-- 
2.7.4


From 627fe74f9cf7ed2731487eb9dc4dd2d8c3dbaa02 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Tue, 7 Jun 2016 18:29:26 +0200
Subject: [PATCH 196/259] Step 20.25: Subscribe to Thumbs

---
 client/imports/parties-upload/parties-upload.ts | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/client/imports/parties-upload/parties-upload.ts b/client/imports/parties-upload/parties-upload.ts
index ee4adb0..33f70b1 100644
--- a/client/imports/parties-upload/parties-upload.ts
+++ b/client/imports/parties-upload/parties-upload.ts
@@ -16,6 +16,12 @@ export class PartiesUpload extends MeteorComponent {
 
   constructor() {
     super();
+
+    this.autorun(() => {
+      this.subscribe('thumbs', this.files.get(), () => {
+        // subscription ready
+      }, true);
+    });
   }
 
   public fileOver(fileIsOver: boolean): void {
-- 
2.7.4


From 407443046f9e042dadf527e5472b7161000053c5 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Tue, 7 Jun 2016 18:30:33 +0200
Subject: [PATCH 197/259] Step 20.26: Look for thumbnails

---
 client/imports/parties-upload/parties-upload.ts | 10 +++++++++-
 1 file changed, 9 insertions(+), 1 deletion(-)

diff --git a/client/imports/parties-upload/parties-upload.ts b/client/imports/parties-upload/parties-upload.ts
index 33f70b1..3ac1309 100644
--- a/client/imports/parties-upload/parties-upload.ts
+++ b/client/imports/parties-upload/parties-upload.ts
@@ -2,7 +2,9 @@ import { Component } from '@angular/core';
 import { FileDropDirective } from 'angular2-file-drop';
 import { MeteorComponent } from 'angular2-meteor';
 import { ReactiveVar } from 'meteor/reactive-var';
+import { Mongo } from 'meteor/mongo';
 import { upload } from '../../../collections/methods';
+import { Thumbs } from '../../../collections/images';
 
 @Component({
   selector: 'parties-upload',
@@ -13,13 +15,19 @@ export class PartiesUpload extends MeteorComponent {
   public fileIsOver: boolean = false;
   public uploading: boolean = false;
   public files: ReactiveVar<string[]> = new ReactiveVar<string[]>([]);
+  public thumbs: Mongo.Cursor<Thumb>;
 
   constructor() {
     super();
 
     this.autorun(() => {
       this.subscribe('thumbs', this.files.get(), () => {
-        // subscription ready
+        this.thumbs = Thumbs.find({
+          originalStore: 'images',
+          originalId: {
+            $in: this.files.get()
+          }
+        });
       }, true);
     });
   }
-- 
2.7.4


From b83ea8440aa383b95636c7320bb7201ce1e1f8d4 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Tue, 7 Jun 2016 18:33:18 +0200
Subject: [PATCH 198/259] Step 20.27: Implement thumbnails in the view

---
 client/imports/parties-upload/parties-upload.html | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/client/imports/parties-upload/parties-upload.html b/client/imports/parties-upload/parties-upload.html
index 03308d4..364607c 100644
--- a/client/imports/parties-upload/parties-upload.html
+++ b/client/imports/parties-upload/parties-upload.html
@@ -5,4 +5,10 @@
     (onFileDrop)="onFileDrop($event)">
     <div>Drop an image to here</div>
   </div>
+
+  <div layout="row" *ngIf="thumbs">
+    <div *ngFor="let thumb of thumbs">
+      <img [src]="thumb.url"/>
+    </div>
+  </div>
 </div>
-- 
2.7.4


From 423f5c70f3bbee7835586cc83731b6f462d3bd15 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Tue, 7 Jun 2016 18:35:30 +0200
Subject: [PATCH 199/259] Step 20.28: Basic styles

---
 client/imports/parties-upload/_parties-upload.scss | 16 ++++++++++++++++
 1 file changed, 16 insertions(+)
 create mode 100644 client/imports/parties-upload/_parties-upload.scss

diff --git a/client/imports/parties-upload/_parties-upload.scss b/client/imports/parties-upload/_parties-upload.scss
new file mode 100644
index 0000000..fec28d7
--- /dev/null
+++ b/client/imports/parties-upload/_parties-upload.scss
@@ -0,0 +1,16 @@
+.file-uploading {
+  opacity: 0.3;
+}
+
+.file-is-over {
+  opacity: 0.7;
+}
+
+[filedrop] {
+  width: 100%;
+  height: 100px;
+  line-height: 100px;
+  text-align: center;
+  background-color: #f1f1f1;
+  margin: 10px 0;
+}
-- 
2.7.4


From d0ccc0eed369c45552a904b7c75430996f97483a Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Tue, 7 Jun 2016 18:36:13 +0200
Subject: [PATCH 200/259] Step 20.29: Import styles inside main.scss

---
 client/css/main.scss | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/client/css/main.scss b/client/css/main.scss
index 71a87ec..0b45a43 100644
--- a/client/css/main.scss
+++ b/client/css/main.scss
@@ -44,4 +44,4 @@ body {
 
 @import "../imports/parties-list/parties-list";
 @import "../imports/party-details/party-details";
-
+@import "../imports/parties-upload/parties-upload";
-- 
2.7.4


From 6813ffa8293ae3424d0707bddbf95ed6ee73c353 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Tue, 7 Jun 2016 18:31:11 +0200
Subject: [PATCH 201/259] Step 20.30: Handle file upload

---
 client/imports/parties-upload/parties-upload.ts | 7 +++++++
 1 file changed, 7 insertions(+)

diff --git a/client/imports/parties-upload/parties-upload.ts b/client/imports/parties-upload/parties-upload.ts
index 3ac1309..126b653 100644
--- a/client/imports/parties-upload/parties-upload.ts
+++ b/client/imports/parties-upload/parties-upload.ts
@@ -41,9 +41,16 @@ export class PartiesUpload extends MeteorComponent {
 
     upload(file, (result) => {
       this.uploading = false;
+      this.addFile(result);
     }, (error) => {
       this.uploading = false;
       console.log(`Something went wrong!`, error);
     });
   }
+
+  public addFile(file) {
+    // update array with files
+    this.files.get().push(file._id);
+    this.files.set(this.files.get());
+  }
 }
-- 
2.7.4


From b971da8154fdcc4eeb952f094c3f1522110c39af Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Tue, 7 Jun 2016 18:32:00 +0200
Subject: [PATCH 202/259] Step 20.31: Emit event on new file

---
 client/imports/parties-upload/parties-upload.ts | 5 ++++-
 1 file changed, 4 insertions(+), 1 deletion(-)

diff --git a/client/imports/parties-upload/parties-upload.ts b/client/imports/parties-upload/parties-upload.ts
index 126b653..1221861 100644
--- a/client/imports/parties-upload/parties-upload.ts
+++ b/client/imports/parties-upload/parties-upload.ts
@@ -1,4 +1,4 @@
-import { Component } from '@angular/core';
+import { Component, Output, EventEmitter } from '@angular/core';
 import { FileDropDirective } from 'angular2-file-drop';
 import { MeteorComponent } from 'angular2-meteor';
 import { ReactiveVar } from 'meteor/reactive-var';
@@ -16,6 +16,7 @@ export class PartiesUpload extends MeteorComponent {
   public uploading: boolean = false;
   public files: ReactiveVar<string[]> = new ReactiveVar<string[]>([]);
   public thumbs: Mongo.Cursor<Thumb>;
+  @Output() public onFile: EventEmitter<string> = new EventEmitter<string>();
 
   constructor() {
     super();
@@ -52,5 +53,7 @@ export class PartiesUpload extends MeteorComponent {
     // update array with files
     this.files.get().push(file._id);
     this.files.set(this.files.get());
+    // emit new file
+    this.onFile.emit(file._id);
   }
 }
-- 
2.7.4


From cb69a43fed7a24042c799a97d47177e9e88910f8 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Tue, 7 Jun 2016 18:38:57 +0200
Subject: [PATCH 203/259] Step 20.32: Add images to PartiesForm

---
 client/imports/parties-form/parties-form.ts | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/client/imports/parties-form/parties-form.ts b/client/imports/parties-form/parties-form.ts
index ae79ad7..cdc74b3 100644
--- a/client/imports/parties-form/parties-form.ts
+++ b/client/imports/parties-form/parties-form.ts
@@ -15,6 +15,7 @@ import {MD_INPUT_DIRECTIVES} from '@angular2-material/input';
 })
 export class PartiesForm {
   partiesForm: ControlGroup;
+  images: string[] = [];
 
   constructor() {
     let fb = new FormBuilder();
@@ -36,6 +37,7 @@ export class PartiesForm {
           location: {
             name: party.location
           },
+          images: this.images,
           'public': party.public,
           owner: Meteor.userId()
         });
@@ -49,4 +51,8 @@ export class PartiesForm {
       }
     }
   }
+
+  onImage(imageId: string) {
+    this.images.push(imageId);
+  }
 }
-- 
2.7.4


From e82260e59361dd467cc119f05cdec33ea983c76e Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Tue, 7 Jun 2016 21:38:37 +0200
Subject: [PATCH 204/259] Step 20.33: Add images property to Party interface

---
 typings/party.d.ts | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/typings/party.d.ts b/typings/party.d.ts
index 2872814..9d88aa6 100644
--- a/typings/party.d.ts
+++ b/typings/party.d.ts
@@ -9,6 +9,7 @@ interface Party {
     lat?: number;
     lng?: number;
   };
+  images?: Array<string>,
   invited?: Array<string>;
   rsvps?: Array<RSVP>;
 }
@@ -16,4 +17,4 @@ interface Party {
 interface RSVP {
   userId: string;
   response: string;
-}
\ No newline at end of file
+}
-- 
2.7.4


From 9655e45a7ce3b2ed40a97f7fb384ab9310b96e8b Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Tue, 7 Jun 2016 18:39:19 +0200
Subject: [PATCH 205/259] Step 20.34: Add event binding

---
 client/imports/parties-form/parties-form.html | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/client/imports/parties-form/parties-form.html b/client/imports/parties-form/parties-form.html
index 4feae40..0f38a31 100644
--- a/client/imports/parties-form/parties-form.html
+++ b/client/imports/parties-form/parties-form.html
@@ -8,7 +8,7 @@
         <md-checkbox [(checked)]="public">Public</md-checkbox>
     </div>
 
-    <parties-upload></parties-upload>
+    <parties-upload (onFile)="onImage($event)"></parties-upload>
 
     <button md-raised-button type="submit" class="md-primary">Add Party!</button>
   </fieldset>
-- 
2.7.4


From 885402926f7c2e1154c82188f496260e4a090b59 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Tue, 7 Jun 2016 21:36:23 +0200
Subject: [PATCH 206/259] Step 20.35: Create DisplayMainImage pipe

---
 client/imports/pipes/pipes.ts | 29 +++++++++++++++++++++++++++++
 1 file changed, 29 insertions(+)

diff --git a/client/imports/pipes/pipes.ts b/client/imports/pipes/pipes.ts
index ddce20e..c404184 100644
--- a/client/imports/pipes/pipes.ts
+++ b/client/imports/pipes/pipes.ts
@@ -2,6 +2,7 @@ import 'reflect-metadata';
 import { Pipe } from '@angular/core';
 import { Meteor } from 'meteor/meteor';
 import { Parties } from '../../../collections/parties.ts';
+import { Images } from '../../../collections/images';
 import { MeteorComponent } from 'angular2-meteor';
 
 @Pipe({
@@ -25,6 +26,34 @@ export class DisplayName {
   }
 }
 
+@Pipe({
+  name: 'displayMainImage',
+  pure: false
+})
+export class DisplayMainImagePipe extends MeteorComponent {
+  constructor() {
+    super();
+  }
+
+  transform(party: Party) {
+    if (!party) {
+      return;
+    }
+
+    let imageUrl: string;
+    let imageId: string = (party.images || [])[0];
+
+    this.autorun(() => {
+      const found = Images.findOne(imageId);
+      if (found) {
+        imageUrl = found.url;
+      }
+    }, true);
+
+    return imageUrl;
+  }
+}
+
 
 @Pipe({
   name: 'rsvp',
-- 
2.7.4


From f4b6331edd048061f9233bb7417947b445d1a707 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Tue, 7 Jun 2016 21:37:18 +0200
Subject: [PATCH 207/259] Step 20.36: Inject DisplayMainImagePipe

---
 client/imports/parties-list/parties-list.ts | 6 ++++--
 1 file changed, 4 insertions(+), 2 deletions(-)

diff --git a/client/imports/parties-list/parties-list.ts b/client/imports/parties-list/parties-list.ts
index e9df0a1..7ea93b2 100644
--- a/client/imports/parties-list/parties-list.ts
+++ b/client/imports/parties-list/parties-list.ts
@@ -8,7 +8,7 @@ import { MeteorComponent } from 'angular2-meteor';
 import { ReactiveVar } from 'meteor/reactive-var';
 import { Counts } from 'meteor/tmeasday:publish-counts';
 import { PaginationService, PaginatePipe, PaginationControlsCmp } from 'angular2-pagination';
-import { RsvpPipe } from '../pipes/pipes.ts';
+import { RsvpPipe, DisplayMainImagePipe } from '../pipes/pipes.ts';
 import { Meteor } from 'meteor/meteor';
 import {GOOGLE_MAPS_DIRECTIVES} from 'angular2-google-maps/core';
 import {MATERIAL_DIRECTIVES} from 'ng2-material';
@@ -19,7 +19,7 @@ import {MD_INPUT_DIRECTIVES} from '@angular2-material/input';
   viewProviders: [PaginationService],
   templateUrl: '/client/imports/parties-list/parties-list.html',
   directives: [MATERIAL_DIRECTIVES, GOOGLE_MAPS_DIRECTIVES, PartiesForm, ROUTER_DIRECTIVES, PaginationControlsCmp, MD_INPUT_DIRECTIVES],
-  pipes: [PaginatePipe, RsvpPipe]
+  pipes: [PaginatePipe, RsvpPipe, DisplayMainImagePipe]
 })
 @InjectUser()
 export class PartiesList extends MeteorComponent{
@@ -44,6 +44,8 @@ export class PartiesList extends MeteorComponent{
       this.subscribe('parties', options, this.location.get(), () => {
         this.parties = Parties.find({}, { sort: { name: this.nameOrder.get() } });
       }, true);
+
+      this.subscribe('images');
     });
 
     this.autorun(() => {
-- 
2.7.4


From fbed7332e33c089e22ce4fae386cb9ee0a2cf0c2 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Tue, 7 Jun 2016 21:37:34 +0200
Subject: [PATCH 208/259] Step 20.37: Implement pipe

---
 client/imports/parties-list/parties-list.html | 1 +
 1 file changed, 1 insertion(+)

diff --git a/client/imports/parties-list/parties-list.html b/client/imports/parties-list/parties-list.html
index b25eb0b..dbe6368 100644
--- a/client/imports/parties-list/parties-list.html
+++ b/client/imports/parties-list/parties-list.html
@@ -27,6 +27,7 @@
                      class="ma-party">
                     <md-card>
                         <md-card-content>
+                            <img *ngIf="party.images" class="party-main-image" [src]="party | displayMainImage">
                             <h2 class="md-title ma-name" style=""><a
                                     [routerLink]="['/party', party._id]">{{party.name}}</a></h2>
                             <p class="ma-description"
-- 
2.7.4


From e520f5921ea5b56d1f1150476f77014d5e0dbf32 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Tue, 7 Jun 2016 21:37:49 +0200
Subject: [PATCH 209/259] Step 20.38: Add styles

---
 client/imports/parties-list/_parties-list.scss | 8 +++++++-
 1 file changed, 7 insertions(+), 1 deletion(-)

diff --git a/client/imports/parties-list/_parties-list.scss b/client/imports/parties-list/_parties-list.scss
index d6512b5..6ea35e0 100644
--- a/client/imports/parties-list/_parties-list.scss
+++ b/client/imports/parties-list/_parties-list.scss
@@ -58,4 +58,10 @@
 
 .search-form {
   margin-bottom: 1em;
-}
\ No newline at end of file
+}
+
+
+img.party-main-image {
+  max-width: 100%;
+  max-height: 100%;
+}
-- 
2.7.4


From ab809808e87f6c57395e163a91e49bddf7b78a38 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 13 Jun 2016 15:14:14 +0200
Subject: [PATCH 210/259] Step 21.1: Add mobile platform

---
 .meteor/platforms | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/.meteor/platforms b/.meteor/platforms
index efeba1b..0b0ddcc 100644
--- a/.meteor/platforms
+++ b/.meteor/platforms
@@ -1,2 +1,3 @@
-server
+android
 browser
+server
-- 
2.7.4


From f4dc54857d7716fdc19d39e42509df8cb763dd20 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 13 Jun 2016 15:15:39 +0200
Subject: [PATCH 211/259] Step 21.2: Rename to login.web.html

---
 client/imports/auth/login.html     | 33 ---------------------------------
 client/imports/auth/login.web.html | 33 +++++++++++++++++++++++++++++++++
 2 files changed, 33 insertions(+), 33 deletions(-)
 delete mode 100644 client/imports/auth/login.html
 create mode 100644 client/imports/auth/login.web.html

diff --git a/client/imports/auth/login.html b/client/imports/auth/login.html
deleted file mode 100644
index d4c9c96..0000000
--- a/client/imports/auth/login.html
+++ /dev/null
@@ -1,33 +0,0 @@
-<md-content layout="row" layout-align="center start" layout-fill layout-margin>
-    <md-whiteframe layout="column" flex flex-md="50" flex-lg="50" flex-gt-lg="33" class="md-whiteframe-z2" layout-fill>
-        <md-toolbar class="md-primary" color="primary">
-            Sign in
-        </md-toolbar>
-        <div layout="column" layout-fill layout-margin layout-padding>
-            <div layout="row" layout-fill layout-margin>
-                <p class="md-body-2"> Sign in with your email</p>
-            </div>
-
-            <form [ngFormModel]="loginForm" #f="ngForm" (submit)="login(f.value)" layout="column" layout-fill
-                  layout-padding layout-margin>
-                <md-input ngControl="email" placeholder="Email" aria-label="email"></md-input>
-                <md-input type="password" placeholder="Password" ngControl="password" aria-label="password"></md-input>
-
-                <div layout="row" layout-align="space-between center">
-                    <button md-button [routerLink]="['/recover']">Forgot password?</button>
-                    <button md-raised-button class="md-primary" type="submit" aria-label="login">Sign In
-                    </button>
-                </div>
-            </form>
-            <div [hidden]="error == ''">
-                <md-toolbar class="md-warn" layout="row" layout-fill layout-padding layout-margin>
-                    <p class="md-body-1">{{ error }}</p>
-                </md-toolbar>
-            </div>
-            <md-divider></md-divider>
-            <div layout="row" layout-align="center">
-                <button md-button [routerLink]="['/signup']">Need an account?</button>
-            </div>
-        </div>
-    </md-whiteframe>
-</md-content>
diff --git a/client/imports/auth/login.web.html b/client/imports/auth/login.web.html
new file mode 100644
index 0000000..d4c9c96
--- /dev/null
+++ b/client/imports/auth/login.web.html
@@ -0,0 +1,33 @@
+<md-content layout="row" layout-align="center start" layout-fill layout-margin>
+    <md-whiteframe layout="column" flex flex-md="50" flex-lg="50" flex-gt-lg="33" class="md-whiteframe-z2" layout-fill>
+        <md-toolbar class="md-primary" color="primary">
+            Sign in
+        </md-toolbar>
+        <div layout="column" layout-fill layout-margin layout-padding>
+            <div layout="row" layout-fill layout-margin>
+                <p class="md-body-2"> Sign in with your email</p>
+            </div>
+
+            <form [ngFormModel]="loginForm" #f="ngForm" (submit)="login(f.value)" layout="column" layout-fill
+                  layout-padding layout-margin>
+                <md-input ngControl="email" placeholder="Email" aria-label="email"></md-input>
+                <md-input type="password" placeholder="Password" ngControl="password" aria-label="password"></md-input>
+
+                <div layout="row" layout-align="space-between center">
+                    <button md-button [routerLink]="['/recover']">Forgot password?</button>
+                    <button md-raised-button class="md-primary" type="submit" aria-label="login">Sign In
+                    </button>
+                </div>
+            </form>
+            <div [hidden]="error == ''">
+                <md-toolbar class="md-warn" layout="row" layout-fill layout-padding layout-margin>
+                    <p class="md-body-1">{{ error }}</p>
+                </md-toolbar>
+            </div>
+            <md-divider></md-divider>
+            <div layout="row" layout-align="center">
+                <button md-button [routerLink]="['/signup']">Need an account?</button>
+            </div>
+        </div>
+    </md-whiteframe>
+</md-content>
-- 
2.7.4


From ca7a5b637f61dae996b87d6a0d853e50423a0edd Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 13 Jun 2016 15:22:10 +0200
Subject: [PATCH 212/259] Step 21.3: Web version of Login component

---
 client/imports/auth/login.ts     | 44 ----------------------------------------
 client/imports/auth/login.web.ts | 44 ++++++++++++++++++++++++++++++++++++++++
 2 files changed, 44 insertions(+), 44 deletions(-)
 delete mode 100644 client/imports/auth/login.ts
 create mode 100644 client/imports/auth/login.web.ts

diff --git a/client/imports/auth/login.ts b/client/imports/auth/login.ts
deleted file mode 100644
index 8d7ed78..0000000
--- a/client/imports/auth/login.ts
+++ /dev/null
@@ -1,44 +0,0 @@
-import { Component } from '@angular/core';
-import { MeteorComponent } from 'angular2-meteor';
-import { FormBuilder, ControlGroup, Validators } from '@angular/common';
-import { MATERIAL_DIRECTIVES } from 'ng2-material';
-import { Router , ROUTER_DIRECTIVES} from '@angular/router';
-import { MD_INPUT_DIRECTIVES } from '@angular2-material/input';
-import { MdToolbar } from '@angular2-material/toolbar';
-import { Meteor } from 'meteor/meteor';
-
-@Component({
-  selector: 'login',
-  directives: [MATERIAL_DIRECTIVES, ROUTER_DIRECTIVES, MD_INPUT_DIRECTIVES, MdToolbar],
-  templateUrl: '/client/imports/auth/login.html'
-})
-export class Login extends MeteorComponent {
-  loginForm: ControlGroup;
-  error: string;
-
-  constructor(private router: Router) {
-    super();
-
-    let fb = new FormBuilder();
-
-    this.loginForm = fb.group({
-      email: ['', Validators.required],
-      password: ['', Validators.required]
-    });
-
-    this.error = '';
-  }
-
-  login(credentials) {
-    if (this.loginForm.valid) {
-      Meteor.loginWithPassword(credentials.email, credentials.password, (err) => {
-        if (err) {
-          this.error = err;
-        }
-        else {
-          this.router.navigate(['/']);
-        }
-      });
-    }
-  }
-}
diff --git a/client/imports/auth/login.web.ts b/client/imports/auth/login.web.ts
new file mode 100644
index 0000000..5fc26f4
--- /dev/null
+++ b/client/imports/auth/login.web.ts
@@ -0,0 +1,44 @@
+import { Component } from '@angular/core';
+import { MeteorComponent } from 'angular2-meteor';
+import { FormBuilder, ControlGroup, Validators } from '@angular/common';
+import { MATERIAL_DIRECTIVES } from 'ng2-material';
+import { Router , ROUTER_DIRECTIVES} from '@angular/router';
+import { MD_INPUT_DIRECTIVES } from '@angular2-material/input';
+import { MdToolbar } from '@angular2-material/toolbar';
+import { Meteor } from 'meteor/meteor';
+
+@Component({
+  selector: 'login',
+  directives: [MATERIAL_DIRECTIVES, ROUTER_DIRECTIVES, MD_INPUT_DIRECTIVES, MdToolbar],
+  templateUrl: '/client/imports/auth/login.web.html'
+})
+export class Login extends MeteorComponent {
+  loginForm: ControlGroup;
+  error: string;
+
+  constructor(private router: Router) {
+    super();
+
+    let fb = new FormBuilder();
+
+    this.loginForm = fb.group({
+      email: ['', Validators.required],
+      password: ['', Validators.required]
+    });
+
+    this.error = '';
+  }
+
+  login(credentials) {
+    if (this.loginForm.valid) {
+      Meteor.loginWithPassword(credentials.email, credentials.password, (err) => {
+        if (err) {
+          this.error = err;
+        }
+        else {
+          this.router.navigate(['/']);
+        }
+      });
+    }
+  }
+}
-- 
2.7.4


From 196506afa482acd32017af26e430f44225c45f6c Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 13 Jun 2016 16:35:00 +0200
Subject: [PATCH 213/259] Step 21.4: Add mys:accounts-phone

---
 .meteor/packages | 1 +
 1 file changed, 1 insertion(+)

diff --git a/.meteor/packages b/.meteor/packages
index 22f664c..53b6f2c 100644
--- a/.meteor/packages
+++ b/.meteor/packages
@@ -25,3 +25,4 @@ email
 check
 jalik:ufs
 jalik:ufs-gridfs
+mys:accounts-phone
-- 
2.7.4


From 4b85ee9c6a4ee3114192233a6b8d371b303bde58 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 13 Jun 2016 16:38:38 +0200
Subject: [PATCH 214/259] Step 21.5: Mobile version of Login component

---
 client/imports/auth/login.mobile.ts | 22 ++++++++++++++++++++++
 1 file changed, 22 insertions(+)
 create mode 100644 client/imports/auth/login.mobile.ts

diff --git a/client/imports/auth/login.mobile.ts b/client/imports/auth/login.mobile.ts
new file mode 100644
index 0000000..e587c80
--- /dev/null
+++ b/client/imports/auth/login.mobile.ts
@@ -0,0 +1,22 @@
+import { Component } from '@angular/core';
+import { MeteorComponent } from 'angular2-meteor';
+import { FormBuilder, ControlGroup, Validators } from '@angular/common';
+import { MATERIAL_DIRECTIVES } from 'ng2-material';
+import { Router , ROUTER_DIRECTIVES} from '@angular/router';
+import { MD_INPUT_DIRECTIVES } from '@angular2-material/input';
+import { MdToolbar } from '@angular2-material/toolbar';
+
+@Component({
+  selector: 'login',
+  directives: [MATERIAL_DIRECTIVES, ROUTER_DIRECTIVES, MD_INPUT_DIRECTIVES, MdToolbar],
+  templateUrl: '/client/imports/auth/login.mobile.html'
+})
+export class Login extends MeteorComponent {
+  error: string;
+
+  constructor(private router: Router) {
+    super();
+
+    this.error = '';
+  }
+}
-- 
2.7.4


From ac83d1f270699aff33acc64eba572d1a5eed670a Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 13 Jun 2016 16:38:59 +0200
Subject: [PATCH 215/259] Step 21.6: View for Mobile Login

---
 client/imports/auth/login.mobile.html | 18 ++++++++++++++++++
 1 file changed, 18 insertions(+)
 create mode 100644 client/imports/auth/login.mobile.html

diff --git a/client/imports/auth/login.mobile.html b/client/imports/auth/login.mobile.html
new file mode 100644
index 0000000..8f3282a
--- /dev/null
+++ b/client/imports/auth/login.mobile.html
@@ -0,0 +1,18 @@
+<md-content layout="row" layout-align="center start" layout-fill layout-margin>
+    <md-whiteframe layout="column" flex flex-md="50" flex-lg="50" flex-gt-lg="33" class="md-whiteframe-z2" layout-fill>
+        <md-toolbar class="md-primary" color="primary">
+            Sign in
+        </md-toolbar>
+        <div layout="column" layout-fill layout-margin layout-padding>
+            <div layout="row" layout-fill layout-margin>
+                <p class="md-body-2"> Sign in with SMS</p>
+            </div>
+
+            <div [hidden]="error == ''">
+                <md-toolbar class="md-warn" layout="row" layout-fill layout-padding layout-margin>
+                    <p class="md-body-1">{{ error }}</p>
+                </md-toolbar>
+            </div>
+        </div>
+    </md-whiteframe>
+</md-content>
-- 
2.7.4


From 34ff8c1d6084b9fdfe3bc299f46afc60324b7de9 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 13 Jun 2016 16:39:39 +0200
Subject: [PATCH 216/259] Step 21.7: View for Phone verification

---
 client/imports/auth/login.mobile.html | 10 ++++++++++
 1 file changed, 10 insertions(+)

diff --git a/client/imports/auth/login.mobile.html b/client/imports/auth/login.mobile.html
index 8f3282a..2f763f9 100644
--- a/client/imports/auth/login.mobile.html
+++ b/client/imports/auth/login.mobile.html
@@ -8,6 +8,16 @@
                 <p class="md-body-2"> Sign in with SMS</p>
             </div>
 
+            <form [ngFormModel]="phoneForm" #f="ngForm" (submit)="send(f.value)" layout="column" layout-fill
+                  layout-padding layout-margin>
+                <md-input ngControl="phone" placeholder="Phone" aria-label="phone"></md-input>
+
+                <div layout="row" layout-align="space-between center">
+                    <button md-raised-button class="md-primary" type="submit" aria-label="send">Send SMS
+                    </button>
+                </div>
+            </form>
+
             <div [hidden]="error == ''">
                 <md-toolbar class="md-warn" layout="row" layout-fill layout-padding layout-margin>
                     <p class="md-body-1">{{ error }}</p>
-- 
2.7.4


From ccfa4fdce8a7bbe5d1e1b26b1e367fa3a6bda857 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 13 Jun 2016 16:41:17 +0200
Subject: [PATCH 217/259] Step 21.8: Implement phone verification

---
 client/imports/auth/login.mobile.ts | 20 ++++++++++++++++++++
 1 file changed, 20 insertions(+)

diff --git a/client/imports/auth/login.mobile.ts b/client/imports/auth/login.mobile.ts
index e587c80..6a7c3dd 100644
--- a/client/imports/auth/login.mobile.ts
+++ b/client/imports/auth/login.mobile.ts
@@ -5,6 +5,7 @@ import { MATERIAL_DIRECTIVES } from 'ng2-material';
 import { Router , ROUTER_DIRECTIVES} from '@angular/router';
 import { MD_INPUT_DIRECTIVES } from '@angular2-material/input';
 import { MdToolbar } from '@angular2-material/toolbar';
+import { Accounts } from 'meteor/accounts-base';
 
 @Component({
   selector: 'login',
@@ -12,11 +13,30 @@ import { MdToolbar } from '@angular2-material/toolbar';
   templateUrl: '/client/imports/auth/login.mobile.html'
 })
 export class Login extends MeteorComponent {
+  phoneForm: ControlGroup;
+  phone: string;
   error: string;
 
   constructor(private router: Router) {
     super();
 
+    this.phoneForm = new FormBuilder().group({
+      phone: ['', Validators.required]
+    });
+
     this.error = '';
   }
+
+  send(credentials) {
+    if (this.phoneForm.valid) {
+      Accounts.requestPhoneVerification(credentials.phone, (err) => {
+        if (err) {
+          this.error = err.reason || err;
+        } else {
+          this.error = '';
+          this.phone = credentials.phone;
+        }
+      });
+    }
+  }
 }
-- 
2.7.4


From cff372ed7ee21ae1cc462a783f2f1f7559735bc2 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 13 Jun 2016 16:42:53 +0200
Subject: [PATCH 218/259] Step 21.9: Implement code verification

---
 client/imports/auth/login.mobile.ts | 21 +++++++++++++++++++++
 1 file changed, 21 insertions(+)

diff --git a/client/imports/auth/login.mobile.ts b/client/imports/auth/login.mobile.ts
index 6a7c3dd..ef55705 100644
--- a/client/imports/auth/login.mobile.ts
+++ b/client/imports/auth/login.mobile.ts
@@ -14,6 +14,8 @@ import { Accounts } from 'meteor/accounts-base';
 })
 export class Login extends MeteorComponent {
   phoneForm: ControlGroup;
+  verifyForm: ControlGroup;
+  isStepTwo: boolean = false;
   phone: string;
   error: string;
 
@@ -24,6 +26,10 @@ export class Login extends MeteorComponent {
       phone: ['', Validators.required]
     });
 
+    this.verifyForm = new FormBuilder().group({
+      code: ['', Validators.required]
+    });
+
     this.error = '';
   }
 
@@ -35,6 +41,21 @@ export class Login extends MeteorComponent {
         } else {
           this.error = '';
           this.phone = credentials.phone;
+          // move to code verification
+          this.isStepTwo = true;
+        }
+      });
+    }
+  }
+
+  verify(credentials) {
+    if (this.verifyForm.valid) {
+      Accounts.verifyPhone(this.phone, credentials.code, (err) => {
+        if (err) {
+          this.error = err.reason || err;
+        }
+        else {
+          this.router.navigate(['/']);
         }
       });
     }
-- 
2.7.4


From fbd7f94b149a7765c68db6d6f766704c2d7a0277 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 13 Jun 2016 16:43:48 +0200
Subject: [PATCH 219/259] Step 21.10: Form with code verification

---
 client/imports/auth/login.mobile.html | 12 +++++++++++-
 1 file changed, 11 insertions(+), 1 deletion(-)

diff --git a/client/imports/auth/login.mobile.html b/client/imports/auth/login.mobile.html
index 2f763f9..fd7a02f 100644
--- a/client/imports/auth/login.mobile.html
+++ b/client/imports/auth/login.mobile.html
@@ -8,7 +8,7 @@
                 <p class="md-body-2"> Sign in with SMS</p>
             </div>
 
-            <form [ngFormModel]="phoneForm" #f="ngForm" (submit)="send(f.value)" layout="column" layout-fill
+            <form *ngIf="!isStepTwo" [ngFormModel]="phoneForm" #f="ngForm" (submit)="send(f.value)" layout="column" layout-fill
                   layout-padding layout-margin>
                 <md-input ngControl="phone" placeholder="Phone" aria-label="phone"></md-input>
 
@@ -18,6 +18,16 @@
                 </div>
             </form>
 
+            <form *ngIf="isStepTwo" [ngFormModel]="verifyForm" #f="ngForm" (submit)="verify(f.value)" layout="column" layout-fill
+                  layout-padding layout-margin>
+                <md-input ngControl="code" placeholder="Code" aria-label="code"></md-input>
+
+                <div layout="row" layout-align="space-between center">
+                    <button md-raised-button class="md-primary" type="submit" aria-label="verify">Verify Code
+                    </button>
+                </div>
+            </form>
+
             <div [hidden]="error == ''">
                 <md-toolbar class="md-warn" layout="row" layout-fill layout-padding layout-margin>
                     <p class="md-body-1">{{ error }}</p>
-- 
2.7.4


From 8c4bef53f5fe2616a8019df0a3a302021273933a Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 13 Jun 2016 16:52:06 +0200
Subject: [PATCH 220/259] Step 21.11: Use mobile or web version of Login,
 depends on Meteor.isCordova

---
 client/app.ts | 5 +++--
 1 file changed, 3 insertions(+), 2 deletions(-)

diff --git a/client/app.ts b/client/app.ts
index 55bee82..3156121 100644
--- a/client/app.ts
+++ b/client/app.ts
@@ -15,7 +15,8 @@ import {LoginButtons} from 'angular2-meteor-accounts-ui';
 import '../node_modules/@angular2-material/toolbar/toolbar.css';
 import { DisplayName } from './imports/pipes/pipes';
 import { InjectUser } from 'angular2-meteor-accounts-ui';
-import { Login } from './imports/auth/login';
+import { Login as LoginWeb } from './imports/auth/login.web';
+import { Login as LoginMobile } from './imports/auth/login.mobile';
 import { Signup } from './imports/auth/signup';
 import { Recover } from './imports/auth/recover';
 import { Meteor } from 'meteor/meteor';
@@ -44,7 +45,7 @@ class Socially extends MeteorComponent {
 const routes: RouterConfig = [
   { path: '',              	component: PartiesList },
   { path: 'party/:partyId',	component: PartyDetails },
-  { path: 'login', 		component: Login },
+  { path: 'login', 		component: Meteor.isCordova ? LoginMobile : LoginWeb },
   { path: 'signup', 		component: Signup },
   { path: 'recover', 		component: Recover }
 ];
-- 
2.7.4


From f2c9dcf40845c7373a078c3dfe85dff402b55d76 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 13 Jun 2016 17:02:32 +0200
Subject: [PATCH 221/259] Step 22.1: Install ionic-angular

---
 package.json | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/package.json b/package.json
index a97fed1..62e2771 100644
--- a/package.json
+++ b/package.json
@@ -8,6 +8,7 @@
     "@angular/common": "^2.0.0-rc.4",
     "@angular/compiler": "^2.0.0-rc.4",
     "@angular/core": "^2.0.0-rc.4",
+    "@angular/http": "^2.0.0-rc.4",
     "@angular/platform-browser": "^2.0.0-rc.4",
     "@angular/platform-browser-dynamic": "^2.0.0-rc.4",
     "@angular/router": "3.0.0-beta.2",
@@ -24,6 +25,7 @@
     "angular2-pagination": "0.2.1",
     "es6-shim": "^0.35.1",
     "gm": "^1.22.0",
+    "ionic-angular": "^2.0.0-beta.9",
     "meteor-node-stubs": "^0.2.3",
     "ng2-material": "0.4.1",
     "reflect-metadata": "^0.1.2",
-- 
2.7.4


From 3e11bd3d3b56c503fcf3e257244ee31c75434364 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 13 Jun 2016 17:03:19 +0200
Subject: [PATCH 222/259] Step 22.2: Duplicate ionic.scss with one change

---
 client/css/ionic.scss | 59 +++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 59 insertions(+)
 create mode 100644 client/css/ionic.scss

diff --git a/client/css/ionic.scss b/client/css/ionic.scss
new file mode 100644
index 0000000..b607f09
--- /dev/null
+++ b/client/css/ionic.scss
@@ -0,0 +1,59 @@
+@charset "UTF-8";
+
+// Core Components
+
+// Core Globals
+@import "{}/node_modules/ionic-angular/globals.core";
+
+
+// Core App
+@import
+  "{}/node_modules/ionic-angular/components/app/normalize",
+  "{}/node_modules/ionic-angular/components/app/structure",
+  "{}/node_modules/ionic-angular/components/app/scrollbars",
+  "{}/node_modules/ionic-angular/components/app/typography",
+  "{}/node_modules/ionic-angular/util/util";
+
+
+// Core Components
+@import
+  "{}/node_modules/ionic-angular/components/backdrop/backdrop",
+  "{}/node_modules/ionic-angular/components/grid/grid",
+  "{}/node_modules/ionic-angular/components/icon/icon",
+  "{}/node_modules/ionic-angular/components/img/img",
+  "{}/node_modules/ionic-angular/components/infinite-scroll/infinite-scroll",
+  "{}/node_modules/ionic-angular/components/loading/loading",
+  "{}/node_modules/ionic-angular/components/menu/menu",
+  "{}/node_modules/ionic-angular/components/modal/modal",
+  "{}/node_modules/ionic-angular/components/popover/popover",
+  "{}/node_modules/ionic-angular/components/range/range",
+  "{}/node_modules/ionic-angular/components/refresher/refresher",
+  "{}/node_modules/ionic-angular/components/scroll/scroll",
+  "{}/node_modules/ionic-angular/components/show-hide-when/show-hide-when",
+  "{}/node_modules/ionic-angular/components/slides/slides",
+  "{}/node_modules/ionic-angular/components/spinner/spinner",
+  "{}/node_modules/ionic-angular/components/virtual-scroll/virtual-scroll";
+
+
+// Ionicons
+// XXX
+// @import "fonts/ionicons";
+
+
+// iOS Components
+.ios {
+  @import "{}/node_modules/ionic-angular/components.ios";
+  @include ios-body();
+}
+
+// Material Design Components
+.md {
+  @import "{}/node_modules/ionic-angular/components.md";
+  @include md-body();
+}
+
+// Windows Components
+.wp {
+  @import "{}/node_modules/ionic-angular/components.wp";
+  @include wp-body();
+}
-- 
2.7.4


From 577d6559d9921d93e884abfe80430260c76f9afb Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 13 Jun 2016 17:03:48 +0200
Subject: [PATCH 223/259] Step 22.3: Import ionic.scss

---
 client/css/main.scss | 1 +
 1 file changed, 1 insertion(+)

diff --git a/client/css/main.scss b/client/css/main.scss
index 0b45a43..8f89bb2 100644
--- a/client/css/main.scss
+++ b/client/css/main.scss
@@ -1,3 +1,4 @@
+@import "./ionic.scss";
 @import "{}/node_modules/angular2-meteor-accounts-ui/build/login-buttons.scss";
 @import "{}/node_modules/angular2-pagination/build/pagination-controls-cmp.scss";
 @import "{}/node_modules/ng2-material/all.scss";
-- 
2.7.4


From 736cf718b2f56c01d742edcc4b417964d6c81833 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 13 Jun 2016 17:04:30 +0200
Subject: [PATCH 224/259] Step 22.4: Move app to imports/app

---
 client/app.ts             | 57 -----------------------------------------------
 client/imports/app/app.ts | 57 +++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 57 insertions(+), 57 deletions(-)
 delete mode 100644 client/app.ts
 create mode 100644 client/imports/app/app.ts

diff --git a/client/app.ts b/client/app.ts
deleted file mode 100644
index 3156121..0000000
--- a/client/app.ts
+++ /dev/null
@@ -1,57 +0,0 @@
-import 'reflect-metadata';
-import {MATERIAL_PROVIDERS, MATERIAL_DIRECTIVES} from 'ng2-material';
-import {MdToolbar} from '@angular2-material/toolbar';
-import {MeteorComponent} from 'angular2-meteor';
-
-import { Component, provide } from '@angular/core';
-import { bootstrap } from 'angular2-meteor-auto-bootstrap';
-import { provideRouter, RouterConfig, ROUTER_DIRECTIVES } from '@angular/router';
-import { APP_BASE_HREF } from '@angular/common';
-import { PartiesList } from './imports/parties-list/parties-list.ts';
-import { PartyDetails } from './imports/party-details/party-details.ts';
-import '../collections/methods.ts';
-import {GOOGLE_MAPS_PROVIDERS} from 'angular2-google-maps/core';
-import {LoginButtons} from 'angular2-meteor-accounts-ui';
-import '../node_modules/@angular2-material/toolbar/toolbar.css';
-import { DisplayName } from './imports/pipes/pipes';
-import { InjectUser } from 'angular2-meteor-accounts-ui';
-import { Login as LoginWeb } from './imports/auth/login.web';
-import { Login as LoginMobile } from './imports/auth/login.mobile';
-import { Signup } from './imports/auth/signup';
-import { Recover } from './imports/auth/recover';
-import { Meteor } from 'meteor/meteor';
-
-@Component({
-  selector: 'app',
-  templateUrl: '/client/app.html',
-  directives: [ROUTER_DIRECTIVES, LoginButtons, MATERIAL_DIRECTIVES, MdToolbar],
-  pipes: [DisplayName]
-})
-@InjectUser()
-class Socially extends MeteorComponent {
-  user: Meteor.User;
-
-  constructor() {
-    super();
-  }
-
-  logout() {
-    this.autorun(() => {
-      Meteor.logout();
-    });
-  }
-}
-
-const routes: RouterConfig = [
-  { path: '',              	component: PartiesList },
-  { path: 'party/:partyId',	component: PartyDetails },
-  { path: 'login', 		component: Meteor.isCordova ? LoginMobile : LoginWeb },
-  { path: 'signup', 		component: Signup },
-  { path: 'recover', 		component: Recover }
-];
-
-const APP_ROUTER_PROVIDERS = [
-  provideRouter(routes)
-];
-
-bootstrap(Socially, [MATERIAL_PROVIDERS, APP_ROUTER_PROVIDERS, GOOGLE_MAPS_PROVIDERS, provide(APP_BASE_HREF, { useValue: '/' })]);
diff --git a/client/imports/app/app.ts b/client/imports/app/app.ts
new file mode 100644
index 0000000..3156121
--- /dev/null
+++ b/client/imports/app/app.ts
@@ -0,0 +1,57 @@
+import 'reflect-metadata';
+import {MATERIAL_PROVIDERS, MATERIAL_DIRECTIVES} from 'ng2-material';
+import {MdToolbar} from '@angular2-material/toolbar';
+import {MeteorComponent} from 'angular2-meteor';
+
+import { Component, provide } from '@angular/core';
+import { bootstrap } from 'angular2-meteor-auto-bootstrap';
+import { provideRouter, RouterConfig, ROUTER_DIRECTIVES } from '@angular/router';
+import { APP_BASE_HREF } from '@angular/common';
+import { PartiesList } from './imports/parties-list/parties-list.ts';
+import { PartyDetails } from './imports/party-details/party-details.ts';
+import '../collections/methods.ts';
+import {GOOGLE_MAPS_PROVIDERS} from 'angular2-google-maps/core';
+import {LoginButtons} from 'angular2-meteor-accounts-ui';
+import '../node_modules/@angular2-material/toolbar/toolbar.css';
+import { DisplayName } from './imports/pipes/pipes';
+import { InjectUser } from 'angular2-meteor-accounts-ui';
+import { Login as LoginWeb } from './imports/auth/login.web';
+import { Login as LoginMobile } from './imports/auth/login.mobile';
+import { Signup } from './imports/auth/signup';
+import { Recover } from './imports/auth/recover';
+import { Meteor } from 'meteor/meteor';
+
+@Component({
+  selector: 'app',
+  templateUrl: '/client/app.html',
+  directives: [ROUTER_DIRECTIVES, LoginButtons, MATERIAL_DIRECTIVES, MdToolbar],
+  pipes: [DisplayName]
+})
+@InjectUser()
+class Socially extends MeteorComponent {
+  user: Meteor.User;
+
+  constructor() {
+    super();
+  }
+
+  logout() {
+    this.autorun(() => {
+      Meteor.logout();
+    });
+  }
+}
+
+const routes: RouterConfig = [
+  { path: '',              	component: PartiesList },
+  { path: 'party/:partyId',	component: PartyDetails },
+  { path: 'login', 		component: Meteor.isCordova ? LoginMobile : LoginWeb },
+  { path: 'signup', 		component: Signup },
+  { path: 'recover', 		component: Recover }
+];
+
+const APP_ROUTER_PROVIDERS = [
+  provideRouter(routes)
+];
+
+bootstrap(Socially, [MATERIAL_PROVIDERS, APP_ROUTER_PROVIDERS, GOOGLE_MAPS_PROVIDERS, provide(APP_BASE_HREF, { useValue: '/' })]);
-- 
2.7.4


From 2fa90cc4a09deefdce97940488ef35f8c52b7bf6 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 13 Jun 2016 17:04:48 +0200
Subject: [PATCH 225/259] Step 22.5: Move app view to imports/app

---
 client/app.html             | 17 -----------------
 client/imports/app/app.html | 17 +++++++++++++++++
 2 files changed, 17 insertions(+), 17 deletions(-)
 delete mode 100644 client/app.html
 create mode 100644 client/imports/app/app.html

diff --git a/client/app.html b/client/app.html
deleted file mode 100644
index 5fdaeae..0000000
--- a/client/app.html
+++ /dev/null
@@ -1,17 +0,0 @@
-<md-toolbar>
-  <h2>
-    <a ui-sref="parties"><span class="md-title">Socially</span></a>
-  </h2>
-  <span flex></span>
-  <div class="navbar-right navbar-text">
-    <div [hidden]="user">
-      <button md-button [routerLink]="['/login']" >Login</button>
-      <button md-button [routerLink]="['/signup']">Sign up</button>
-    </div>
-    <div [hidden]="!user">
-      <span>{{ user | displayName }}</span>
-      <button md-button (click)="logout()">Logout</button>
-    </div>
-  </div>
-</md-toolbar>
-<router-outlet flex-gt-sm layout-gt-sm="row"></router-outlet>
diff --git a/client/imports/app/app.html b/client/imports/app/app.html
new file mode 100644
index 0000000..5fdaeae
--- /dev/null
+++ b/client/imports/app/app.html
@@ -0,0 +1,17 @@
+<md-toolbar>
+  <h2>
+    <a ui-sref="parties"><span class="md-title">Socially</span></a>
+  </h2>
+  <span flex></span>
+  <div class="navbar-right navbar-text">
+    <div [hidden]="user">
+      <button md-button [routerLink]="['/login']" >Login</button>
+      <button md-button [routerLink]="['/signup']">Sign up</button>
+    </div>
+    <div [hidden]="!user">
+      <span>{{ user | displayName }}</span>
+      <button md-button (click)="logout()">Logout</button>
+    </div>
+  </div>
+</md-toolbar>
+<router-outlet flex-gt-sm layout-gt-sm="row"></router-outlet>
-- 
2.7.4


From c6accfe9a9124195f48dceeecad70f8355c2cc90 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 13 Jun 2016 17:05:27 +0200
Subject: [PATCH 226/259] Step 22.6: Rename app to app.web

---
 client/imports/app/app.html     | 17 ------------
 client/imports/app/app.ts       | 57 -----------------------------------------
 client/imports/app/app.web.html | 17 ++++++++++++
 client/imports/app/app.web.ts   | 57 +++++++++++++++++++++++++++++++++++++++++
 4 files changed, 74 insertions(+), 74 deletions(-)
 delete mode 100644 client/imports/app/app.html
 delete mode 100644 client/imports/app/app.ts
 create mode 100644 client/imports/app/app.web.html
 create mode 100644 client/imports/app/app.web.ts

diff --git a/client/imports/app/app.html b/client/imports/app/app.html
deleted file mode 100644
index 5fdaeae..0000000
--- a/client/imports/app/app.html
+++ /dev/null
@@ -1,17 +0,0 @@
-<md-toolbar>
-  <h2>
-    <a ui-sref="parties"><span class="md-title">Socially</span></a>
-  </h2>
-  <span flex></span>
-  <div class="navbar-right navbar-text">
-    <div [hidden]="user">
-      <button md-button [routerLink]="['/login']" >Login</button>
-      <button md-button [routerLink]="['/signup']">Sign up</button>
-    </div>
-    <div [hidden]="!user">
-      <span>{{ user | displayName }}</span>
-      <button md-button (click)="logout()">Logout</button>
-    </div>
-  </div>
-</md-toolbar>
-<router-outlet flex-gt-sm layout-gt-sm="row"></router-outlet>
diff --git a/client/imports/app/app.ts b/client/imports/app/app.ts
deleted file mode 100644
index 3156121..0000000
--- a/client/imports/app/app.ts
+++ /dev/null
@@ -1,57 +0,0 @@
-import 'reflect-metadata';
-import {MATERIAL_PROVIDERS, MATERIAL_DIRECTIVES} from 'ng2-material';
-import {MdToolbar} from '@angular2-material/toolbar';
-import {MeteorComponent} from 'angular2-meteor';
-
-import { Component, provide } from '@angular/core';
-import { bootstrap } from 'angular2-meteor-auto-bootstrap';
-import { provideRouter, RouterConfig, ROUTER_DIRECTIVES } from '@angular/router';
-import { APP_BASE_HREF } from '@angular/common';
-import { PartiesList } from './imports/parties-list/parties-list.ts';
-import { PartyDetails } from './imports/party-details/party-details.ts';
-import '../collections/methods.ts';
-import {GOOGLE_MAPS_PROVIDERS} from 'angular2-google-maps/core';
-import {LoginButtons} from 'angular2-meteor-accounts-ui';
-import '../node_modules/@angular2-material/toolbar/toolbar.css';
-import { DisplayName } from './imports/pipes/pipes';
-import { InjectUser } from 'angular2-meteor-accounts-ui';
-import { Login as LoginWeb } from './imports/auth/login.web';
-import { Login as LoginMobile } from './imports/auth/login.mobile';
-import { Signup } from './imports/auth/signup';
-import { Recover } from './imports/auth/recover';
-import { Meteor } from 'meteor/meteor';
-
-@Component({
-  selector: 'app',
-  templateUrl: '/client/app.html',
-  directives: [ROUTER_DIRECTIVES, LoginButtons, MATERIAL_DIRECTIVES, MdToolbar],
-  pipes: [DisplayName]
-})
-@InjectUser()
-class Socially extends MeteorComponent {
-  user: Meteor.User;
-
-  constructor() {
-    super();
-  }
-
-  logout() {
-    this.autorun(() => {
-      Meteor.logout();
-    });
-  }
-}
-
-const routes: RouterConfig = [
-  { path: '',              	component: PartiesList },
-  { path: 'party/:partyId',	component: PartyDetails },
-  { path: 'login', 		component: Meteor.isCordova ? LoginMobile : LoginWeb },
-  { path: 'signup', 		component: Signup },
-  { path: 'recover', 		component: Recover }
-];
-
-const APP_ROUTER_PROVIDERS = [
-  provideRouter(routes)
-];
-
-bootstrap(Socially, [MATERIAL_PROVIDERS, APP_ROUTER_PROVIDERS, GOOGLE_MAPS_PROVIDERS, provide(APP_BASE_HREF, { useValue: '/' })]);
diff --git a/client/imports/app/app.web.html b/client/imports/app/app.web.html
new file mode 100644
index 0000000..5fdaeae
--- /dev/null
+++ b/client/imports/app/app.web.html
@@ -0,0 +1,17 @@
+<md-toolbar>
+  <h2>
+    <a ui-sref="parties"><span class="md-title">Socially</span></a>
+  </h2>
+  <span flex></span>
+  <div class="navbar-right navbar-text">
+    <div [hidden]="user">
+      <button md-button [routerLink]="['/login']" >Login</button>
+      <button md-button [routerLink]="['/signup']">Sign up</button>
+    </div>
+    <div [hidden]="!user">
+      <span>{{ user | displayName }}</span>
+      <button md-button (click)="logout()">Logout</button>
+    </div>
+  </div>
+</md-toolbar>
+<router-outlet flex-gt-sm layout-gt-sm="row"></router-outlet>
diff --git a/client/imports/app/app.web.ts b/client/imports/app/app.web.ts
new file mode 100644
index 0000000..3156121
--- /dev/null
+++ b/client/imports/app/app.web.ts
@@ -0,0 +1,57 @@
+import 'reflect-metadata';
+import {MATERIAL_PROVIDERS, MATERIAL_DIRECTIVES} from 'ng2-material';
+import {MdToolbar} from '@angular2-material/toolbar';
+import {MeteorComponent} from 'angular2-meteor';
+
+import { Component, provide } from '@angular/core';
+import { bootstrap } from 'angular2-meteor-auto-bootstrap';
+import { provideRouter, RouterConfig, ROUTER_DIRECTIVES } from '@angular/router';
+import { APP_BASE_HREF } from '@angular/common';
+import { PartiesList } from './imports/parties-list/parties-list.ts';
+import { PartyDetails } from './imports/party-details/party-details.ts';
+import '../collections/methods.ts';
+import {GOOGLE_MAPS_PROVIDERS} from 'angular2-google-maps/core';
+import {LoginButtons} from 'angular2-meteor-accounts-ui';
+import '../node_modules/@angular2-material/toolbar/toolbar.css';
+import { DisplayName } from './imports/pipes/pipes';
+import { InjectUser } from 'angular2-meteor-accounts-ui';
+import { Login as LoginWeb } from './imports/auth/login.web';
+import { Login as LoginMobile } from './imports/auth/login.mobile';
+import { Signup } from './imports/auth/signup';
+import { Recover } from './imports/auth/recover';
+import { Meteor } from 'meteor/meteor';
+
+@Component({
+  selector: 'app',
+  templateUrl: '/client/app.html',
+  directives: [ROUTER_DIRECTIVES, LoginButtons, MATERIAL_DIRECTIVES, MdToolbar],
+  pipes: [DisplayName]
+})
+@InjectUser()
+class Socially extends MeteorComponent {
+  user: Meteor.User;
+
+  constructor() {
+    super();
+  }
+
+  logout() {
+    this.autorun(() => {
+      Meteor.logout();
+    });
+  }
+}
+
+const routes: RouterConfig = [
+  { path: '',              	component: PartiesList },
+  { path: 'party/:partyId',	component: PartyDetails },
+  { path: 'login', 		component: Meteor.isCordova ? LoginMobile : LoginWeb },
+  { path: 'signup', 		component: Signup },
+  { path: 'recover', 		component: Recover }
+];
+
+const APP_ROUTER_PROVIDERS = [
+  provideRouter(routes)
+];
+
+bootstrap(Socially, [MATERIAL_PROVIDERS, APP_ROUTER_PROVIDERS, GOOGLE_MAPS_PROVIDERS, provide(APP_BASE_HREF, { useValue: '/' })]);
-- 
2.7.4


From 3e460b2e62e89040d49d73144963263e57149435 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 13 Jun 2016 17:06:11 +0200
Subject: [PATCH 227/259] Step 22.7: Update templateUrl

---
 client/imports/app/app.web.ts | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/client/imports/app/app.web.ts b/client/imports/app/app.web.ts
index 3156121..08ddd9e 100644
--- a/client/imports/app/app.web.ts
+++ b/client/imports/app/app.web.ts
@@ -23,7 +23,7 @@ import { Meteor } from 'meteor/meteor';
 
 @Component({
   selector: 'app',
-  templateUrl: '/client/app.html',
+  templateUrl: '/client/imports/app/app.web.html',
   directives: [ROUTER_DIRECTIVES, LoginButtons, MATERIAL_DIRECTIVES, MdToolbar],
   pipes: [DisplayName]
 })
-- 
2.7.4


From 9d2e2412dae733dc2feb0d2047e73b9558b95d3f Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 13 Jun 2016 17:06:48 +0200
Subject: [PATCH 228/259] Step 22.8: Use only web version of Login

---
 client/imports/app/app.web.ts | 5 ++---
 1 file changed, 2 insertions(+), 3 deletions(-)

diff --git a/client/imports/app/app.web.ts b/client/imports/app/app.web.ts
index 08ddd9e..5fb0069 100644
--- a/client/imports/app/app.web.ts
+++ b/client/imports/app/app.web.ts
@@ -15,8 +15,7 @@ import {LoginButtons} from 'angular2-meteor-accounts-ui';
 import '../node_modules/@angular2-material/toolbar/toolbar.css';
 import { DisplayName } from './imports/pipes/pipes';
 import { InjectUser } from 'angular2-meteor-accounts-ui';
-import { Login as LoginWeb } from './imports/auth/login.web';
-import { Login as LoginMobile } from './imports/auth/login.mobile';
+import { Login } from './imports/auth/login.web';
 import { Signup } from './imports/auth/signup';
 import { Recover } from './imports/auth/recover';
 import { Meteor } from 'meteor/meteor';
@@ -45,7 +44,7 @@ class Socially extends MeteorComponent {
 const routes: RouterConfig = [
   { path: '',              	component: PartiesList },
   { path: 'party/:partyId',	component: PartyDetails },
-  { path: 'login', 		component: Meteor.isCordova ? LoginMobile : LoginWeb },
+  { path: 'login', 		component: Login },
   { path: 'signup', 		component: Signup },
   { path: 'recover', 		component: Recover }
 ];
-- 
2.7.4


From 5e0a49b483a5925cc11f95f3f262e8643d5a8a1a Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 13 Jun 2016 17:07:51 +0200
Subject: [PATCH 229/259] Step 22.9: Update relative paths

---
 client/imports/app/app.web.ts | 16 ++++++++--------
 1 file changed, 8 insertions(+), 8 deletions(-)

diff --git a/client/imports/app/app.web.ts b/client/imports/app/app.web.ts
index 5fb0069..a15e4be 100644
--- a/client/imports/app/app.web.ts
+++ b/client/imports/app/app.web.ts
@@ -7,17 +7,17 @@ import { Component, provide } from '@angular/core';
 import { bootstrap } from 'angular2-meteor-auto-bootstrap';
 import { provideRouter, RouterConfig, ROUTER_DIRECTIVES } from '@angular/router';
 import { APP_BASE_HREF } from '@angular/common';
-import { PartiesList } from './imports/parties-list/parties-list.ts';
-import { PartyDetails } from './imports/party-details/party-details.ts';
-import '../collections/methods.ts';
+import { PartiesList } from './../parties-list/parties-list.ts';
+import { PartyDetails } from './../party-details/party-details.ts';
+import '../../../collections/methods.ts';
 import {GOOGLE_MAPS_PROVIDERS} from 'angular2-google-maps/core';
 import {LoginButtons} from 'angular2-meteor-accounts-ui';
-import '../node_modules/@angular2-material/toolbar/toolbar.css';
-import { DisplayName } from './imports/pipes/pipes';
+import '../../../node_modules/@angular2-material/toolbar/toolbar.css';
+import { DisplayName } from './../pipes/pipes';
 import { InjectUser } from 'angular2-meteor-accounts-ui';
-import { Login } from './imports/auth/login.web';
-import { Signup } from './imports/auth/signup';
-import { Recover } from './imports/auth/recover';
+import { Login } from './../auth/login.web';
+import { Signup } from './../auth/signup';
+import { Recover } from './../auth/recover';
 import { Meteor } from 'meteor/meteor';
 
 @Component({
-- 
2.7.4


From 26cc86c99c30088b0ce77b7b87e61a3e64e1f448 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 13 Jun 2016 17:08:33 +0200
Subject: [PATCH 230/259] Step 22.10: Create client-side entry point

---
 client/main.ts | 1 +
 1 file changed, 1 insertion(+)
 create mode 100644 client/main.ts

diff --git a/client/main.ts b/client/main.ts
new file mode 100644
index 0000000..95c3e29
--- /dev/null
+++ b/client/main.ts
@@ -0,0 +1 @@
+import './imports/app/app.web';
-- 
2.7.4


From 6d7586eedeca528d560bdc2e93774b01f2f91ae6 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 13 Jun 2016 17:09:34 +0200
Subject: [PATCH 231/259] Step 22.11: Defer bootstraping an App

---
 client/imports/app/app.web.ts | 5 +++--
 1 file changed, 3 insertions(+), 2 deletions(-)

diff --git a/client/imports/app/app.web.ts b/client/imports/app/app.web.ts
index a15e4be..07bed97 100644
--- a/client/imports/app/app.web.ts
+++ b/client/imports/app/app.web.ts
@@ -1,4 +1,3 @@
-import 'reflect-metadata';
 import {MATERIAL_PROVIDERS, MATERIAL_DIRECTIVES} from 'ng2-material';
 import {MdToolbar} from '@angular2-material/toolbar';
 import {MeteorComponent} from 'angular2-meteor';
@@ -53,4 +52,6 @@ const APP_ROUTER_PROVIDERS = [
   provideRouter(routes)
 ];
 
-bootstrap(Socially, [MATERIAL_PROVIDERS, APP_ROUTER_PROVIDERS, GOOGLE_MAPS_PROVIDERS, provide(APP_BASE_HREF, { useValue: '/' })]);
+export function run(): void {
+  bootstrap(Socially, [MATERIAL_PROVIDERS, APP_ROUTER_PROVIDERS, GOOGLE_MAPS_PROVIDERS, provide(APP_BASE_HREF, { useValue: '/' })]);
+}
-- 
2.7.4


From e00f8e0bdf3b98d142b34946a4d24dc719cb9cd8 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 13 Jun 2016 17:10:25 +0200
Subject: [PATCH 232/259] Step 22.12: Call run function on startup

---
 client/main.ts | 5 ++++-
 1 file changed, 4 insertions(+), 1 deletion(-)

diff --git a/client/main.ts b/client/main.ts
index 95c3e29..3ff06e5 100644
--- a/client/main.ts
+++ b/client/main.ts
@@ -1 +1,4 @@
-import './imports/app/app.web';
+import 'reflect-metadata';
+import { run } from './imports/app/app.web';
+
+run();
-- 
2.7.4


From 46868d36a590ba1471251395603786749678e397 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 13 Jun 2016 17:11:21 +0200
Subject: [PATCH 233/259] Step 22.13: Create space for future mobile version of
 App

---
 client/imports/app/app.mobile.ts | 3 +++
 1 file changed, 3 insertions(+)
 create mode 100644 client/imports/app/app.mobile.ts

diff --git a/client/imports/app/app.mobile.ts b/client/imports/app/app.mobile.ts
new file mode 100644
index 0000000..39850f8
--- /dev/null
+++ b/client/imports/app/app.mobile.ts
@@ -0,0 +1,3 @@
+export function run(): void {
+  console.log('Mobile version is not yet available!');
+}
-- 
2.7.4


From 078abdd345a32b9ed8c245681f807d899cf2f0b5 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 13 Jun 2016 17:12:27 +0200
Subject: [PATCH 234/259] Step 22.14: Run web or mobile version, depends on
 Meteor.isCordova

---
 client/main.ts | 10 ++++++++--
 1 file changed, 8 insertions(+), 2 deletions(-)

diff --git a/client/main.ts b/client/main.ts
index 3ff06e5..b3cae73 100644
--- a/client/main.ts
+++ b/client/main.ts
@@ -1,4 +1,10 @@
 import 'reflect-metadata';
-import { run } from './imports/app/app.web';
+import { Meteor } from 'meteor/meteor';
+import { run as runWeb } from './imports/app/app.web';
+import { run as runMobile } from './imports/app/app.mobile';
 
-run();
+if (Meteor.isCordova) {
+  runMobile();
+} else {
+  runWeb();
+}
-- 
2.7.4


From 8ebb2879a41ffe38352bb7ce67fa094ef16b0200 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 13 Jun 2016 17:14:53 +0200
Subject: [PATCH 235/259] Step 22.15: Run mobile app only if device is ready

---
 client/main.ts | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/client/main.ts b/client/main.ts
index b3cae73..d8b4d24 100644
--- a/client/main.ts
+++ b/client/main.ts
@@ -4,7 +4,9 @@ import { run as runWeb } from './imports/app/app.web';
 import { run as runMobile } from './imports/app/app.mobile';
 
 if (Meteor.isCordova) {
-  runMobile();
+  document.addEventListener('deviceready', () => {
+    runMobile();
+  });
 } else {
   runWeb();
 }
-- 
2.7.4


From 5bec2e139134b62ac6019eea4346e2af4ba05796 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 13 Jun 2016 17:15:37 +0200
Subject: [PATCH 236/259] Step 22.16: View of Socially component based on Ionic

---
 client/imports/app/app.mobile.html | 1 +
 1 file changed, 1 insertion(+)
 create mode 100644 client/imports/app/app.mobile.html

diff --git a/client/imports/app/app.mobile.html b/client/imports/app/app.mobile.html
new file mode 100644
index 0000000..aab2c16
--- /dev/null
+++ b/client/imports/app/app.mobile.html
@@ -0,0 +1 @@
+<ion-nav [root]="rootPage" swipe-back-enabled="true"></ion-nav>
-- 
2.7.4


From 17b38300dc942c7e24b4f5b9da55b01d805748c2 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 13 Jun 2016 17:16:26 +0200
Subject: [PATCH 237/259] Step 22.17: Ionic version of Socially component

---
 client/imports/app/app.mobile.ts | 10 ++++++++++
 1 file changed, 10 insertions(+)

diff --git a/client/imports/app/app.mobile.ts b/client/imports/app/app.mobile.ts
index 39850f8..066056d 100644
--- a/client/imports/app/app.mobile.ts
+++ b/client/imports/app/app.mobile.ts
@@ -1,3 +1,13 @@
+import { Component } from '@angular/core';
+import { App, Platform, MenuController } from 'ionic-angular';
+
+@Component({
+  templateUrl: '/client/imports/app/app.mobile.html'
+})
+class Socially {
+  constructor(app: App, platform: Platform, menu: MenuController) {}
+}
+
 export function run(): void {
   console.log('Mobile version is not yet available!');
 }
-- 
2.7.4


From b6ce475e225d102dd4ebc657fd3a51113086d134 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 13 Jun 2016 17:17:30 +0200
Subject: [PATCH 238/259] Step 22.18: Bootstrap App using ionicBootstrap with
 METEOR_PROVIDERS

---
 client/imports/app/app.mobile.ts | 7 +++++--
 1 file changed, 5 insertions(+), 2 deletions(-)

diff --git a/client/imports/app/app.mobile.ts b/client/imports/app/app.mobile.ts
index 066056d..00d48b4 100644
--- a/client/imports/app/app.mobile.ts
+++ b/client/imports/app/app.mobile.ts
@@ -1,5 +1,6 @@
 import { Component } from '@angular/core';
-import { App, Platform, MenuController } from 'ionic-angular';
+import { ionicBootstrap, App, Platform, MenuController } from 'ionic-angular';
+import { METEOR_PROVIDERS } from 'angular2-meteor';
 
 @Component({
   templateUrl: '/client/imports/app/app.mobile.html'
@@ -9,5 +10,7 @@ class Socially {
 }
 
 export function run(): void {
-  console.log('Mobile version is not yet available!');
+  ionicBootstrap(Socially, [
+    METEOR_PROVIDERS
+  ]);
 }
-- 
2.7.4


From f927ef5b1335faf2f2d16fd74cbfe78c90eb4bad Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 13 Jun 2016 17:19:44 +0200
Subject: [PATCH 239/259] Step 22.19: Fix an issue with overflow of body

---
 client/css/main.scss | 8 ++++++++
 1 file changed, 8 insertions(+)

diff --git a/client/css/main.scss b/client/css/main.scss
index 8f89bb2..2e41fe1 100644
--- a/client/css/main.scss
+++ b/client/css/main.scss
@@ -21,6 +21,14 @@ body {
   font-family: 'Muli', sans-serif;
 }
 
+body.mobile {
+  overflow: hidden;
+}
+
+body.web {
+  overflow: visible;
+}
+
 .sebm-google-map-container {
   width: 450px;
   height: 450px;
-- 
2.7.4


From 9480aab557349466c7340a8987393ff9e485ad1a Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 13 Jun 2016 17:20:38 +0200
Subject: [PATCH 240/259] Step 22.20: Set proper class on body, depends on
 platform

---
 client/main.ts | 9 +++++++++
 1 file changed, 9 insertions(+)

diff --git a/client/main.ts b/client/main.ts
index d8b4d24..a163246 100644
--- a/client/main.ts
+++ b/client/main.ts
@@ -6,7 +6,16 @@ import { run as runMobile } from './imports/app/app.mobile';
 if (Meteor.isCordova) {
   document.addEventListener('deviceready', () => {
     runMobile();
+    setClass('mobile');
   });
 } else {
   runWeb();
+  setClass('web');
+}
+
+function setClass(css): void {
+  if (!document.body.className) {
+    document.body.className = "";
+  }
+  document.body.className += " " + css;
 }
-- 
2.7.4


From 4d51c04f406150bc3b64408b39348c96e012774e Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 13 Jun 2016 17:21:34 +0200
Subject: [PATCH 241/259] Step 22.21: Install ionic-selector

---
 package.json | 1 +
 1 file changed, 1 insertion(+)

diff --git a/package.json b/package.json
index 62e2771..5d6779d 100644
--- a/package.json
+++ b/package.json
@@ -26,6 +26,7 @@
     "es6-shim": "^0.35.1",
     "gm": "^1.22.0",
     "ionic-angular": "^2.0.0-beta.9",
+    "ionic-selector": "0.0.2",
     "meteor-node-stubs": "^0.2.3",
     "ng2-material": "0.4.1",
     "reflect-metadata": "^0.1.2",
-- 
2.7.4


From b757647d16011d1d2dd26af8dd7460f1315ba78b Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 13 Jun 2016 17:22:53 +0200
Subject: [PATCH 242/259] Step 22.22: Use ionicSelector to change app into
 ion-app

---
 client/main.ts | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/client/main.ts b/client/main.ts
index a163246..17bff55 100644
--- a/client/main.ts
+++ b/client/main.ts
@@ -1,10 +1,12 @@
 import 'reflect-metadata';
+import ionicSelector from 'ionic-selector';
 import { Meteor } from 'meteor/meteor';
 import { run as runWeb } from './imports/app/app.web';
 import { run as runMobile } from './imports/app/app.mobile';
 
 if (Meteor.isCordova) {
   document.addEventListener('deviceready', () => {
+    ionicSelector('app');
     runMobile();
     setClass('mobile');
   });
-- 
2.7.4


From 7b85b07ccf8b4b72fb6de2e0d7bcb229bb8f400f Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 13 Jun 2016 17:29:01 +0200
Subject: [PATCH 243/259] Step 22.23: Move PartiesList class to separate file

---
 client/imports/parties-list/parties-list.class.ts | 56 +++++++++++++++++++++++
 1 file changed, 56 insertions(+)
 create mode 100644 client/imports/parties-list/parties-list.class.ts

diff --git a/client/imports/parties-list/parties-list.class.ts b/client/imports/parties-list/parties-list.class.ts
new file mode 100644
index 0000000..b13a1bd
--- /dev/null
+++ b/client/imports/parties-list/parties-list.class.ts
@@ -0,0 +1,56 @@
+export class PartiesList extends MeteorComponent{
+  parties: Mongo.Cursor<Party>;
+  pageSize: number = 10;
+  curPage: ReactiveVar<number> = new ReactiveVar<number>(1);
+  nameOrder: ReactiveVar<number> = new ReactiveVar<number>(1);
+  partiesSize: number = 0;
+  location: ReactiveVar<string> = new ReactiveVar<string>(null);
+  user: Meteor.User;
+
+  constructor() {
+    super();
+
+    this.autorun(() => {
+      let options = {
+        limit: this.pageSize,
+        skip: (this.curPage.get() - 1) * this.pageSize,
+        sort: { name: this.nameOrder.get() }
+      };
+
+      this.subscribe('parties', options, this.location.get(), () => {
+        this.parties = Parties.find({}, { sort: { name: this.nameOrder.get() } });
+      }, true);
+
+      this.subscribe('images');
+    });
+
+    this.autorun(() => {
+      this.partiesSize = Counts.get('numberOfParties');
+    }, true);
+  }
+
+  removeParty(party) {
+    Parties.remove(party._id);
+  }
+
+  search(value: string) {
+    this.curPage.set(1);
+    this.location.set(value);
+  }
+
+  changeSortOrder(nameOrder: string) {
+    this.nameOrder.set(parseInt(nameOrder));
+  }
+
+  onPageChanged(page: number) {
+    this.curPage.set(page);
+  }
+
+  isOwner(party: Party): boolean {
+    if (this.user) {
+      return this.user._id === party.owner;
+    }
+
+    return false;
+  }
+}
-- 
2.7.4


From b15e91691c6eb98bd8d6afa310395a1210aa1506 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 13 Jun 2016 17:41:07 +0200
Subject: [PATCH 244/259] Step 22.24: Add needed import statements

---
 client/imports/parties-list/parties-list.class.ts | 9 ++++++++-
 1 file changed, 8 insertions(+), 1 deletion(-)

diff --git a/client/imports/parties-list/parties-list.class.ts b/client/imports/parties-list/parties-list.class.ts
index b13a1bd..806a539 100644
--- a/client/imports/parties-list/parties-list.class.ts
+++ b/client/imports/parties-list/parties-list.class.ts
@@ -1,4 +1,11 @@
-export class PartiesList extends MeteorComponent{
+import { MeteorComponent } from 'angular2-meteor';
+import { Mongo } from 'meteor/mongo';
+import { ReactiveVar } from 'meteor/reactive-var';
+import { Meteor } from 'meteor/meteor';
+import { Counts } from 'meteor/tmeasday:publish-counts';
+import { Parties } from '../../../collections/parties';
+
+export class PartiesList extends MeteorComponent {
   parties: Mongo.Cursor<Party>;
   pageSize: number = 10;
   curPage: ReactiveVar<number> = new ReactiveVar<number>(1);
-- 
2.7.4


From ca9b739f4d4741393bf41a914578999e928ae546 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 13 Jun 2016 17:42:02 +0200
Subject: [PATCH 245/259] Step 22.25: Use InjectUser decorator

---
 client/imports/parties-list/parties-list.class.ts | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/client/imports/parties-list/parties-list.class.ts b/client/imports/parties-list/parties-list.class.ts
index 806a539..5f526ad 100644
--- a/client/imports/parties-list/parties-list.class.ts
+++ b/client/imports/parties-list/parties-list.class.ts
@@ -1,10 +1,12 @@
 import { MeteorComponent } from 'angular2-meteor';
+import { InjectUser } from 'angular2-meteor-accounts-ui';
 import { Mongo } from 'meteor/mongo';
 import { ReactiveVar } from 'meteor/reactive-var';
 import { Meteor } from 'meteor/meteor';
 import { Counts } from 'meteor/tmeasday:publish-counts';
 import { Parties } from '../../../collections/parties';
 
+@InjectUser()
 export class PartiesList extends MeteorComponent {
   parties: Mongo.Cursor<Party>;
   pageSize: number = 10;
-- 
2.7.4


From 126e8f0eab11459cc0a28e0af0f88a4a03221ce7 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 13 Jun 2016 17:44:50 +0200
Subject: [PATCH 246/259] Step 22.26: Create web version of PartiesList

---
 client/imports/parties-list/parties-list.web.ts | 42 +++++++++++++++++++++++++
 1 file changed, 42 insertions(+)
 create mode 100644 client/imports/parties-list/parties-list.web.ts

diff --git a/client/imports/parties-list/parties-list.web.ts b/client/imports/parties-list/parties-list.web.ts
new file mode 100644
index 0000000..f19db34
--- /dev/null
+++ b/client/imports/parties-list/parties-list.web.ts
@@ -0,0 +1,42 @@
+import { Component }   from '@angular/core';
+import { ROUTER_DIRECTIVES }  from '@angular/router';
+import { MATERIAL_DIRECTIVES } from 'ng2-material';
+import { MD_INPUT_DIRECTIVES } from '@angular2-material/input';
+import { MeteorComponent } from 'angular2-meteor';
+import { GOOGLE_MAPS_DIRECTIVES } from 'angular2-google-maps/core';
+import { PaginationService, PaginatePipe, PaginationControlsCmp } from 'angular2-pagination';
+import { InjectUser } from 'angular2-meteor-accounts-ui';
+import { Meteor } from 'meteor/meteor';
+import { Mongo } from 'meteor/mongo';
+import { ReactiveVar } from 'meteor/reactive-var';
+import { Counts } from 'meteor/tmeasday:publish-counts';
+import { RsvpPipe, DisplayMainImagePipe } from '../pipes/pipes';
+import { Parties }     from '../../../collections/parties';
+import { PartiesForm } from '../parties-form/parties-form';
+import { PartiesList as PartiesListBase } from './parties-list.class';
+
+@Component({
+  selector: 'parties-list',
+  viewProviders: [
+    PaginationService
+  ],
+  templateUrl: '/client/imports/parties-list/parties-list.web.html',
+  directives: [
+    MATERIAL_DIRECTIVES,
+    GOOGLE_MAPS_DIRECTIVES,
+    PartiesForm,
+    ROUTER_DIRECTIVES,
+    PaginationControlsCmp,
+    MD_INPUT_DIRECTIVES
+  ],
+  pipes: [
+    PaginatePipe,
+    RsvpPipe,
+    DisplayMainImagePipe
+  ]
+})
+export class PartiesList extends PartiesListBase {
+  constructor() {
+    super();
+  }
+}
-- 
2.7.4


From 197641d87397cdb91aa5cc29fb6affa0d71859d1 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 13 Jun 2016 17:45:22 +0200
Subject: [PATCH 247/259] Step 22.27: Rename view to parties-list.web.html

---
 client/imports/parties-list/parties-list.html     | 75 -----------------------
 client/imports/parties-list/parties-list.web.html | 75 +++++++++++++++++++++++
 2 files changed, 75 insertions(+), 75 deletions(-)
 delete mode 100644 client/imports/parties-list/parties-list.html
 create mode 100644 client/imports/parties-list/parties-list.web.html

diff --git a/client/imports/parties-list/parties-list.html b/client/imports/parties-list/parties-list.html
deleted file mode 100644
index dbe6368..0000000
--- a/client/imports/parties-list/parties-list.html
+++ /dev/null
@@ -1,75 +0,0 @@
-<md-content flex layout="row" class="ma-parties-list">
-    <div layout="row" flex>
-        <div flex="50">
-            <div>
-                <md-content class="new-party-form-container">
-                    <md-toolbar>
-                        <div class="md-toolbar-tools">
-                            <h3>Create a new party!</h3>
-                        </div>
-                    </md-toolbar>
-                    <parties-form [hidden]="!user"></parties-form>
-                    <div [hidden]="user">You need to login to create new parties!</div>
-                </md-content>
-                <div layout-padding layout="row">
-                    <md-input #searchtext placeholder="Search by Location"></md-input>
-                </div>
-                <div layout-padding layout="row">
-                    Sort by name: <select class="form-control" #sort (change)="changeSortOrder(sort.value)">
-                    <option value="1" selected>Ascending</option>
-                    <option value="-1">Descending</option>
-                </select>
-                </div>
-            </div>
-            <md-content class="md-padding" style="padding-top:0;">
-                <pagination-controls (change)="onPageChanged($event.page)"></pagination-controls>
-                <div *ngFor="let party of parties | paginate:{currentPage: 1, itemsPerPage: pageSize, totalItems: partiesSize}"
-                     class="ma-party">
-                    <md-card>
-                        <md-card-content>
-                            <img *ngIf="party.images" class="party-main-image" [src]="party | displayMainImage">
-                            <h2 class="md-title ma-name" style=""><a
-                                    [routerLink]="['/party', party._id]">{{party.name}}</a></h2>
-                            <p class="ma-description"
-                               style="padding:0 10px;margin-bottom:35px;margin-top: 6px;">{{party.description}}</p>
-                            <div layout="row">
-                                <div layout="row" layout-align="end end">
-                                    <div>
-                                        <div class="rsvps-sum">
-                                            <div class="rsvps-amount">{{party | rsvp:'yes'}}</div>
-                                            <div class="rsvps-title">Yes</div>
-                                        </div>
-                                        <div class="rsvps-sum">
-                                            <div class="rsvps-amount">{{party | rsvp:'maybe'}}</div>
-                                            <div class="rsvps-title">Maybe</div>
-                                        </div>
-                                        <div class="rsvps-sum">
-                                            <div class="rsvps-amount">{{party | rsvp:'no'}}</div>
-                                            <div class="rsvps-title">No</div>
-                                        </div>
-                                    </div>
-                                </div>
-                            </div>
-                        </md-card-content>
-                    </md-card>
-                </div>
-            </md-content>
-        </div>
-        <div flex="50" layout="row" style="min-height:300px;">
-            <sebm-google-map
-                    style="width: 100%; min-height:300px;"
-                    flex layout="row"
-                    [latitude]="0"
-                    [longitude]="0"
-                    [zoom]="1">
-                <div *ngFor="let party of parties">
-                    <sebm-google-map-marker
-                            *ngIf="party.location.lat"
-                            [latitude]="party.location.lat"
-                            [longitude]="party.location.lng">
-                    </sebm-google-map-marker>
-                </div>
-            </sebm-google-map>
-        </div>
-    </div>
-</md-content>
diff --git a/client/imports/parties-list/parties-list.web.html b/client/imports/parties-list/parties-list.web.html
new file mode 100644
index 0000000..dbe6368
--- /dev/null
+++ b/client/imports/parties-list/parties-list.web.html
@@ -0,0 +1,75 @@
+<md-content flex layout="row" class="ma-parties-list">
+    <div layout="row" flex>
+        <div flex="50">
+            <div>
+                <md-content class="new-party-form-container">
+                    <md-toolbar>
+                        <div class="md-toolbar-tools">
+                            <h3>Create a new party!</h3>
+                        </div>
+                    </md-toolbar>
+                    <parties-form [hidden]="!user"></parties-form>
+                    <div [hidden]="user">You need to login to create new parties!</div>
+                </md-content>
+                <div layout-padding layout="row">
+                    <md-input #searchtext placeholder="Search by Location"></md-input>
+                </div>
+                <div layout-padding layout="row">
+                    Sort by name: <select class="form-control" #sort (change)="changeSortOrder(sort.value)">
+                    <option value="1" selected>Ascending</option>
+                    <option value="-1">Descending</option>
+                </select>
+                </div>
+            </div>
+            <md-content class="md-padding" style="padding-top:0;">
+                <pagination-controls (change)="onPageChanged($event.page)"></pagination-controls>
+                <div *ngFor="let party of parties | paginate:{currentPage: 1, itemsPerPage: pageSize, totalItems: partiesSize}"
+                     class="ma-party">
+                    <md-card>
+                        <md-card-content>
+                            <img *ngIf="party.images" class="party-main-image" [src]="party | displayMainImage">
+                            <h2 class="md-title ma-name" style=""><a
+                                    [routerLink]="['/party', party._id]">{{party.name}}</a></h2>
+                            <p class="ma-description"
+                               style="padding:0 10px;margin-bottom:35px;margin-top: 6px;">{{party.description}}</p>
+                            <div layout="row">
+                                <div layout="row" layout-align="end end">
+                                    <div>
+                                        <div class="rsvps-sum">
+                                            <div class="rsvps-amount">{{party | rsvp:'yes'}}</div>
+                                            <div class="rsvps-title">Yes</div>
+                                        </div>
+                                        <div class="rsvps-sum">
+                                            <div class="rsvps-amount">{{party | rsvp:'maybe'}}</div>
+                                            <div class="rsvps-title">Maybe</div>
+                                        </div>
+                                        <div class="rsvps-sum">
+                                            <div class="rsvps-amount">{{party | rsvp:'no'}}</div>
+                                            <div class="rsvps-title">No</div>
+                                        </div>
+                                    </div>
+                                </div>
+                            </div>
+                        </md-card-content>
+                    </md-card>
+                </div>
+            </md-content>
+        </div>
+        <div flex="50" layout="row" style="min-height:300px;">
+            <sebm-google-map
+                    style="width: 100%; min-height:300px;"
+                    flex layout="row"
+                    [latitude]="0"
+                    [longitude]="0"
+                    [zoom]="1">
+                <div *ngFor="let party of parties">
+                    <sebm-google-map-marker
+                            *ngIf="party.location.lat"
+                            [latitude]="party.location.lat"
+                            [longitude]="party.location.lng">
+                    </sebm-google-map-marker>
+                </div>
+            </sebm-google-map>
+        </div>
+    </div>
+</md-content>
-- 
2.7.4


From 9d5d5a8ae417dfb75d73b95be69a9f3a59142f4a Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Fri, 24 Jun 2016 18:56:32 +0200
Subject: [PATCH 248/259] Step 22.28: Remove parties-list.ts

---
 client/imports/parties-list/parties-list.ts | 80 -----------------------------
 1 file changed, 80 deletions(-)
 delete mode 100644 client/imports/parties-list/parties-list.ts

diff --git a/client/imports/parties-list/parties-list.ts b/client/imports/parties-list/parties-list.ts
deleted file mode 100644
index 7ea93b2..0000000
--- a/client/imports/parties-list/parties-list.ts
+++ /dev/null
@@ -1,80 +0,0 @@
-import { Component }   from '@angular/core';
-import { Parties }     from '../../../collections/parties';
-import { PartiesForm } from '../parties-form/parties-form';
-import { Mongo }       from 'meteor/mongo';
-import { ROUTER_DIRECTIVES }  from '@angular/router';
-import { InjectUser } from 'angular2-meteor-accounts-ui';
-import { MeteorComponent } from 'angular2-meteor';
-import { ReactiveVar } from 'meteor/reactive-var';
-import { Counts } from 'meteor/tmeasday:publish-counts';
-import { PaginationService, PaginatePipe, PaginationControlsCmp } from 'angular2-pagination';
-import { RsvpPipe, DisplayMainImagePipe } from '../pipes/pipes.ts';
-import { Meteor } from 'meteor/meteor';
-import {GOOGLE_MAPS_DIRECTIVES} from 'angular2-google-maps/core';
-import {MATERIAL_DIRECTIVES} from 'ng2-material';
-import {MD_INPUT_DIRECTIVES} from '@angular2-material/input';
-
-@Component({
-  selector: 'parties-list',
-  viewProviders: [PaginationService],
-  templateUrl: '/client/imports/parties-list/parties-list.html',
-  directives: [MATERIAL_DIRECTIVES, GOOGLE_MAPS_DIRECTIVES, PartiesForm, ROUTER_DIRECTIVES, PaginationControlsCmp, MD_INPUT_DIRECTIVES],
-  pipes: [PaginatePipe, RsvpPipe, DisplayMainImagePipe]
-})
-@InjectUser()
-export class PartiesList extends MeteorComponent{
-  parties: Mongo.Cursor<Party>;
-  pageSize: number = 10;
-  curPage: ReactiveVar<number> = new ReactiveVar<number>(1);
-  nameOrder: ReactiveVar<number> = new ReactiveVar<number>(1);
-  partiesSize: number = 0;
-  location: ReactiveVar<string> = new ReactiveVar<string>(null);
-  user: Meteor.User;
-
-  constructor() {
-    super();
-
-    this.autorun(() => {
-      let options = {
-        limit: this.pageSize,
-        skip: (this.curPage.get() - 1) * this.pageSize,
-        sort: { name: this.nameOrder.get() }
-      };
-
-      this.subscribe('parties', options, this.location.get(), () => {
-        this.parties = Parties.find({}, { sort: { name: this.nameOrder.get() } });
-      }, true);
-
-      this.subscribe('images');
-    });
-
-    this.autorun(() => {
-      this.partiesSize = Counts.get('numberOfParties');
-    }, true);
-  }
-
-  removeParty(party) {
-    Parties.remove(party._id);
-  }
-
-  search(value: string) {
-    this.curPage.set(1);
-    this.location.set(value);
-  }
-
-  changeSortOrder(nameOrder: string) {
-    this.nameOrder.set(parseInt(nameOrder));
-  }
-
-  onPageChanged(page: number) {
-    this.curPage.set(page);
-  }
-
-  isOwner(party: Party): boolean {
-    if (this.user) {
-      return this.user._id === party.owner;
-    }
-
-    return false;
-  }
-}
-- 
2.7.4


From 604aff930f7513f52583963e780003c1d3fd5562 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 13 Jun 2016 17:46:34 +0200
Subject: [PATCH 249/259] Step 22.29: Use web version of PartiesList inside web
 App

---
 client/imports/app/app.web.ts | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/client/imports/app/app.web.ts b/client/imports/app/app.web.ts
index 07bed97..ea08a7b 100644
--- a/client/imports/app/app.web.ts
+++ b/client/imports/app/app.web.ts
@@ -6,7 +6,7 @@ import { Component, provide } from '@angular/core';
 import { bootstrap } from 'angular2-meteor-auto-bootstrap';
 import { provideRouter, RouterConfig, ROUTER_DIRECTIVES } from '@angular/router';
 import { APP_BASE_HREF } from '@angular/common';
-import { PartiesList } from './../parties-list/parties-list.ts';
+import { PartiesList } from './../parties-list/parties-list.web';
 import { PartyDetails } from './../party-details/party-details.ts';
 import '../../../collections/methods.ts';
 import {GOOGLE_MAPS_PROVIDERS} from 'angular2-google-maps/core';
-- 
2.7.4


From 94f63a1b798f84a67810d63c64430db8fc94354e Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 13 Jun 2016 17:47:58 +0200
Subject: [PATCH 250/259] Step 22.30: Create basic view of mobile version of
 PartiesList

---
 client/imports/parties-list/parties-list.mobile.html | 7 +++++++
 1 file changed, 7 insertions(+)
 create mode 100644 client/imports/parties-list/parties-list.mobile.html

diff --git a/client/imports/parties-list/parties-list.mobile.html b/client/imports/parties-list/parties-list.mobile.html
new file mode 100644
index 0000000..b9e7ac6
--- /dev/null
+++ b/client/imports/parties-list/parties-list.mobile.html
@@ -0,0 +1,7 @@
+<ion-navbar *navbar>
+  <ion-title>Socially</ion-title>
+</ion-navbar>
+
+<ion-content padding>
+  Parties
+</ion-content>
-- 
2.7.4


From 59361f24124c2be5a57add826a6264d0f340da3e Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 13 Jun 2016 17:48:45 +0200
Subject: [PATCH 251/259] Step 22.31: Mobile version of PartiesList

---
 client/imports/parties-list/parties-list.mobile.ts | 11 +++++++++++
 1 file changed, 11 insertions(+)
 create mode 100644 client/imports/parties-list/parties-list.mobile.ts

diff --git a/client/imports/parties-list/parties-list.mobile.ts b/client/imports/parties-list/parties-list.mobile.ts
new file mode 100644
index 0000000..0ca6cff
--- /dev/null
+++ b/client/imports/parties-list/parties-list.mobile.ts
@@ -0,0 +1,11 @@
+import { Component } from '@angular/core';
+import { PartiesList as PartiesListBase } from './parties-list.class';
+
+@Component({
+  templateUrl: '/client/imports/parties-list/parties-list.mobile.html'
+})
+export class PartiesList extends PartiesListBase {
+  constructor() {
+    super();
+  }
+}
-- 
2.7.4


From 9a20821a3551a5c737cc9d05bea27f72e5528aa4 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 13 Jun 2016 17:49:32 +0200
Subject: [PATCH 252/259] Step 22.32: Import RsvpPipe

---
 client/imports/parties-list/parties-list.mobile.ts | 6 +++++-
 1 file changed, 5 insertions(+), 1 deletion(-)

diff --git a/client/imports/parties-list/parties-list.mobile.ts b/client/imports/parties-list/parties-list.mobile.ts
index 0ca6cff..b7e92b8 100644
--- a/client/imports/parties-list/parties-list.mobile.ts
+++ b/client/imports/parties-list/parties-list.mobile.ts
@@ -1,8 +1,12 @@
 import { Component } from '@angular/core';
 import { PartiesList as PartiesListBase } from './parties-list.class';
+import { RsvpPipe } from '../pipes/pipes';
 
 @Component({
-  templateUrl: '/client/imports/parties-list/parties-list.mobile.html'
+  templateUrl: '/client/imports/parties-list/parties-list.mobile.html',
+  pipes: [
+    RsvpPipe
+  ]
 })
 export class PartiesList extends PartiesListBase {
   constructor() {
-- 
2.7.4


From 3376919cd714a14b92842768960bcdfcd7832f55 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 13 Jun 2016 17:51:41 +0200
Subject: [PATCH 253/259] Step 22.33: Add name, description and RSVPs to the
 view

---
 .../imports/parties-list/parties-list.mobile.html  | 25 +++++++++++++++++++++-
 1 file changed, 24 insertions(+), 1 deletion(-)

diff --git a/client/imports/parties-list/parties-list.mobile.html b/client/imports/parties-list/parties-list.mobile.html
index b9e7ac6..31ec349 100644
--- a/client/imports/parties-list/parties-list.mobile.html
+++ b/client/imports/parties-list/parties-list.mobile.html
@@ -3,5 +3,28 @@
 </ion-navbar>
 
 <ion-content padding>
-  Parties
+  <ion-card *ngFor="let party of parties">
+    <ion-card-content>
+      <ion-card-title>
+        {{party.name}}
+      </ion-card-title>
+      <p>
+        {{party.description}}
+      </p>
+    </ion-card-content>
+
+    <ion-row no-padding>
+      <ion-col text-right>
+        <ion-badge>
+          yes {{party | rsvp:'yes'}}
+        </ion-badge>
+        <ion-badge item-center dark>
+          maybe {{party | rsvp:'maybe'}}
+        </ion-badge>
+        <ion-badge item-center danger>
+          no {{party | rsvp:'no'}}
+        </ion-badge>
+      </ion-col>
+    </ion-row>
+  </ion-card>
 </ion-content>
-- 
2.7.4


From c3e6d365deb57a6b6a599303c44ff1f609d07285 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 13 Jun 2016 17:53:12 +0200
Subject: [PATCH 254/259] Step 22.34: Set PartiesList as root page

---
 client/imports/app/app.mobile.ts | 7 ++++++-
 1 file changed, 6 insertions(+), 1 deletion(-)

diff --git a/client/imports/app/app.mobile.ts b/client/imports/app/app.mobile.ts
index 00d48b4..f685fd4 100644
--- a/client/imports/app/app.mobile.ts
+++ b/client/imports/app/app.mobile.ts
@@ -2,11 +2,16 @@ import { Component } from '@angular/core';
 import { ionicBootstrap, App, Platform, MenuController } from 'ionic-angular';
 import { METEOR_PROVIDERS } from 'angular2-meteor';
 
+import { PartiesList } from '../parties-list/parties-list.mobile';
+
 @Component({
   templateUrl: '/client/imports/app/app.mobile.html'
 })
 class Socially {
-  constructor(app: App, platform: Platform, menu: MenuController) {}
+  rootPage: any;
+  constructor(app: App, platform: Platform, menu: MenuController) {
+    this.rootPage = PartiesList;
+  }
 }
 
 export function run(): void {
-- 
2.7.4


From c58d071c1e3f943c0a9d5b652d3853e05c9b4ba7 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 13 Jun 2016 18:02:12 +0200
Subject: [PATCH 255/259] Step 22.35: Fix an issue with absolute path of an
 image

---
 client/imports/pipes/pipes.ts | 10 +++++++++-
 1 file changed, 9 insertions(+), 1 deletion(-)

diff --git a/client/imports/pipes/pipes.ts b/client/imports/pipes/pipes.ts
index c404184..5205e29 100644
--- a/client/imports/pipes/pipes.ts
+++ b/client/imports/pipes/pipes.ts
@@ -46,7 +46,15 @@ export class DisplayMainImagePipe extends MeteorComponent {
     this.autorun(() => {
       const found = Images.findOne(imageId);
       if (found) {
-        imageUrl = found.url;
+        // XXX Make sure to use proper absolute url of an image
+        // jalik:ufs sets an absolute path of a file (let's say localhost:3000)
+        // Might be a problem when running an app in a different port (development)
+        if (!Meteor.isCordova) {
+          imageUrl = found.url;
+        } else {
+          const path = `ufs/${found.store}/${found._id}/${found.name}`;
+          imageUrl = Meteor.absoluteUrl(path);
+        }
       }
     }, true);
 
-- 
2.7.4


From 8a83725604b6100804171530e537cc20571350d2 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 13 Jun 2016 18:03:04 +0200
Subject: [PATCH 256/259] Step 22.36: Add DisplayMainImagePipe to PartiesList

---
 client/imports/parties-list/parties-list.mobile.ts | 5 +++--
 1 file changed, 3 insertions(+), 2 deletions(-)

diff --git a/client/imports/parties-list/parties-list.mobile.ts b/client/imports/parties-list/parties-list.mobile.ts
index b7e92b8..c9065e6 100644
--- a/client/imports/parties-list/parties-list.mobile.ts
+++ b/client/imports/parties-list/parties-list.mobile.ts
@@ -1,11 +1,12 @@
 import { Component } from '@angular/core';
 import { PartiesList as PartiesListBase } from './parties-list.class';
-import { RsvpPipe } from '../pipes/pipes';
+import { RsvpPipe, DisplayMainImagePipe } from '../pipes/pipes';
 
 @Component({
   templateUrl: '/client/imports/parties-list/parties-list.mobile.html',
   pipes: [
-    RsvpPipe
+    RsvpPipe,
+    DisplayMainImagePipe
   ]
 })
 export class PartiesList extends PartiesListBase {
-- 
2.7.4


From f9e76d3d645854486731b5a6b72d07b4e5c64806 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 13 Jun 2016 18:04:01 +0200
Subject: [PATCH 257/259] Step 22.37: Implement pipe

---
 client/imports/parties-list/parties-list.mobile.html | 1 +
 1 file changed, 1 insertion(+)

diff --git a/client/imports/parties-list/parties-list.mobile.html b/client/imports/parties-list/parties-list.mobile.html
index 31ec349..dc2e509 100644
--- a/client/imports/parties-list/parties-list.mobile.html
+++ b/client/imports/parties-list/parties-list.mobile.html
@@ -4,6 +4,7 @@
 
 <ion-content padding>
   <ion-card *ngFor="let party of parties">
+    <img *ngIf="party.images" [src]="party | displayMainImage">
     <ion-card-content>
       <ion-card-title>
         {{party.name}}
-- 
2.7.4


From 75e2cd6db64cdc4fd9ab6173ec14650a2a0afbb7 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Tue, 14 Jun 2016 11:37:46 +0200
Subject: [PATCH 258/259] Step 22.38: Add mys:fonts

---
 .meteor/packages | 1 +
 .meteor/versions | 2 ++
 2 files changed, 3 insertions(+)

diff --git a/.meteor/packages b/.meteor/packages
index 53b6f2c..3290af0 100644
--- a/.meteor/packages
+++ b/.meteor/packages
@@ -26,3 +26,4 @@ check
 jalik:ufs
 jalik:ufs-gridfs
 mys:accounts-phone
+mys:fonts
diff --git a/.meteor/versions b/.meteor/versions
index dc6d1f4..d9740aa 100644
--- a/.meteor/versions
+++ b/.meteor/versions
@@ -56,6 +56,8 @@ modules@0.6.1
 modules-runtime@0.6.3
 mongo@1.1.7
 mongo-id@1.0.4
+mys:accounts-phone@0.0.21
+mys:fonts@0.0.1
 npm-bcrypt@0.8.5
 npm-mongo@1.4.43
 observe-sequence@1.0.11
-- 
2.7.4


From 947344a9f66256cda09c0f45a0a66135d8f0c324 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Tue, 14 Jun 2016 11:38:15 +0200
Subject: [PATCH 259/259] Step 22.39: Specify fonts from ionic-angular

---
 .meteor/versions |  2 +-
 fonts.json       | 11 +++++++++++
 2 files changed, 12 insertions(+), 1 deletion(-)
 create mode 100644 fonts.json

diff --git a/.meteor/versions b/.meteor/versions
index d9740aa..420310a 100644
--- a/.meteor/versions
+++ b/.meteor/versions
@@ -57,7 +57,7 @@ modules-runtime@0.6.3
 mongo@1.1.7
 mongo-id@1.0.4
 mys:accounts-phone@0.0.21
-mys:fonts@0.0.1
+mys:fonts@0.0.2
 npm-bcrypt@0.8.5
 npm-mongo@1.4.43
 observe-sequence@1.0.11
diff --git a/fonts.json b/fonts.json
new file mode 100644
index 0000000..1fa0cc1
--- /dev/null
+++ b/fonts.json
@@ -0,0 +1,11 @@
+{
+  "map": {
+    "node_modules/ionic-angular/fonts/ionicons.ttf": "fonts/ionicons.ttf",
+    "node_modules/ionic-angular/fonts/noto-sans-bold.ttf": "fonts/noto-sans-bold.ttf",
+    "node_modules/ionic-angular/fonts/noto-sans-regular.ttf": "fonts/noto-sans-regular.ttf",
+    "node_modules/ionic-angular/fonts/roboto-bold.ttf": "fonts/roboto-bold.ttf",
+    "node_modules/ionic-angular/fonts/roboto-light.ttf": "fonts/roboto-light.ttf",
+    "node_modules/ionic-angular/fonts/roboto-medium.ttf": "fonts/roboto-medium.ttf",
+    "node_modules/ionic-angular/fonts/roboto-regular.ttf": "fonts/roboto-regular.ttf"
+  }
+}
-- 
2.7.4

