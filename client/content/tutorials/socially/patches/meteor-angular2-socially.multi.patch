From a5b3527e8f6be6378b5bb81f61158999c9def6fd Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 15:10:14 +0200
Subject: [PATCH 001/171] Add README file

---
 README.md | 2 ++
 1 file changed, 2 insertions(+)
 create mode 100644 README.md

diff --git a/README.md b/README.md
new file mode 100644
index 0000000..bf634c1
--- /dev/null
+++ b/README.md
@@ -0,0 +1,2 @@
+# Angular2-Meteor Tutorial
+Tutorial is based on building Angular2 UI for a Meteor app called Socially.
\ No newline at end of file
-- 
2.7.4


From 29b848ae32cfd6fe9a144c5f7bb1a5fafd15cff2 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 15:11:01 +0200
Subject: [PATCH 002/171] Step 0.1: add client/index.html

---
 client/index.html | 3 +++
 1 file changed, 3 insertions(+)
 create mode 100644 client/index.html

diff --git a/client/index.html b/client/index.html
new file mode 100644
index 0000000..3887661
--- /dev/null
+++ b/client/index.html
@@ -0,0 +1,3 @@
+<body>
+<p>Nothing here</p>
+</body>
\ No newline at end of file
-- 
2.7.4


From 7485c26b0e4376978cadf6042f7f724a166a628a Mon Sep 17 00:00:00 2001
From: Uri Goldshtein <uri.goldshtein@gmail.com>
Date: Fri, 13 May 2016 21:56:51 +0300
Subject: [PATCH 003/171] Step 0.2: Add the angular2-meteor dependencies

---
 .gitignore       | 37 +++++++++++++++++++++++++++++++++++++
 .meteor/packages |  3 ++-
 .meteor/versions | 10 ++++++----
 package.json     | 12 +++++++++++-
 4 files changed, 56 insertions(+), 6 deletions(-)
 create mode 100644 .gitignore

diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..68dc293
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,37 @@
+# Created by .ignore support plugin (hsz.mobi)
+### Node template
+# Logs
+logs
+*.log
+npm-debug.log*
+
+# Runtime data
+pids
+*.pid
+*.seed
+
+# Directory for instrumented libs generated by jscoverage/JSCover
+lib-cov
+
+# Coverage directory used by tools like istanbul
+coverage
+
+# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)
+.grunt
+
+# node-waf configuration
+.lock-wscript
+
+# Compiled binary addons (http://nodejs.org/api/addons.html)
+build/Release
+
+# Dependency directories
+node_modules
+jspm_packages
+
+# Optional npm cache directory
+.npm
+
+# Optional REPL history
+.node_repl_history
+
diff --git a/.meteor/packages b/.meteor/packages
index a9f8340..db449bd 100644
--- a/.meteor/packages
+++ b/.meteor/packages
@@ -7,7 +7,6 @@
 meteor-base             # Packages every Meteor app needs to have
 mobile-experience       # Packages for a great mobile UX
 mongo                   # The database Meteor supports right now
-blaze-html-templates    # Compile .html files into Meteor Blaze views
 session                 # Client-side reactive dictionary for your app
 jquery                  # Helpful client-side library
 tracker                 # Meteor's client-side reactive programming library
@@ -18,3 +17,5 @@ ecmascript              # Enable ECMAScript2015+ syntax in app code
 
 autopublish             # Publish all data to the clients (for prototyping)
 insecure                # Allow all DB writes from clients (for prototyping)
+angular2-compilers
+barbatus:angular2-runtime
diff --git a/.meteor/versions b/.meteor/versions
index e794fc0..96a6210 100644
--- a/.meteor/versions
+++ b/.meteor/versions
@@ -1,16 +1,20 @@
 allow-deny@1.0.4
+angular2-compilers@0.5.6
+angular2-html-templates@0.5.2
 autopublish@1.0.7
 autoupdate@1.2.9
 babel-compiler@6.6.4
 babel-runtime@0.1.8
+barbatus:angular2-runtime@0.2.3_2
+barbatus:typescript@0.2.11
+barbatus:typescript-compiler@0.5.10
+barbatus:typescript-runtime@0.1.2
 base64@1.0.8
 binary-heap@1.0.8
 blaze@2.1.7
-blaze-html-templates@1.0.4
 blaze-tools@1.0.8
 boilerplate-generator@1.0.8
 caching-compiler@1.0.4
-caching-html-compiler@1.0.6
 callback-hook@1.0.8
 check@1.2.1
 ddp@1.2.5
@@ -62,8 +66,6 @@ spacebars-compiler@1.0.11
 standard-minifier-css@1.0.6
 standard-minifier-js@1.0.6
 standard-minifiers@1.0.6
-templating@1.1.9
-templating-tools@1.0.4
 tracker@1.0.13
 ui@1.0.11
 underscore@1.0.8
diff --git a/package.json b/package.json
index 183abe2..9989232 100644
--- a/package.json
+++ b/package.json
@@ -5,6 +5,16 @@
     "start": "meteor run"
   },
   "dependencies": {
-    "meteor-node-stubs": "^0.2.3"
+    "@angular/common": "2.0.0-rc.1",
+    "@angular/compiler": "2.0.0-rc.1",
+    "@angular/core": "2.0.0-rc.1",
+    "@angular/platform-browser": "2.0.0-rc.1",
+    "@angular/platform-browser-dynamic": "2.0.0-rc.1",
+    "angular2-meteor": "0.5.5",
+    "es6-shim": "0.35.1",
+    "meteor-node-stubs": "^0.2.3",
+    "reflect-metadata": "0.1.2",
+    "rxjs": "5.0.0-beta.6",
+    "zone.js": "0.6.12"
   }
 }
-- 
2.7.4


From 99fd48988c3724acd914a97ccce000f9d1189f78 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 15:16:27 +0200
Subject: [PATCH 004/171] Step 0.3: Add TypeScript configuration file

---
 tsconfig.json | 21 +++++++++++++++++++++
 1 file changed, 21 insertions(+)
 create mode 100644 tsconfig.json

diff --git a/tsconfig.json b/tsconfig.json
new file mode 100644
index 0000000..4c01376
--- /dev/null
+++ b/tsconfig.json
@@ -0,0 +1,21 @@
+{
+  "compilerOptions": {
+    "experimentalDecorators": true,
+    "module": "commonjs",
+    "target": "es5",
+    "isolatedModules": false,
+    "moduleResolution": "node",
+    "emitDecoratorMetadata": true,
+    "removeComments": false,
+    "noImplicitAny": false,
+    "sourceMap": true
+  },
+  "filesGlob": [
+    "client/**/*.ts",
+    "server/**/*.ts",
+    "typings/**/*.d.ts"
+  ],
+  "exclude": [
+    "node_modules"
+  ]
+}
\ No newline at end of file
-- 
2.7.4


From 54506ac271beb90285497b122e6df2753660c3fe Mon Sep 17 00:00:00 2001
From: Uri Goldshtein <uri.goldshtein@gmail.com>
Date: Fri, 13 May 2016 22:03:21 +0300
Subject: [PATCH 005/171] Step 0.5: Added Typings dependencies

---
 typings.json                                       |  10 +
 typings/browser.d.ts                               |   3 +
 typings/browser/ambient/es6-shim/index.d.ts        | 670 +++++++++++++++
 typings/browser/ambient/meteor/index.d.ts          | 831 +++++++++++++++++++
 typings/browser/definitions/es6-promise/index.d.ts |  84 ++
 typings/main.d.ts                                  |   3 +
 typings/main/ambient/es6-shim/index.d.ts           | 670 +++++++++++++++
 typings/main/ambient/meteor/index.d.ts             | 898 +++++++++++++++++++++
 typings/main/definitions/es6-promise/index.d.ts    |  84 ++
 9 files changed, 3253 insertions(+)
 create mode 100644 typings.json
 create mode 100644 typings/browser.d.ts
 create mode 100644 typings/browser/ambient/es6-shim/index.d.ts
 create mode 100644 typings/browser/ambient/meteor/index.d.ts
 create mode 100644 typings/browser/definitions/es6-promise/index.d.ts
 create mode 100644 typings/main.d.ts
 create mode 100644 typings/main/ambient/es6-shim/index.d.ts
 create mode 100644 typings/main/ambient/meteor/index.d.ts
 create mode 100644 typings/main/definitions/es6-promise/index.d.ts

diff --git a/typings.json b/typings.json
new file mode 100644
index 0000000..77adee2
--- /dev/null
+++ b/typings.json
@@ -0,0 +1,10 @@
+{
+  "name": "socially",
+  "version": false,
+  "dependencies": {
+    "es6-promise": "registry:npm/es6-promise#3.0.0+20160211003958"
+  },
+  "ambientDependencies": {
+    "es6-shim": "registry:dt/es6-shim#0.31.2+20160317120654"
+  }
+}
diff --git a/typings/browser.d.ts b/typings/browser.d.ts
new file mode 100644
index 0000000..e496a98
--- /dev/null
+++ b/typings/browser.d.ts
@@ -0,0 +1,3 @@
+/// <reference path="browser/ambient/es6-shim/index.d.ts" />
+/// <reference path="browser/ambient/meteor/index.d.ts" />
+/// <reference path="browser/definitions/es6-promise/index.d.ts" />
diff --git a/typings/browser/ambient/es6-shim/index.d.ts b/typings/browser/ambient/es6-shim/index.d.ts
new file mode 100644
index 0000000..fe86f5e
--- /dev/null
+++ b/typings/browser/ambient/es6-shim/index.d.ts
@@ -0,0 +1,670 @@
+// Generated by typings
+// Source: https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/7de6c3dd94feaeb21f20054b9f30d5dabc5efabd/es6-shim/es6-shim.d.ts
+// Type definitions for es6-shim v0.31.2
+// Project: https://github.com/paulmillr/es6-shim
+// Definitions by: Ron Buckton <http://github.com/rbuckton>
+// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
+
+declare type PropertyKey = string | number | symbol;
+
+interface IteratorResult<T> {
+    done: boolean;
+    value?: T;
+}
+
+interface IterableShim<T> {
+    /**
+      * Shim for an ES6 iterable. Not intended for direct use by user code.
+      */
+    "_es6-shim iterator_"(): Iterator<T>;
+}
+
+interface Iterator<T> {
+    next(value?: any): IteratorResult<T>;
+    return?(value?: any): IteratorResult<T>;
+    throw?(e?: any): IteratorResult<T>;
+}
+
+interface IterableIteratorShim<T> extends IterableShim<T>, Iterator<T> {
+    /**
+      * Shim for an ES6 iterable iterator. Not intended for direct use by user code.
+      */
+    "_es6-shim iterator_"(): IterableIteratorShim<T>;
+}
+
+interface StringConstructor {
+    /**
+      * Return the String value whose elements are, in order, the elements in the List elements.
+      * If length is 0, the empty string is returned.
+      */
+    fromCodePoint(...codePoints: number[]): string;
+
+    /**
+      * String.raw is intended for use as a tag function of a Tagged Template String. When called
+      * as such the first argument will be a well formed template call site object and the rest
+      * parameter will contain the substitution values.
+      * @param template A well-formed template string call site representation.
+      * @param substitutions A set of substitution values.
+      */
+    raw(template: TemplateStringsArray, ...substitutions: any[]): string;
+}
+
+interface String {
+    /**
+      * Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point
+      * value of the UTF-16 encoded code point starting at the string element at position pos in
+      * the String resulting from converting this object to a String.
+      * If there is no element at that position, the result is undefined.
+      * If a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.
+      */
+    codePointAt(pos: number): number;
+
+    /**
+      * Returns true if searchString appears as a substring of the result of converting this
+      * object to a String, at one or more positions that are
+      * greater than or equal to position; otherwise, returns false.
+      * @param searchString search string
+      * @param position If position is undefined, 0 is assumed, so as to search all of the String.
+      */
+    includes(searchString: string, position?: number): boolean;
+
+    /**
+      * Returns true if the sequence of elements of searchString converted to a String is the
+      * same as the corresponding elements of this object (converted to a String) starting at
+      * endPosition – length(this). Otherwise returns false.
+      */
+    endsWith(searchString: string, endPosition?: number): boolean;
+
+    /**
+      * Returns a String value that is made from count copies appended together. If count is 0,
+      * T is the empty String is returned.
+      * @param count number of copies to append
+      */
+    repeat(count: number): string;
+
+    /**
+      * Returns true if the sequence of elements of searchString converted to a String is the
+      * same as the corresponding elements of this object (converted to a String) starting at
+      * position. Otherwise returns false.
+      */
+    startsWith(searchString: string, position?: number): boolean;
+
+    /**
+      * Returns an <a> HTML anchor element and sets the name attribute to the text value
+      * @param name
+      */
+    anchor(name: string): string;
+
+    /** Returns a <big> HTML element */
+    big(): string;
+
+    /** Returns a <blink> HTML element */
+    blink(): string;
+
+    /** Returns a <b> HTML element */
+    bold(): string;
+
+    /** Returns a <tt> HTML element */
+    fixed(): string
+
+    /** Returns a <font> HTML element and sets the color attribute value */
+    fontcolor(color: string): string
+
+    /** Returns a <font> HTML element and sets the size attribute value */
+    fontsize(size: number): string;
+
+    /** Returns a <font> HTML element and sets the size attribute value */
+    fontsize(size: string): string;
+
+    /** Returns an <i> HTML element */
+    italics(): string;
+
+    /** Returns an <a> HTML element and sets the href attribute value */
+    link(url: string): string;
+
+    /** Returns a <small> HTML element */
+    small(): string;
+
+    /** Returns a <strike> HTML element */
+    strike(): string;
+
+    /** Returns a <sub> HTML element */
+    sub(): string;
+
+    /** Returns a <sup> HTML element */
+    sup(): string;
+
+    /**
+      * Shim for an ES6 iterable. Not intended for direct use by user code.
+      */
+    "_es6-shim iterator_"(): IterableIteratorShim<string>;
+}
+
+interface ArrayConstructor {
+    /**
+      * Creates an array from an array-like object.
+      * @param arrayLike An array-like object to convert to an array.
+      * @param mapfn A mapping function to call on every element of the array.
+      * @param thisArg Value of 'this' used to invoke the mapfn.
+      */
+    from<T, U>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => U, thisArg?: any): Array<U>;
+
+    /**
+      * Creates an array from an iterable object.
+      * @param iterable An iterable object to convert to an array.
+      * @param mapfn A mapping function to call on every element of the array.
+      * @param thisArg Value of 'this' used to invoke the mapfn.
+      */
+    from<T, U>(iterable: IterableShim<T>, mapfn: (v: T, k: number) => U, thisArg?: any): Array<U>;
+
+    /**
+      * Creates an array from an array-like object.
+      * @param arrayLike An array-like object to convert to an array.
+      */
+    from<T>(arrayLike: ArrayLike<T>): Array<T>;
+
+    /**
+      * Creates an array from an iterable object.
+      * @param iterable An iterable object to convert to an array.
+      */
+    from<T>(iterable: IterableShim<T>): Array<T>;
+
+    /**
+      * Returns a new array from a set of elements.
+      * @param items A set of elements to include in the new array object.
+      */
+    of<T>(...items: T[]): Array<T>;
+}
+
+interface Array<T> {
+    /**
+      * Returns the value of the first element in the array where predicate is true, and undefined
+      * otherwise.
+      * @param predicate find calls predicate once for each element of the array, in ascending
+      * order, until it finds one where predicate returns true. If such an element is found, find
+      * immediately returns that element value. Otherwise, find returns undefined.
+      * @param thisArg If provided, it will be used as the this value for each invocation of
+      * predicate. If it is not provided, undefined is used instead.
+      */
+    find(predicate: (value: T, index: number, obj: Array<T>) => boolean, thisArg?: any): T;
+
+    /**
+      * Returns the index of the first element in the array where predicate is true, and undefined
+      * otherwise.
+      * @param predicate find calls predicate once for each element of the array, in ascending
+      * order, until it finds one where predicate returns true. If such an element is found, find
+      * immediately returns that element value. Otherwise, find returns undefined.
+      * @param thisArg If provided, it will be used as the this value for each invocation of
+      * predicate. If it is not provided, undefined is used instead.
+      */
+    findIndex(predicate: (value: T) => boolean, thisArg?: any): number;
+
+    /**
+      * Returns the this object after filling the section identified by start and end with value
+      * @param value value to fill array section with
+      * @param start index to start filling the array at. If start is negative, it is treated as
+      * length+start where length is the length of the array.
+      * @param end index to stop filling the array at. If end is negative, it is treated as
+      * length+end.
+      */
+    fill(value: T, start?: number, end?: number): T[];
+
+    /**
+      * Returns the this object after copying a section of the array identified by start and end
+      * to the same array starting at position target
+      * @param target If target is negative, it is treated as length+target where length is the
+      * length of the array.
+      * @param start If start is negative, it is treated as length+start. If end is negative, it
+      * is treated as length+end.
+      * @param end If not specified, length of the this object is used as its default value.
+      */
+    copyWithin(target: number, start: number, end?: number): T[];
+
+    /**
+      * Returns an array of key, value pairs for every entry in the array
+      */
+    entries(): IterableIteratorShim<[number, T]>;
+
+    /**
+      * Returns an list of keys in the array
+      */
+    keys(): IterableIteratorShim<number>;
+
+    /**
+      * Returns an list of values in the array
+      */
+    values(): IterableIteratorShim<T>;
+
+    /**
+      * Shim for an ES6 iterable. Not intended for direct use by user code.
+      */
+    "_es6-shim iterator_"(): IterableIteratorShim<T>;
+}
+
+interface NumberConstructor {
+    /**
+      * The value of Number.EPSILON is the difference between 1 and the smallest value greater than 1
+      * that is representable as a Number value, which is approximately:
+      * 2.2204460492503130808472633361816 x 10‍−‍16.
+      */
+    EPSILON: number;
+
+    /**
+      * Returns true if passed value is finite.
+      * Unlike the global isFininte, Number.isFinite doesn't forcibly convert the parameter to a
+      * number. Only finite values of the type number, result in true.
+      * @param number A numeric value.
+      */
+    isFinite(number: number): boolean;
+
+    /**
+      * Returns true if the value passed is an integer, false otherwise.
+      * @param number A numeric value.
+      */
+    isInteger(number: number): boolean;
+
+    /**
+      * Returns a Boolean value that indicates whether a value is the reserved value NaN (not a
+      * number). Unlike the global isNaN(), Number.isNaN() doesn't forcefully convert the parameter
+      * to a number. Only values of the type number, that are also NaN, result in true.
+      * @param number A numeric value.
+      */
+    isNaN(number: number): boolean;
+
+    /**
+      * Returns true if the value passed is a safe integer.
+      * @param number A numeric value.
+      */
+    isSafeInteger(number: number): boolean;
+
+    /**
+      * The value of the largest integer n such that n and n + 1 are both exactly representable as
+      * a Number value.
+      * The value of Number.MIN_SAFE_INTEGER is 9007199254740991 2^53 − 1.
+      */
+    MAX_SAFE_INTEGER: number;
+
+    /**
+      * The value of the smallest integer n such that n and n − 1 are both exactly representable as
+      * a Number value.
+      * The value of Number.MIN_SAFE_INTEGER is −9007199254740991 (−(2^53 − 1)).
+      */
+    MIN_SAFE_INTEGER: number;
+
+    /**
+      * Converts a string to a floating-point number.
+      * @param string A string that contains a floating-point number.
+      */
+    parseFloat(string: string): number;
+
+    /**
+      * Converts A string to an integer.
+      * @param s A string to convert into a number.
+      * @param radix A value between 2 and 36 that specifies the base of the number in numString.
+      * If this argument is not supplied, strings with a prefix of '0x' are considered hexadecimal.
+      * All other strings are considered decimal.
+      */
+    parseInt(string: string, radix?: number): number;
+}
+
+interface ObjectConstructor {
+    /**
+      * Copy the values of all of the enumerable own properties from one or more source objects to a
+      * target object. Returns the target object.
+      * @param target The target object to copy to.
+      * @param sources One or more source objects to copy properties from.
+      */
+    assign(target: any, ...sources: any[]): any;
+
+    /**
+      * Returns true if the values are the same value, false otherwise.
+      * @param value1 The first value.
+      * @param value2 The second value.
+      */
+    is(value1: any, value2: any): boolean;
+
+    /**
+      * Sets the prototype of a specified object o to  object proto or null. Returns the object o.
+      * @param o The object to change its prototype.
+      * @param proto The value of the new prototype or null.
+      * @remarks Requires `__proto__` support.
+      */
+    setPrototypeOf(o: any, proto: any): any;
+}
+
+interface RegExp {
+    /**
+      * Returns a string indicating the flags of the regular expression in question. This field is read-only.
+      * The characters in this string are sequenced and concatenated in the following order:
+      *
+      *    - "g" for global
+      *    - "i" for ignoreCase
+      *    - "m" for multiline
+      *    - "u" for unicode
+      *    - "y" for sticky
+      *
+      * If no flags are set, the value is the empty string.
+      */
+    flags: string;
+}
+
+interface Math {
+    /**
+      * Returns the number of leading zero bits in the 32-bit binary representation of a number.
+      * @param x A numeric expression.
+      */
+    clz32(x: number): number;
+
+    /**
+      * Returns the result of 32-bit multiplication of two numbers.
+      * @param x First number
+      * @param y Second number
+      */
+    imul(x: number, y: number): number;
+
+    /**
+      * Returns the sign of the x, indicating whether x is positive, negative or zero.
+      * @param x The numeric expression to test
+      */
+    sign(x: number): number;
+
+    /**
+      * Returns the base 10 logarithm of a number.
+      * @param x A numeric expression.
+      */
+    log10(x: number): number;
+
+    /**
+      * Returns the base 2 logarithm of a number.
+      * @param x A numeric expression.
+      */
+    log2(x: number): number;
+
+    /**
+      * Returns the natural logarithm of 1 + x.
+      * @param x A numeric expression.
+      */
+    log1p(x: number): number;
+
+    /**
+      * Returns the result of (e^x - 1) of x (e raised to the power of x, where e is the base of
+      * the natural logarithms).
+      * @param x A numeric expression.
+      */
+    expm1(x: number): number;
+
+    /**
+      * Returns the hyperbolic cosine of a number.
+      * @param x A numeric expression that contains an angle measured in radians.
+      */
+    cosh(x: number): number;
+
+    /**
+      * Returns the hyperbolic sine of a number.
+      * @param x A numeric expression that contains an angle measured in radians.
+      */
+    sinh(x: number): number;
+
+    /**
+      * Returns the hyperbolic tangent of a number.
+      * @param x A numeric expression that contains an angle measured in radians.
+      */
+    tanh(x: number): number;
+
+    /**
+      * Returns the inverse hyperbolic cosine of a number.
+      * @param x A numeric expression that contains an angle measured in radians.
+      */
+    acosh(x: number): number;
+
+    /**
+      * Returns the inverse hyperbolic sine of a number.
+      * @param x A numeric expression that contains an angle measured in radians.
+      */
+    asinh(x: number): number;
+
+    /**
+      * Returns the inverse hyperbolic tangent of a number.
+      * @param x A numeric expression that contains an angle measured in radians.
+      */
+    atanh(x: number): number;
+
+    /**
+      * Returns the square root of the sum of squares of its arguments.
+      * @param values Values to compute the square root for.
+      *     If no arguments are passed, the result is +0.
+      *     If there is only one argument, the result is the absolute value.
+      *     If any argument is +Infinity or -Infinity, the result is +Infinity.
+      *     If any argument is NaN, the result is NaN.
+      *     If all arguments are either +0 or −0, the result is +0.
+      */
+    hypot(...values: number[]): number;
+
+    /**
+      * Returns the integral part of the a numeric expression, x, removing any fractional digits.
+      * If x is already an integer, the result is x.
+      * @param x A numeric expression.
+      */
+    trunc(x: number): number;
+
+    /**
+      * Returns the nearest single precision float representation of a number.
+      * @param x A numeric expression.
+      */
+    fround(x: number): number;
+
+    /**
+      * Returns an implementation-dependent approximation to the cube root of number.
+      * @param x A numeric expression.
+      */
+    cbrt(x: number): number;
+}
+
+interface PromiseLike<T> {
+    /**
+    * Attaches callbacks for the resolution and/or rejection of the Promise.
+    * @param onfulfilled The callback to execute when the Promise is resolved.
+    * @param onrejected The callback to execute when the Promise is rejected.
+    * @returns A Promise for the completion of which ever callback is executed.
+    */
+    then<TResult>(onfulfilled?: (value: T) => TResult | PromiseLike<TResult>, onrejected?: (reason: any) => TResult | PromiseLike<TResult>): PromiseLike<TResult>;
+    then<TResult>(onfulfilled?: (value: T) => TResult | PromiseLike<TResult>, onrejected?: (reason: any) => void): PromiseLike<TResult>;
+}
+
+/**
+ * Represents the completion of an asynchronous operation
+ */
+interface Promise<T> {
+    /**
+    * Attaches callbacks for the resolution and/or rejection of the Promise.
+    * @param onfulfilled The callback to execute when the Promise is resolved.
+    * @param onrejected The callback to execute when the Promise is rejected.
+    * @returns A Promise for the completion of which ever callback is executed.
+    */
+    then<TResult>(onfulfilled?: (value: T) => TResult | PromiseLike<TResult>, onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Promise<TResult>;
+    then<TResult>(onfulfilled?: (value: T) => TResult | PromiseLike<TResult>, onrejected?: (reason: any) => void): Promise<TResult>;
+
+    /**
+     * Attaches a callback for only the rejection of the Promise.
+     * @param onrejected The callback to execute when the Promise is rejected.
+     * @returns A Promise for the completion of the callback.
+     */
+    catch(onrejected?: (reason: any) => T | PromiseLike<T>): Promise<T>;
+    catch(onrejected?: (reason: any) => void): Promise<T>;
+}
+
+interface PromiseConstructor {
+    /**
+      * A reference to the prototype.
+      */
+    prototype: Promise<any>;
+
+    /**
+     * Creates a new Promise.
+     * @param executor A callback used to initialize the promise. This callback is passed two arguments:
+     * a resolve callback used resolve the promise with a value or the result of another promise,
+     * and a reject callback used to reject the promise with a provided reason or error.
+     */
+    new <T>(executor: (resolve: (value?: T | PromiseLike<T>) => void, reject: (reason?: any) => void) => void): Promise<T>;
+
+    /**
+     * Creates a Promise that is resolved with an array of results when all of the provided Promises
+     * resolve, or rejected when any Promise is rejected.
+     * @param values An array of Promises.
+     * @returns A new Promise.
+     */
+    all<T>(values: IterableShim<T | PromiseLike<T>>): Promise<T[]>;
+
+    /**
+     * Creates a Promise that is resolved or rejected when any of the provided Promises are resolved
+     * or rejected.
+     * @param values An array of Promises.
+     * @returns A new Promise.
+     */
+    race<T>(values: IterableShim<T | PromiseLike<T>>): Promise<T>;
+
+    /**
+     * Creates a new rejected promise for the provided reason.
+     * @param reason The reason the promise was rejected.
+     * @returns A new rejected Promise.
+     */
+    reject(reason: any): Promise<void>;
+
+    /**
+     * Creates a new rejected promise for the provided reason.
+     * @param reason The reason the promise was rejected.
+     * @returns A new rejected Promise.
+     */
+    reject<T>(reason: any): Promise<T>;
+
+    /**
+      * Creates a new resolved promise for the provided value.
+      * @param value A promise.
+      * @returns A promise whose internal state matches the provided promise.
+      */
+    resolve<T>(value: T | PromiseLike<T>): Promise<T>;
+
+    /**
+     * Creates a new resolved promise .
+     * @returns A resolved promise.
+     */
+    resolve(): Promise<void>;
+}
+
+declare var Promise: PromiseConstructor;
+
+interface Map<K, V> {
+    clear(): void;
+    delete(key: K): boolean;
+    forEach(callbackfn: (value: V, index: K, map: Map<K, V>) => void, thisArg?: any): void;
+    get(key: K): V;
+    has(key: K): boolean;
+    set(key: K, value?: V): Map<K, V>;
+    size: number;
+    entries(): IterableIteratorShim<[K, V]>;
+    keys(): IterableIteratorShim<K>;
+    values(): IterableIteratorShim<V>;
+}
+
+interface MapConstructor {
+    new <K, V>(): Map<K, V>;
+    new <K, V>(iterable: IterableShim<[K, V]>): Map<K, V>;
+    prototype: Map<any, any>;
+}
+
+declare var Map: MapConstructor;
+
+interface Set<T> {
+    add(value: T): Set<T>;
+    clear(): void;
+    delete(value: T): boolean;
+    forEach(callbackfn: (value: T, index: T, set: Set<T>) => void, thisArg?: any): void;
+    has(value: T): boolean;
+    size: number;
+    entries(): IterableIteratorShim<[T, T]>;
+    keys(): IterableIteratorShim<T>;
+    values(): IterableIteratorShim<T>;
+}
+
+interface SetConstructor {
+    new <T>(): Set<T>;
+    new <T>(iterable: IterableShim<T>): Set<T>;
+    prototype: Set<any>;
+}
+
+declare var Set: SetConstructor;
+
+interface WeakMap<K, V> {
+    delete(key: K): boolean;
+    get(key: K): V;
+    has(key: K): boolean;
+    set(key: K, value?: V): WeakMap<K, V>;
+}
+
+interface WeakMapConstructor {
+    new <K, V>(): WeakMap<K, V>;
+    new <K, V>(iterable: IterableShim<[K, V]>): WeakMap<K, V>;
+    prototype: WeakMap<any, any>;
+}
+
+declare var WeakMap: WeakMapConstructor;
+
+interface WeakSet<T> {
+    add(value: T): WeakSet<T>;
+    delete(value: T): boolean;
+    has(value: T): boolean;
+}
+
+interface WeakSetConstructor {
+    new <T>(): WeakSet<T>;
+    new <T>(iterable: IterableShim<T>): WeakSet<T>;
+    prototype: WeakSet<any>;
+}
+
+declare var WeakSet: WeakSetConstructor;
+
+declare namespace Reflect {
+    function apply(target: Function, thisArgument: any, argumentsList: ArrayLike<any>): any;
+    function construct(target: Function, argumentsList: ArrayLike<any>): any;
+    function defineProperty(target: any, propertyKey: PropertyKey, attributes: PropertyDescriptor): boolean;
+    function deleteProperty(target: any, propertyKey: PropertyKey): boolean;
+    function enumerate(target: any): IterableIteratorShim<any>;
+    function get(target: any, propertyKey: PropertyKey, receiver?: any): any;
+    function getOwnPropertyDescriptor(target: any, propertyKey: PropertyKey): PropertyDescriptor;
+    function getPrototypeOf(target: any): any;
+    function has(target: any, propertyKey: PropertyKey): boolean;
+    function isExtensible(target: any): boolean;
+    function ownKeys(target: any): Array<PropertyKey>;
+    function preventExtensions(target: any): boolean;
+    function set(target: any, propertyKey: PropertyKey, value: any, receiver?: any): boolean;
+    function setPrototypeOf(target: any, proto: any): boolean;
+}
+
+declare module "es6-shim" {
+    var String: StringConstructor;
+    var Array: ArrayConstructor;
+    var Number: NumberConstructor;
+    var Math: Math;
+    var Object: ObjectConstructor;
+    var Map: MapConstructor;
+    var Set: SetConstructor;
+    var WeakMap: WeakMapConstructor;
+    var WeakSet: WeakSetConstructor;
+    var Promise: PromiseConstructor;
+    namespace Reflect {
+        function apply(target: Function, thisArgument: any, argumentsList: ArrayLike<any>): any;
+        function construct(target: Function, argumentsList: ArrayLike<any>): any;
+        function defineProperty(target: any, propertyKey: PropertyKey, attributes: PropertyDescriptor): boolean;
+        function deleteProperty(target: any, propertyKey: PropertyKey): boolean;
+        function enumerate(target: any): Iterator<any>;
+        function get(target: any, propertyKey: PropertyKey, receiver?: any): any;
+        function getOwnPropertyDescriptor(target: any, propertyKey: PropertyKey): PropertyDescriptor;
+        function getPrototypeOf(target: any): any;
+        function has(target: any, propertyKey: PropertyKey): boolean;
+        function isExtensible(target: any): boolean;
+        function ownKeys(target: any): Array<PropertyKey>;
+        function preventExtensions(target: any): boolean;
+        function set(target: any, propertyKey: PropertyKey, value: any, receiver?: any): boolean;
+        function setPrototypeOf(target: any, proto: any): boolean;
+    }
+}
\ No newline at end of file
diff --git a/typings/browser/ambient/meteor/index.d.ts b/typings/browser/ambient/meteor/index.d.ts
new file mode 100644
index 0000000..4e87ff7
--- /dev/null
+++ b/typings/browser/ambient/meteor/index.d.ts
@@ -0,0 +1,831 @@
+// Generated by typings
+// Source: https://raw.githubusercontent.com/barbatus/meteor-typings/83c6933d0ef07abfd4a2a85b5ec41bc3949f6d28/meteor/1.3/meteor.d.ts
+// Type definitions for Meteor 1.3
+// Project: http://www.meteor.com/
+// Definitions by:
+// Alex Borodach <https://github.com/barbatus>,
+// Dave Allen <https://github.com/fullflavedave>
+
+declare module 'meteor/check' {
+  export module Match {
+    var Any: any;
+    var String: any;
+    var Integer: any;
+    var Boolean: any;
+    var undefined: any;
+    var Object: any;
+    function Optional(pattern: any): boolean;
+    function ObjectIncluding(dico: any): boolean;
+    function OneOf(...patterns: any[]): any;
+    function Where(condition: any): any;
+    function test(value: any, pattern: any): boolean;
+  }
+
+  export function check(value: any, pattern: any): void;
+}
+
+declare module 'meteor/meteor' {
+  import {Mongo} from 'meteor/mongo';
+  import {Blaze} from 'meteor/blaze';
+  import {EJSON} from 'meteor/ejson';
+
+  export module Meteor {
+    /** Global props **/
+    var isClient: boolean;
+    var isCordova: boolean;
+    var isServer: boolean;
+    var release: string;
+    var settings: { [id: string]: any };
+    /** props **/
+
+    /** User **/
+    interface UserEmail {
+      address: string;
+      verified: boolean;
+    }
+    interface User {
+      _id?: string;
+      username?: string;
+      emails?: UserEmail[];
+      createdAt?: number;
+      profile?: any;
+      services?: any;
+    }
+    function user(): User;
+    function userId(): string;
+    var users: Mongo.Collection<User>;
+    /** User **/
+
+    /** Status **/
+    enum StatusEnum {
+      connected,
+      connecting,
+      failed,
+      waiting,
+      offline
+    }
+    function status(): Meteor.StatusEnum;
+    /** Status **/
+
+    /** Event **/
+    interface Event {
+      type: string;
+      target: HTMLElement;
+      currentTarget: HTMLElement;
+      which: number;
+      stopPropagation(): void;
+      stopImmediatePropagation(): void;
+      preventDefault(): void;
+      isPropagationStopped(): boolean;
+      isImmediatePropagationStopped(): boolean;
+      isDefaultPrevented(): boolean;
+    }
+    interface EventHandlerFunction extends Function {
+      (event?: Meteor.Event, templateInstance?: Blaze.TemplateInstance): void;
+    }
+    interface EventMap {
+      [id: string]: Meteor.EventHandlerFunction;
+    }
+    /** Event **/
+
+    /** Login **/
+    interface LoginWithExternalServiceOptions {
+      requestPermissions?: string[];
+      requestOfflineToken?: Boolean;
+      forceApprovalPrompt?: Boolean;
+      loginUrlParameters?: Object;
+      redirectUrl?: string;
+      loginHint?: string;
+      loginStyle?: string;
+    }
+    function loginWithMeteorDeveloperAccount(options?: Meteor.LoginWithExternalServiceOptions, callback?: Function): void;
+    function loginWithFacebook(options?: Meteor.LoginWithExternalServiceOptions, callback?: Function): void;
+    function loginWithGithub(options?: Meteor.LoginWithExternalServiceOptions, callback?: Function): void;
+    function loginWithGoogle(options?: Meteor.LoginWithExternalServiceOptions, callback?: Function): void;
+    function loginWithMeetup(options?: Meteor.LoginWithExternalServiceOptions, callback?: Function): void;
+    function loginWithTwitter(options?: Meteor.LoginWithExternalServiceOptions, callback?: Function): void;
+    function loginWithWeibo(options?: Meteor.LoginWithExternalServiceOptions, callback?: Function): void;
+    function loggingIn(): boolean;
+    function loginWith<ExternalService>(options?: {
+      requestPermissions?: string[];
+      requestOfflineToken?: boolean;
+      loginUrlParameters?: Object;
+      userEmail?: string;
+      loginStyle?: string;
+      redirectUrl?: string;
+    }, callback?: Function): void;
+    function loginWithPassword(user: Object | string, password: string, callback?: Function): void;
+    function logout(callback?: Function): void;
+    function logoutOtherClients(callback?: Function): void;
+    /** Login **/
+
+    /** Error **/
+    var Error: ErrorStatic;
+    interface ErrorStatic {
+      new (error: string | number, reason?: string, details?: string): Error;
+    }
+    interface Error {
+      error: string | number;
+      reason?: string;
+      details?: string;
+    }
+    /** Error **/
+
+    /** Method **/
+    function methods(methods: Object): void;
+    function call(name: string, ...args: any[]): any;
+    function apply(name: string, args: EJSONable[], options?: {
+      wait?: boolean;
+      onResultReceived?: Function;
+    }, asyncCallback?: Function): any;
+    /** Method **/
+
+    /** Url **/
+    function absoluteUrl(path?: string, options?: {
+      secure?: boolean;
+      replaceLocalhost?: boolean;
+      rootUrl?: string;
+    }): string;
+    /** Url **/
+
+    /** Timeout **/
+    function setInterval(func: Function, delay: number): number;
+    function setTimeout(func: Function, delay: number): number;
+    function clearInterval(id: number): void;
+    function clearTimeout(id: number): void;
+    function defer(func: Function): void;
+    /** Timeout **/
+
+    /** Connection **/
+    interface Connection {
+      id: string;
+      close: Function;
+      onClose: Function;
+      clientAddress: string;
+      httpHeaders: Object;
+    }
+    function onConnection(callback: Function): void;
+    function reconnect(): void;
+    function disconnect(): void;
+    /** Connection **/
+
+    /** Pub/Sub **/
+    interface SubscriptionHandle {
+      stop(): void;
+      ready(): boolean;
+    }
+    interface LiveQueryHandle {
+      stop(): void;
+    }
+    function publish(name: string, func: Function): void;
+    function subscribe(name: string, ...args: any[]): Meteor.SubscriptionHandle;
+    /** Pub/Sub **/
+
+    /** utils **/
+    function startup(func: Function): void;
+    function wrapAsync(func: Function, context?: Object): any;
+    /** utils **/
+  }
+
+  interface Subscription {
+    added(collection: string, id: string, fields: Object): void;
+    changed(collection: string, id: string, fields: Object): void;
+    connection: Meteor.Connection;
+    error(error: Error): void;
+    onStop(func: Function): void;
+    ready(): void;
+    removed(collection: string, id: string): void;
+    stop(): void;
+    userId: string;
+  }
+}
+
+declare module 'meteor/ddp' {
+  import {Meteor} from 'meteor/meteor';
+
+  export module DDP {
+    interface DDPStatic {
+      subscribe(name: string, ...rest: any[]): Meteor.SubscriptionHandle;
+      call(method: string, ...parameters: any[]): void;
+      apply(method: string, ...parameters: any[]): void;
+      methods(IMeteorMethodsDictionary: any): any;
+      status(): DDPStatus;
+      reconnect(): void;
+      disconnect(): void;
+      onReconnect(): void;
+    }
+
+    interface DDPStatus {
+      connected: boolean;
+      status: Meteor.StatusEnum;
+      retryCount: number;
+      retryTime?: number;
+      reason?: string;
+    }
+
+    function connect(url: string): DDPStatic;
+  }
+}
+
+declare module 'meteor/ddp-common' {
+  export module DDPCommon {
+    interface MethodInvocation {
+      new (options: {}): MethodInvocation;
+
+      unblock(): void;
+
+      setUserId(userId: number): void;
+    }
+  }
+}
+
+declare module 'meteor/mongo' {
+  import {Meteor, Subscription} from 'meteor/meteor';
+
+  export module Mongo {
+    interface Selector {
+      [key: string]: any;
+    }
+    interface Selector extends Object { }
+    interface Modifier { }
+    interface SortSpecifier { }
+    interface FieldSpecifier {
+      [id: string]: Number;
+    }
+
+    interface AllowDenyOptions {
+      insert?: (userId: string, doc: any) => boolean;
+      update?: (userId: string, doc: any, fieldNames: string[], modifier: any) => boolean;
+      remove?: (userId: string, doc: any) => boolean;
+      fetch?: string[];
+      transform?: Function;
+    }
+
+    var Collection: CollectionStatic;
+    interface CollectionStatic {
+      new <T>(name: string, options?: {
+        connection?: Object;
+        idGeneration?: string;
+        transform?: Function;
+      }): Collection<T>;
+    }
+    interface Collection<T> {
+      allow(options: {
+        insert?: (userId: string, doc: T) => boolean;
+        update?: (userId: string, doc: T, fieldNames: string[], modifier: any) => boolean;
+        remove?: (userId: string, doc: T) => boolean;
+        fetch?: string[];
+        transform?: Function;
+      }): boolean;
+      deny(options: {
+        insert?: (userId: string, doc: T) => boolean;
+        update?: (userId: string, doc: T, fieldNames: string[], modifier: any) => boolean;
+        remove?: (userId: string, doc: T) => boolean;
+        fetch?: string[];
+        transform?: Function;
+      }): boolean;
+      find(selector?: Selector | ObjectID | string, options?: {
+        sort?: SortSpecifier;
+        skip?: number;
+        limit?: number;
+        fields?: FieldSpecifier;
+        reactive?: boolean;
+        transform?: Function;
+      }): Cursor<T>;
+      findOne(selector?: Selector | ObjectID | string, options?: {
+        sort?: SortSpecifier;
+        skip?: number;
+        fields?: FieldSpecifier;
+        reactive?: boolean;
+        transform?: Function;
+      }): T;
+      insert(doc: T, callback?: Function): string;
+      rawCollection(): any;
+      rawDatabase(): any;
+      remove(selector: Selector | ObjectID | string, callback?: Function): number;
+      update(selector: Selector | ObjectID | string, modifier: Modifier, options?: {
+        multi?: boolean;
+        upsert?: boolean;
+      }, callback?: Function): number;
+      upsert(selector: Selector | ObjectID | string, modifier: Modifier, options?: {
+        multi?: boolean;
+      }, callback?: Function): { numberAffected?: number; insertedId?: string; };
+      _ensureIndex(indexName: string, options?: { [key: string]: any }): void;
+    }
+
+    var Cursor: CursorStatic;
+    interface CursorStatic {
+      new <T>(): Cursor<T>;
+    }
+    interface ObserveCallbacks {
+      added?(document: Object): void;
+      addedAt?(document: Object, atIndex: number, before: Object): void;
+      changed?(newDocument: Object, oldDocument: Object): void;
+      changedAt?(newDocument: Object, oldDocument: Object, indexAt: number): void;
+      removed?(oldDocument: Object): void;
+      removedAt?(oldDocument: Object, atIndex: number): void;
+      movedTo?(document: Object, fromIndex: number, toIndex: number, before: Object): void;
+    }
+    interface ObserveChangesCallbacks {
+      added?(id: string, fields: Object): void;
+      addedBefore?(id: string, fields: Object, before: Object): void;
+      changed?(id: string, fields: Object): void;
+      movedBefore?(id: string, before: Object): void;
+      removed?(id: string): void;
+    }
+    interface Cursor<T> {
+      count(): number;
+      fetch(): Array<T>;
+      forEach(callback: <T>(doc: T, index: number, cursor: Cursor<T>) => void, thisArg?: any): void;
+      map<U>(callback: (doc: T, index: number, cursor: Cursor<T>) => U, thisArg?: any): Array<U>;
+      observe(callbacks: ObserveCallbacks): Meteor.LiveQueryHandle;
+      observeChanges(callbacks: ObserveChangesCallbacks): Meteor.LiveQueryHandle;
+    }
+
+    var ObjectID: ObjectIDStatic;
+    interface ObjectIDStatic {
+      new (hexString?: string): ObjectID;
+    }
+    interface ObjectID {}
+  }
+}
+
+declare module 'meteor/http' {
+  export module HTTP {
+    interface HTTPRequest {
+      content?: string;
+      data?: any;
+      query?: string;
+      params?: { [id: string]: string };
+      auth?: string;
+      headers?: { [id: string]: string };
+      timeout?: number;
+      followRedirects?: boolean;
+    }
+
+    interface HTTPResponse {
+      statusCode?: number;
+      headers?: { [id: string]: string };
+      content?: string;
+      data?: any;
+    }
+
+    function call(method: string, url: string, options?: HTTP.HTTPRequest, asyncCallback?: Function): HTTP.HTTPResponse;
+    function del(url: string, callOptions?: HTTP.HTTPRequest, asyncCallback?: Function): HTTP.HTTPResponse;
+    function get(url: string, callOptions?: HTTP.HTTPRequest, asyncCallback?: Function): HTTP.HTTPResponse;
+    function post(url: string, callOptions?: HTTP.HTTPRequest, asyncCallback?: Function): HTTP.HTTPResponse;
+    function put(url: string, callOptions?: HTTP.HTTPRequest, asyncCallback?: Function): HTTP.HTTPResponse;
+    function call(method: string, url: string, options?: {
+      content?: string;
+      data?: Object;
+      query?: string;
+      params?: Object;
+      auth?: string;
+      headers?: Object;
+      timeout?: number;
+      followRedirects?: boolean;
+      npmRequestOptions?: Object;
+      beforeSend?: Function;
+    }, asyncCallback?: Function): HTTP.HTTPResponse;
+  }
+}
+
+declare module 'meteor/random' {
+  export module Random {
+    function id(numberOfChars?: number): string;
+    function secret(numberOfChars?: number): string;
+    function fraction(): number;
+    function hexString(numberOfDigits: number): string; // @param numberOfDigits, @returns a random hex string of the given length
+    function choice(array: any[]): string; // @param array, @return a random element in array
+    function choice(str: string): string; // @param str, @return a random char in str
+  }
+}
+
+declare module 'meteor/blaze' {
+  import {Meteor} from 'meteor/meteor';
+
+  export module Blaze {
+    var View: ViewStatic;
+
+    interface ViewStatic {
+       new (name ?: string, renderFunction ?: Function): View;
+    }
+
+    interface View {
+      name: string;
+      parentView: View;
+      isCreated: boolean;
+      isRendered: boolean;
+      isDestroyed: boolean;
+      renderCount: number;
+      autorun(runFunc: Function): void;
+      onViewCreated(func: Function): void;
+      onViewReady(func: Function): void;
+      onViewDestroyed(func: Function): void;
+      firstNode(): Node;
+      lastNode(): Node;
+      template: Template;
+      templateInstance(): TemplateInstance;
+    }
+    var currentView: View;
+
+    function isTemplate(value: any): boolean;
+
+    interface HelpersMap {
+      [key: string]: Function;
+    }
+
+    interface EventsMap {
+      [key: string]: Function;
+    }
+
+    var Template: TemplateStatic;
+
+    interface TemplateStatic {
+      new (viewName ?: string, renderFunction ?: Function): Template;
+
+      registerHelper(name: string, func: Function): void;
+      instance(): TemplateInstance;
+      currentData(): any;
+      parentData(numLevels: number): any;
+    }
+
+    interface Template {
+      viewName: string;
+      renderFunction: Function;
+      constructView(): View;
+      head: Template;
+      find(selector: string): Template;
+      findAll(selector: string): Template[];
+      $: any;
+      onCreated(cb: Function): void;
+      onRendered(cb: Function): void;
+      onDestroyed(cb: Function): void;
+      created: Function;
+      rendered: Function;
+      destroyed: Function;
+      helpers(helpersMap: HelpersMap): void;
+      events(eventsMap: EventsMap): void;
+    }
+
+    var TemplateInstance: TemplateInstanceStatic;
+
+    interface TemplateInstanceStatic {
+      new (view: View): TemplateInstance;
+    }
+
+    interface TemplateInstance {
+      $(selector: string): any;
+      autorun(runFunc: Function): Object;
+      data: Object;
+      find(selector?: string): TemplateInstance;
+      findAll(selector: string): TemplateInstance[];
+      firstNode: Object;
+      lastNode: Object;
+      subscribe(name: string, ...args: any[]): Meteor.SubscriptionHandle;
+      subscriptionsReady(): boolean;
+      view: Object;
+    }
+
+    function Each(argFunc: Function, contentFunc: Function, elseFunc?: Function): View;
+    function Unless(conditionFunc: Function, contentFunc: Function, elseFunc?: Function): View;
+    function If(conditionFunc: Function, contentFunc: Function, elseFunc?: Function): View;
+
+    function Let(bindings: Function, contentFunc: Function): View;
+    function With(data: Object | Function, contentFunc: Function): View;
+
+    function getData(elementOrView?: HTMLElement | View): Object;
+    function getView(element?: HTMLElement): View;
+
+    function remove(renderedView: View): void;
+    function render(templateOrView: Template | View, parentNode: Node, nextNode?: Node, parentView?: View): View;
+    function renderWithData(templateOrView: Template | View, data: Object | Function, parentNode: Node, nextNode?: Node, parentView?: View): View;
+    function toHTML(templateOrView: Template | View): string;
+    function toHTMLWithData(templateOrView: Template | View, data: Object | Function): string;
+  }
+}
+
+declare module 'meteor/browser-policy' {
+  export module BrowserPolicy {
+    interface framing {
+      disallow(): void;
+      restrictToOrigin(origin: string): void;
+      allowAll(): void;
+    }
+
+    interface content {
+      allowEval(): void;
+      allowInlineStyles(): void;
+      allowInlineScripts(): void;
+      allowSameOriginForAll(): void;
+      allowDataUrlForAll(): void;
+      allowOriginForAll(origin: string): void;
+      allowImageOrigin(origin: string): void;
+      allowFrameOrigin(origin: string): void;
+      allowContentTypeSniffing(): void;
+      allowAllContentOrigin(): void;
+      allowAllContentDataUrl(): void;
+      allowAllContentSameOrigin(): void;
+
+      disallowAll(): void;
+      disallowInlineStyles(): void;
+      disallowEval(): void;
+      disallowInlineScripts(): void;
+      disallowFont(): void;
+      disallowObject(): void;
+      disallowAllContent(): void;
+    }
+  }
+}
+
+declare module 'meteor/tiny-test' {
+  interface ILengthAble {
+    length: number;
+  }
+
+  interface ITinytestAssertions {
+    ok(doc: Object): void;
+    expect_fail(): void;
+    fail(doc: Object): void;
+    runId(): string;
+    equal<T>(actual: T, expected: T, message?: string, not?: boolean): void;
+    notEqual<T>(actual: T, expected: T, message?: string): void;
+    instanceOf(obj: Object, klass: Function, message?: string): void;
+    notInstanceOf(obj: Object, klass: Function, message?: string): void;
+    matches(actual: any, regexp: RegExp, message?: string): void;
+    notMatches(actual: any, regexp: RegExp, message?: string): void;
+    throws(f: Function, expected?: string | RegExp): void;
+    isTrue(v: boolean, msg?: string): void;
+    isFalse(v: boolean, msg?: string): void;
+    isNull(v: any, msg?: string): void;
+    isNotNull(v: any, msg?: string): void;
+    isUndefined(v: any, msg?: string): void;
+    isNotUndefined(v: any, msg?: string): void;
+    isNan(v: any, msg?: string): void;
+    isNotNan(v: any, msg?: string): void;
+    include<T>(s: Array<T> | Object | string, value: any, msg?: string, not?: boolean): void;
+
+    notInclude<T>(s: Array<T> | Object | string, value: any, msg?: string, not?: boolean): void;
+    length(obj: ILengthAble, expected_length: number, msg?: string): void;
+    _stringEqual(actual: string, expected: string, msg?: string): void;
+  }
+
+  export module Tinytest {
+    function add(description: string, func: (test: ITinytestAssertions) => void): void;
+    function addAsync(description: string, func: (test: ITinytestAssertions) => void): void;
+  }
+}
+
+declare module 'meteor/accounts-base' {
+  import {Meteor} from 'meteor/meteor';
+
+  interface EmailFields {
+    from?: () => string;
+    subject?: (user: Meteor.User) => string;
+    text?: (user: Meteor.User, url: string) => string;
+    html?: (user: Meteor.User, url: string) => string;
+  }
+  interface Header {
+    [id: string]: string;
+  }
+  interface EmailTemplates {
+    from: string;
+    siteName: string;
+    headers?: Header;
+    resetPassword: EmailFields;
+    enrollAccount: EmailFields;
+    verifyEmail: EmailFields;
+  }
+
+  export module Accounts {
+    var emailTemplates: EmailTemplates;
+    function addEmail(userId: string, newEmail: string, verified?: boolean): void;
+    function removeEmail(userId: string, email: string): void;
+    function verifyEmail(token: string, callback?: Function): void;
+
+    function user(): Meteor.User;
+    function userId(): string;
+
+    function createUser(options: {
+      username?: string;
+      email?: string;
+      password?: string;
+      profile?: Object;
+    }, callback?: Function): string;
+    function setUsername(userId: string, newUsername: string): void;
+    function onCreateUser(func: Function): void;
+    function findUserByEmail(email: string): Object;
+    function findUserByUsername(username: string): Object;
+    function validateNewUser(func: Function): boolean;
+
+    function changePassword(oldPassword: string, newPassword: string, callback?: Function): void;
+    function forgotPassword(options: {
+      email?: string;
+    }, callback?: Function): void;
+    function resetPassword(token: string, newPassword: string, callback?: Function): void;
+    function setPassword(userId: string, newPassword: string, options?: {
+      logout?: Object;
+    }): void;
+
+    function onEmailVerificationLink(callback: Function): void;
+    function onEnrollmentLink(callback: Function): void;
+    function onResetPasswordLink(callback: Function): void;
+    function sendEnrollmentEmail(userId: string, email?: string): void;
+    function sendResetPasswordEmail(userId: string, email?: string): void;
+    function sendVerificationEmail(userId: string, email?: string): void;
+
+    var ui: {
+      config(options: {
+        requestPermissions?: Object;
+        requestOfflineToken?: Object;
+        forceApprovalPrompt?: Object;
+        passwordSignupFields?: string;
+      }): void;
+    };
+    function config(options: {
+      sendVerificationEmail?: boolean;
+      forbidClientAccountCreation?: boolean;
+      restrictCreationByEmailDomain?: string | Function;
+      loginExpirationInDays?: number;
+      oauthSecretKey?: string;
+    }): void;
+
+    function onLogin(func: Function): { stop: () => void };
+    function onLoginFailure(func: Function): { stop: () => void };
+    function loggingIn(): boolean;
+    function logout(callback?: Function): void;
+    function logoutOtherClients(callback?: Function): void;
+    function loginServicesConfigured(): boolean;
+    function onPageLoadLogin(func: Function): void;
+    function validateLoginAttempt(func: Function): { stop: () => void };
+    interface IValidateLoginAttemptCbOpts {
+      type: string;
+      allowed: boolean;
+      error: Meteor.Error;
+      user: Meteor.User;
+      connection: Meteor.Connection;
+      methodName: string;
+      methodArguments: any[];
+    }
+  }
+}
+
+declare namespace App {
+  function accessRule(pattern: string, options?: {
+    type?: string;
+    launchExternal?: boolean;
+  }): void;
+  function configurePlugin(id: string, config: Object): void;
+  function icons(icons: Object): void;
+  function info(options: {
+    id?: string;
+    version?: string;
+    name?: string;
+    description?: string;
+    author?: string;
+    email?: string;
+    website?: string;
+  }): void;
+  function launchScreens(launchScreens: Object): void;
+  function setPreference(name: string, value: string, platform?: string): void;
+}
+
+interface EJSONableCustomType {
+  clone(): EJSONableCustomType;
+  equals(other: Object): boolean;
+  toJSONValue(): JSONable;
+  typeName(): string;
+}
+interface EJSONable {
+  [key: string]: number | string | boolean | Object | number[] | string[] | Object[] | Date | Uint8Array | EJSONableCustomType;
+}
+interface JSONable {
+  [key: string]: number | string | boolean | Object | number[] | string[] | Object[];
+}
+interface EJSON extends EJSONable { }
+
+declare module 'meteor/ejson' {
+  export module EJSON {
+    function addType(name: string, factory: (val: JSONable) => EJSONableCustomType): void;
+    function clone<T>(val: T): T;
+    function equals(a: EJSON, b: EJSON, options?: {
+      keyOrderSensitive?: boolean;
+    }): boolean;
+    function fromJSONValue(val: JSONable): any;
+    function isBinary(x: Object): boolean;
+    var newBinary: any;
+    function parse(str: string): EJSON;
+    function stringify(val: EJSON, options?: {
+      indent?: boolean | number | string;
+      canonical?: boolean;
+    }): string;
+    function toJSONValue(val: EJSON): JSONable;
+  }
+}
+
+declare module 'meteor/tracker' {
+  export module Tracker {
+    function Computation(): void;
+    interface Computation {
+      firstRun: boolean;
+      invalidate(): void;
+      invalidated: boolean;
+      onInvalidate(callback: Function): void;
+      onStop(callback: Function): void;
+      stop(): void;
+      stopped: boolean;
+    }
+    var currentComputation: Computation;
+
+    var Dependency: DependencyStatic;
+    interface DependencyStatic {
+      new (): Dependency;
+    }
+    interface Dependency {
+      changed(): void;
+      depend(fromComputation?: Computation): boolean;
+      hasDependents(): boolean;
+    }
+
+    var active: boolean;
+    function afterFlush(callback: Function): void;
+    function autorun(runFunc: (computation: Computation) => void, options?: {
+      onError?: Function;
+    }): Computation;
+    function flush(): void;
+    function nonreactive(func: Function): void;
+    function onInvalidate(callback: Function): void;
+  }
+}
+
+declare module 'meteor/session' {
+  import {EJSON} from 'meteor/ejson';
+
+  export module Session {
+    function equals(key: string, value: string | number | boolean | any): boolean;
+    function get(key: string): any;
+    function set(key: string, value: EJSONable | any): void;
+    function setDefault(key: string, value: EJSONable | any): void;
+  }
+}
+
+declare module 'meteor/email' {
+  export module Email {
+    function send(options: {
+      from?: string;
+      to?: string | string[];
+      cc?: string | string[];
+      bcc?: string | string[];
+      replyTo?: string | string[];
+      subject?: string;
+      text?: string;
+      html?: string;
+      headers?: Object;
+      attachments?: Object[];
+      mailComposer?: MailComposer;
+    }): void;
+
+    interface MailComposerOptions {
+      escapeSMTP: boolean;
+      encoding: string;
+      charset: string;
+      keepBcc: boolean;
+      forceEmbeddedImages: boolean;
+    }
+
+    var MailComposer: MailComposerStatic;
+    interface MailComposerStatic {
+      new (options: MailComposerOptions): MailComposer;
+    }
+    interface MailComposer {
+      addHeader(name: string, value: string): void;
+      setMessageOption(from: string, to: string, body: string, html: string): void;
+      streamMessage(): void;
+      pipe(stream: any /** fs.WriteStream **/): void;
+    }
+  }
+}
+
+declare module 'meteor/reactive-var' {
+  var ReactiveVar: ReactiveVarStatic;
+  interface ReactiveVarStatic {
+    new <T>(initialValue: T, equalsFunc?: Function): ReactiveVar<T>;
+  }
+  interface ReactiveVar<T> {
+    get(): T;
+    set(newValue: T): void;
+  }
+}
+
+declare module 'meteor/templating' {
+  import {Blaze} from 'meteor/blaze';
+  import {Meteor} from 'meteor/meteor';
+
+  var Template: TemplateStatic;
+  interface TemplateStatic extends Blaze.TemplateStatic {
+    new (viewName?: string, renderFunction?: Function): Blaze.Template;
+    body: Blaze.Template;
+    [index: string]: any | Blaze.Template;
+  }
+}
+
diff --git a/typings/browser/definitions/es6-promise/index.d.ts b/typings/browser/definitions/es6-promise/index.d.ts
new file mode 100644
index 0000000..101957d
--- /dev/null
+++ b/typings/browser/definitions/es6-promise/index.d.ts
@@ -0,0 +1,84 @@
+// Generated by typings
+// Source: https://raw.githubusercontent.com/typed-typings/npm-es6-promise/fb04188767acfec1defd054fc8024fafa5cd4de7/dist/es6-promise.d.ts
+declare module '~es6-promise/dist/es6-promise' {
+export interface Thenable <R> {
+  then <U> (onFulfilled?: (value: R) => U | Thenable<U>, onRejected?: (error: any) => U | Thenable<U>): Thenable<U>;
+  then <U> (onFulfilled?: (value: R) => U | Thenable<U>, onRejected?: (error: any) => void): Thenable<U>;
+}
+
+export class Promise <R> implements Thenable <R> {
+  /**
+   * If you call resolve in the body of the callback passed to the constructor,
+   * your promise is fulfilled with result object passed to resolve.
+   * If you call reject your promise is rejected with the object passed to resolve.
+   * For consistency and debugging (eg stack traces), obj should be an instanceof Error.
+   * Any errors thrown in the constructor callback will be implicitly passed to reject().
+   */
+  constructor (callback: (resolve : (value?: R | Thenable<R>) => void, reject: (error?: any) => void) => void);
+
+  /**
+   * onFulfilled is called when/if "promise" resolves. onRejected is called when/if "promise" rejects.
+   * Both are optional, if either/both are omitted the next onFulfilled/onRejected in the chain is called.
+   * Both callbacks have a single parameter , the fulfillment value or rejection reason.
+   * "then" returns a new promise equivalent to the value you return from onFulfilled/onRejected after being passed through Promise.resolve.
+   * If an error is thrown in the callback, the returned promise rejects with that error.
+   *
+   * @param onFulfilled called when/if "promise" resolves
+   * @param onRejected called when/if "promise" rejects
+   */
+  then <U> (onFulfilled?: (value: R) => U | Thenable<U>, onRejected?: (error: any) => U | Thenable<U>): Promise<U>;
+  then <U> (onFulfilled?: (value: R) => U | Thenable<U>, onRejected?: (error: any) => void): Promise<U>;
+
+  /**
+   * Sugar for promise.then(undefined, onRejected)
+   *
+   * @param onRejected called when/if "promise" rejects
+   */
+  catch <U> (onRejected?: (error: any) => U | Thenable<U>): Promise<U>;
+
+  /**
+   * Make a new promise from the thenable.
+   * A thenable is promise-like in as far as it has a "then" method.
+   */
+  static resolve (): Promise<void>;
+  static resolve <R> (value: R | Thenable<R>): Promise<R>;
+
+  /**
+   * Make a promise that rejects to obj. For consistency and debugging (eg stack traces), obj should be an instanceof Error
+   */
+  static reject <R> (error: any): Promise<R>;
+
+  /**
+   * Make a promise that fulfills when every item in the array fulfills, and rejects if (and when) any item rejects.
+   * the array passed to all can be a mixture of promise-like objects and other objects.
+   * The fulfillment value is an array (in order) of fulfillment values. The rejection value is the first rejection value.
+   */
+  static all<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(values: [T1 | Thenable<T1>, T2 | Thenable<T2>, T3 | Thenable<T3>, T4 | Thenable <T4>, T5 | Thenable<T5>, T6 | Thenable<T6>, T7 | Thenable<T7>, T8 | Thenable<T8>, T9 | Thenable<T9>, T10 | Thenable<T10>]): Promise<[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10]>;
+  static all<T1, T2, T3, T4, T5, T6, T7, T8, T9>(values: [T1 | Thenable<T1>, T2 | Thenable<T2>, T3 | Thenable<T3>, T4 | Thenable <T4>, T5 | Thenable<T5>, T6 | Thenable<T6>, T7 | Thenable<T7>, T8 | Thenable<T8>, T9 | Thenable<T9>]): Promise<[T1, T2, T3, T4, T5, T6, T7, T8, T9]>;
+  static all<T1, T2, T3, T4, T5, T6, T7, T8>(values: [T1 | Thenable<T1>, T2 | Thenable<T2>, T3 | Thenable<T3>, T4 | Thenable <T4>, T5 | Thenable<T5>, T6 | Thenable<T6>, T7 | Thenable<T7>, T8 | Thenable<T8>]): Promise<[T1, T2, T3, T4, T5, T6, T7, T8]>;
+  static all<T1, T2, T3, T4, T5, T6, T7>(values: [T1 | Thenable<T1>, T2 | Thenable<T2>, T3 | Thenable<T3>, T4 | Thenable <T4>, T5 | Thenable<T5>, T6 | Thenable<T6>, T7 | Thenable<T7>]): Promise<[T1, T2, T3, T4, T5, T6, T7]>;
+  static all<T1, T2, T3, T4, T5, T6>(values: [T1 | Thenable<T1>, T2 | Thenable<T2>, T3 | Thenable<T3>, T4 | Thenable <T4>, T5 | Thenable<T5>, T6 | Thenable<T6>]): Promise<[T1, T2, T3, T4, T5, T6]>;
+  static all<T1, T2, T3, T4, T5>(values: [T1 | Thenable<T1>, T2 | Thenable<T2>, T3 | Thenable<T3>, T4 | Thenable <T4>, T5 | Thenable<T5>]): Promise<[T1, T2, T3, T4, T5]>;
+  static all<T1, T2, T3, T4>(values: [T1 | Thenable<T1>, T2 | Thenable<T2>, T3 | Thenable<T3>, T4 | Thenable <T4>]): Promise<[T1, T2, T3, T4]>;
+  static all<T1, T2, T3>(values: [T1 | Thenable<T1>, T2 | Thenable<T2>, T3 | Thenable<T3>]): Promise<[T1, T2, T3]>;
+  static all<T1, T2>(values: [T1 | Thenable<T1>, T2 | Thenable<T2>]): Promise<[T1, T2]>;
+  static all<T1>(values: [T1 | Thenable<T1>]): Promise<[T1]>;
+  static all<TAll>(values: Array<TAll | Thenable<TAll>>): Promise<TAll[]>;
+
+  /**
+   * Make a Promise that fulfills when any item fulfills, and rejects if any item rejects.
+   */
+  static race <R> (promises: (R | Thenable<R>)[]): Promise<R>;
+}
+
+/**
+ * The polyfill method will patch the global environment (in this case to the Promise name) when called.
+ */
+export function polyfill (): void;
+}
+declare module 'es6-promise/dist/es6-promise' {
+export * from '~es6-promise/dist/es6-promise';
+}
+declare module 'es6-promise' {
+export * from '~es6-promise/dist/es6-promise';
+}
diff --git a/typings/main.d.ts b/typings/main.d.ts
new file mode 100644
index 0000000..360e5fa
--- /dev/null
+++ b/typings/main.d.ts
@@ -0,0 +1,3 @@
+/// <reference path="main/ambient/es6-shim/index.d.ts" />
+/// <reference path="main/ambient/meteor/index.d.ts" />
+/// <reference path="main/definitions/es6-promise/index.d.ts" />
diff --git a/typings/main/ambient/es6-shim/index.d.ts b/typings/main/ambient/es6-shim/index.d.ts
new file mode 100644
index 0000000..fe86f5e
--- /dev/null
+++ b/typings/main/ambient/es6-shim/index.d.ts
@@ -0,0 +1,670 @@
+// Generated by typings
+// Source: https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/7de6c3dd94feaeb21f20054b9f30d5dabc5efabd/es6-shim/es6-shim.d.ts
+// Type definitions for es6-shim v0.31.2
+// Project: https://github.com/paulmillr/es6-shim
+// Definitions by: Ron Buckton <http://github.com/rbuckton>
+// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
+
+declare type PropertyKey = string | number | symbol;
+
+interface IteratorResult<T> {
+    done: boolean;
+    value?: T;
+}
+
+interface IterableShim<T> {
+    /**
+      * Shim for an ES6 iterable. Not intended for direct use by user code.
+      */
+    "_es6-shim iterator_"(): Iterator<T>;
+}
+
+interface Iterator<T> {
+    next(value?: any): IteratorResult<T>;
+    return?(value?: any): IteratorResult<T>;
+    throw?(e?: any): IteratorResult<T>;
+}
+
+interface IterableIteratorShim<T> extends IterableShim<T>, Iterator<T> {
+    /**
+      * Shim for an ES6 iterable iterator. Not intended for direct use by user code.
+      */
+    "_es6-shim iterator_"(): IterableIteratorShim<T>;
+}
+
+interface StringConstructor {
+    /**
+      * Return the String value whose elements are, in order, the elements in the List elements.
+      * If length is 0, the empty string is returned.
+      */
+    fromCodePoint(...codePoints: number[]): string;
+
+    /**
+      * String.raw is intended for use as a tag function of a Tagged Template String. When called
+      * as such the first argument will be a well formed template call site object and the rest
+      * parameter will contain the substitution values.
+      * @param template A well-formed template string call site representation.
+      * @param substitutions A set of substitution values.
+      */
+    raw(template: TemplateStringsArray, ...substitutions: any[]): string;
+}
+
+interface String {
+    /**
+      * Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point
+      * value of the UTF-16 encoded code point starting at the string element at position pos in
+      * the String resulting from converting this object to a String.
+      * If there is no element at that position, the result is undefined.
+      * If a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.
+      */
+    codePointAt(pos: number): number;
+
+    /**
+      * Returns true if searchString appears as a substring of the result of converting this
+      * object to a String, at one or more positions that are
+      * greater than or equal to position; otherwise, returns false.
+      * @param searchString search string
+      * @param position If position is undefined, 0 is assumed, so as to search all of the String.
+      */
+    includes(searchString: string, position?: number): boolean;
+
+    /**
+      * Returns true if the sequence of elements of searchString converted to a String is the
+      * same as the corresponding elements of this object (converted to a String) starting at
+      * endPosition – length(this). Otherwise returns false.
+      */
+    endsWith(searchString: string, endPosition?: number): boolean;
+
+    /**
+      * Returns a String value that is made from count copies appended together. If count is 0,
+      * T is the empty String is returned.
+      * @param count number of copies to append
+      */
+    repeat(count: number): string;
+
+    /**
+      * Returns true if the sequence of elements of searchString converted to a String is the
+      * same as the corresponding elements of this object (converted to a String) starting at
+      * position. Otherwise returns false.
+      */
+    startsWith(searchString: string, position?: number): boolean;
+
+    /**
+      * Returns an <a> HTML anchor element and sets the name attribute to the text value
+      * @param name
+      */
+    anchor(name: string): string;
+
+    /** Returns a <big> HTML element */
+    big(): string;
+
+    /** Returns a <blink> HTML element */
+    blink(): string;
+
+    /** Returns a <b> HTML element */
+    bold(): string;
+
+    /** Returns a <tt> HTML element */
+    fixed(): string
+
+    /** Returns a <font> HTML element and sets the color attribute value */
+    fontcolor(color: string): string
+
+    /** Returns a <font> HTML element and sets the size attribute value */
+    fontsize(size: number): string;
+
+    /** Returns a <font> HTML element and sets the size attribute value */
+    fontsize(size: string): string;
+
+    /** Returns an <i> HTML element */
+    italics(): string;
+
+    /** Returns an <a> HTML element and sets the href attribute value */
+    link(url: string): string;
+
+    /** Returns a <small> HTML element */
+    small(): string;
+
+    /** Returns a <strike> HTML element */
+    strike(): string;
+
+    /** Returns a <sub> HTML element */
+    sub(): string;
+
+    /** Returns a <sup> HTML element */
+    sup(): string;
+
+    /**
+      * Shim for an ES6 iterable. Not intended for direct use by user code.
+      */
+    "_es6-shim iterator_"(): IterableIteratorShim<string>;
+}
+
+interface ArrayConstructor {
+    /**
+      * Creates an array from an array-like object.
+      * @param arrayLike An array-like object to convert to an array.
+      * @param mapfn A mapping function to call on every element of the array.
+      * @param thisArg Value of 'this' used to invoke the mapfn.
+      */
+    from<T, U>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => U, thisArg?: any): Array<U>;
+
+    /**
+      * Creates an array from an iterable object.
+      * @param iterable An iterable object to convert to an array.
+      * @param mapfn A mapping function to call on every element of the array.
+      * @param thisArg Value of 'this' used to invoke the mapfn.
+      */
+    from<T, U>(iterable: IterableShim<T>, mapfn: (v: T, k: number) => U, thisArg?: any): Array<U>;
+
+    /**
+      * Creates an array from an array-like object.
+      * @param arrayLike An array-like object to convert to an array.
+      */
+    from<T>(arrayLike: ArrayLike<T>): Array<T>;
+
+    /**
+      * Creates an array from an iterable object.
+      * @param iterable An iterable object to convert to an array.
+      */
+    from<T>(iterable: IterableShim<T>): Array<T>;
+
+    /**
+      * Returns a new array from a set of elements.
+      * @param items A set of elements to include in the new array object.
+      */
+    of<T>(...items: T[]): Array<T>;
+}
+
+interface Array<T> {
+    /**
+      * Returns the value of the first element in the array where predicate is true, and undefined
+      * otherwise.
+      * @param predicate find calls predicate once for each element of the array, in ascending
+      * order, until it finds one where predicate returns true. If such an element is found, find
+      * immediately returns that element value. Otherwise, find returns undefined.
+      * @param thisArg If provided, it will be used as the this value for each invocation of
+      * predicate. If it is not provided, undefined is used instead.
+      */
+    find(predicate: (value: T, index: number, obj: Array<T>) => boolean, thisArg?: any): T;
+
+    /**
+      * Returns the index of the first element in the array where predicate is true, and undefined
+      * otherwise.
+      * @param predicate find calls predicate once for each element of the array, in ascending
+      * order, until it finds one where predicate returns true. If such an element is found, find
+      * immediately returns that element value. Otherwise, find returns undefined.
+      * @param thisArg If provided, it will be used as the this value for each invocation of
+      * predicate. If it is not provided, undefined is used instead.
+      */
+    findIndex(predicate: (value: T) => boolean, thisArg?: any): number;
+
+    /**
+      * Returns the this object after filling the section identified by start and end with value
+      * @param value value to fill array section with
+      * @param start index to start filling the array at. If start is negative, it is treated as
+      * length+start where length is the length of the array.
+      * @param end index to stop filling the array at. If end is negative, it is treated as
+      * length+end.
+      */
+    fill(value: T, start?: number, end?: number): T[];
+
+    /**
+      * Returns the this object after copying a section of the array identified by start and end
+      * to the same array starting at position target
+      * @param target If target is negative, it is treated as length+target where length is the
+      * length of the array.
+      * @param start If start is negative, it is treated as length+start. If end is negative, it
+      * is treated as length+end.
+      * @param end If not specified, length of the this object is used as its default value.
+      */
+    copyWithin(target: number, start: number, end?: number): T[];
+
+    /**
+      * Returns an array of key, value pairs for every entry in the array
+      */
+    entries(): IterableIteratorShim<[number, T]>;
+
+    /**
+      * Returns an list of keys in the array
+      */
+    keys(): IterableIteratorShim<number>;
+
+    /**
+      * Returns an list of values in the array
+      */
+    values(): IterableIteratorShim<T>;
+
+    /**
+      * Shim for an ES6 iterable. Not intended for direct use by user code.
+      */
+    "_es6-shim iterator_"(): IterableIteratorShim<T>;
+}
+
+interface NumberConstructor {
+    /**
+      * The value of Number.EPSILON is the difference between 1 and the smallest value greater than 1
+      * that is representable as a Number value, which is approximately:
+      * 2.2204460492503130808472633361816 x 10‍−‍16.
+      */
+    EPSILON: number;
+
+    /**
+      * Returns true if passed value is finite.
+      * Unlike the global isFininte, Number.isFinite doesn't forcibly convert the parameter to a
+      * number. Only finite values of the type number, result in true.
+      * @param number A numeric value.
+      */
+    isFinite(number: number): boolean;
+
+    /**
+      * Returns true if the value passed is an integer, false otherwise.
+      * @param number A numeric value.
+      */
+    isInteger(number: number): boolean;
+
+    /**
+      * Returns a Boolean value that indicates whether a value is the reserved value NaN (not a
+      * number). Unlike the global isNaN(), Number.isNaN() doesn't forcefully convert the parameter
+      * to a number. Only values of the type number, that are also NaN, result in true.
+      * @param number A numeric value.
+      */
+    isNaN(number: number): boolean;
+
+    /**
+      * Returns true if the value passed is a safe integer.
+      * @param number A numeric value.
+      */
+    isSafeInteger(number: number): boolean;
+
+    /**
+      * The value of the largest integer n such that n and n + 1 are both exactly representable as
+      * a Number value.
+      * The value of Number.MIN_SAFE_INTEGER is 9007199254740991 2^53 − 1.
+      */
+    MAX_SAFE_INTEGER: number;
+
+    /**
+      * The value of the smallest integer n such that n and n − 1 are both exactly representable as
+      * a Number value.
+      * The value of Number.MIN_SAFE_INTEGER is −9007199254740991 (−(2^53 − 1)).
+      */
+    MIN_SAFE_INTEGER: number;
+
+    /**
+      * Converts a string to a floating-point number.
+      * @param string A string that contains a floating-point number.
+      */
+    parseFloat(string: string): number;
+
+    /**
+      * Converts A string to an integer.
+      * @param s A string to convert into a number.
+      * @param radix A value between 2 and 36 that specifies the base of the number in numString.
+      * If this argument is not supplied, strings with a prefix of '0x' are considered hexadecimal.
+      * All other strings are considered decimal.
+      */
+    parseInt(string: string, radix?: number): number;
+}
+
+interface ObjectConstructor {
+    /**
+      * Copy the values of all of the enumerable own properties from one or more source objects to a
+      * target object. Returns the target object.
+      * @param target The target object to copy to.
+      * @param sources One or more source objects to copy properties from.
+      */
+    assign(target: any, ...sources: any[]): any;
+
+    /**
+      * Returns true if the values are the same value, false otherwise.
+      * @param value1 The first value.
+      * @param value2 The second value.
+      */
+    is(value1: any, value2: any): boolean;
+
+    /**
+      * Sets the prototype of a specified object o to  object proto or null. Returns the object o.
+      * @param o The object to change its prototype.
+      * @param proto The value of the new prototype or null.
+      * @remarks Requires `__proto__` support.
+      */
+    setPrototypeOf(o: any, proto: any): any;
+}
+
+interface RegExp {
+    /**
+      * Returns a string indicating the flags of the regular expression in question. This field is read-only.
+      * The characters in this string are sequenced and concatenated in the following order:
+      *
+      *    - "g" for global
+      *    - "i" for ignoreCase
+      *    - "m" for multiline
+      *    - "u" for unicode
+      *    - "y" for sticky
+      *
+      * If no flags are set, the value is the empty string.
+      */
+    flags: string;
+}
+
+interface Math {
+    /**
+      * Returns the number of leading zero bits in the 32-bit binary representation of a number.
+      * @param x A numeric expression.
+      */
+    clz32(x: number): number;
+
+    /**
+      * Returns the result of 32-bit multiplication of two numbers.
+      * @param x First number
+      * @param y Second number
+      */
+    imul(x: number, y: number): number;
+
+    /**
+      * Returns the sign of the x, indicating whether x is positive, negative or zero.
+      * @param x The numeric expression to test
+      */
+    sign(x: number): number;
+
+    /**
+      * Returns the base 10 logarithm of a number.
+      * @param x A numeric expression.
+      */
+    log10(x: number): number;
+
+    /**
+      * Returns the base 2 logarithm of a number.
+      * @param x A numeric expression.
+      */
+    log2(x: number): number;
+
+    /**
+      * Returns the natural logarithm of 1 + x.
+      * @param x A numeric expression.
+      */
+    log1p(x: number): number;
+
+    /**
+      * Returns the result of (e^x - 1) of x (e raised to the power of x, where e is the base of
+      * the natural logarithms).
+      * @param x A numeric expression.
+      */
+    expm1(x: number): number;
+
+    /**
+      * Returns the hyperbolic cosine of a number.
+      * @param x A numeric expression that contains an angle measured in radians.
+      */
+    cosh(x: number): number;
+
+    /**
+      * Returns the hyperbolic sine of a number.
+      * @param x A numeric expression that contains an angle measured in radians.
+      */
+    sinh(x: number): number;
+
+    /**
+      * Returns the hyperbolic tangent of a number.
+      * @param x A numeric expression that contains an angle measured in radians.
+      */
+    tanh(x: number): number;
+
+    /**
+      * Returns the inverse hyperbolic cosine of a number.
+      * @param x A numeric expression that contains an angle measured in radians.
+      */
+    acosh(x: number): number;
+
+    /**
+      * Returns the inverse hyperbolic sine of a number.
+      * @param x A numeric expression that contains an angle measured in radians.
+      */
+    asinh(x: number): number;
+
+    /**
+      * Returns the inverse hyperbolic tangent of a number.
+      * @param x A numeric expression that contains an angle measured in radians.
+      */
+    atanh(x: number): number;
+
+    /**
+      * Returns the square root of the sum of squares of its arguments.
+      * @param values Values to compute the square root for.
+      *     If no arguments are passed, the result is +0.
+      *     If there is only one argument, the result is the absolute value.
+      *     If any argument is +Infinity or -Infinity, the result is +Infinity.
+      *     If any argument is NaN, the result is NaN.
+      *     If all arguments are either +0 or −0, the result is +0.
+      */
+    hypot(...values: number[]): number;
+
+    /**
+      * Returns the integral part of the a numeric expression, x, removing any fractional digits.
+      * If x is already an integer, the result is x.
+      * @param x A numeric expression.
+      */
+    trunc(x: number): number;
+
+    /**
+      * Returns the nearest single precision float representation of a number.
+      * @param x A numeric expression.
+      */
+    fround(x: number): number;
+
+    /**
+      * Returns an implementation-dependent approximation to the cube root of number.
+      * @param x A numeric expression.
+      */
+    cbrt(x: number): number;
+}
+
+interface PromiseLike<T> {
+    /**
+    * Attaches callbacks for the resolution and/or rejection of the Promise.
+    * @param onfulfilled The callback to execute when the Promise is resolved.
+    * @param onrejected The callback to execute when the Promise is rejected.
+    * @returns A Promise for the completion of which ever callback is executed.
+    */
+    then<TResult>(onfulfilled?: (value: T) => TResult | PromiseLike<TResult>, onrejected?: (reason: any) => TResult | PromiseLike<TResult>): PromiseLike<TResult>;
+    then<TResult>(onfulfilled?: (value: T) => TResult | PromiseLike<TResult>, onrejected?: (reason: any) => void): PromiseLike<TResult>;
+}
+
+/**
+ * Represents the completion of an asynchronous operation
+ */
+interface Promise<T> {
+    /**
+    * Attaches callbacks for the resolution and/or rejection of the Promise.
+    * @param onfulfilled The callback to execute when the Promise is resolved.
+    * @param onrejected The callback to execute when the Promise is rejected.
+    * @returns A Promise for the completion of which ever callback is executed.
+    */
+    then<TResult>(onfulfilled?: (value: T) => TResult | PromiseLike<TResult>, onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Promise<TResult>;
+    then<TResult>(onfulfilled?: (value: T) => TResult | PromiseLike<TResult>, onrejected?: (reason: any) => void): Promise<TResult>;
+
+    /**
+     * Attaches a callback for only the rejection of the Promise.
+     * @param onrejected The callback to execute when the Promise is rejected.
+     * @returns A Promise for the completion of the callback.
+     */
+    catch(onrejected?: (reason: any) => T | PromiseLike<T>): Promise<T>;
+    catch(onrejected?: (reason: any) => void): Promise<T>;
+}
+
+interface PromiseConstructor {
+    /**
+      * A reference to the prototype.
+      */
+    prototype: Promise<any>;
+
+    /**
+     * Creates a new Promise.
+     * @param executor A callback used to initialize the promise. This callback is passed two arguments:
+     * a resolve callback used resolve the promise with a value or the result of another promise,
+     * and a reject callback used to reject the promise with a provided reason or error.
+     */
+    new <T>(executor: (resolve: (value?: T | PromiseLike<T>) => void, reject: (reason?: any) => void) => void): Promise<T>;
+
+    /**
+     * Creates a Promise that is resolved with an array of results when all of the provided Promises
+     * resolve, or rejected when any Promise is rejected.
+     * @param values An array of Promises.
+     * @returns A new Promise.
+     */
+    all<T>(values: IterableShim<T | PromiseLike<T>>): Promise<T[]>;
+
+    /**
+     * Creates a Promise that is resolved or rejected when any of the provided Promises are resolved
+     * or rejected.
+     * @param values An array of Promises.
+     * @returns A new Promise.
+     */
+    race<T>(values: IterableShim<T | PromiseLike<T>>): Promise<T>;
+
+    /**
+     * Creates a new rejected promise for the provided reason.
+     * @param reason The reason the promise was rejected.
+     * @returns A new rejected Promise.
+     */
+    reject(reason: any): Promise<void>;
+
+    /**
+     * Creates a new rejected promise for the provided reason.
+     * @param reason The reason the promise was rejected.
+     * @returns A new rejected Promise.
+     */
+    reject<T>(reason: any): Promise<T>;
+
+    /**
+      * Creates a new resolved promise for the provided value.
+      * @param value A promise.
+      * @returns A promise whose internal state matches the provided promise.
+      */
+    resolve<T>(value: T | PromiseLike<T>): Promise<T>;
+
+    /**
+     * Creates a new resolved promise .
+     * @returns A resolved promise.
+     */
+    resolve(): Promise<void>;
+}
+
+declare var Promise: PromiseConstructor;
+
+interface Map<K, V> {
+    clear(): void;
+    delete(key: K): boolean;
+    forEach(callbackfn: (value: V, index: K, map: Map<K, V>) => void, thisArg?: any): void;
+    get(key: K): V;
+    has(key: K): boolean;
+    set(key: K, value?: V): Map<K, V>;
+    size: number;
+    entries(): IterableIteratorShim<[K, V]>;
+    keys(): IterableIteratorShim<K>;
+    values(): IterableIteratorShim<V>;
+}
+
+interface MapConstructor {
+    new <K, V>(): Map<K, V>;
+    new <K, V>(iterable: IterableShim<[K, V]>): Map<K, V>;
+    prototype: Map<any, any>;
+}
+
+declare var Map: MapConstructor;
+
+interface Set<T> {
+    add(value: T): Set<T>;
+    clear(): void;
+    delete(value: T): boolean;
+    forEach(callbackfn: (value: T, index: T, set: Set<T>) => void, thisArg?: any): void;
+    has(value: T): boolean;
+    size: number;
+    entries(): IterableIteratorShim<[T, T]>;
+    keys(): IterableIteratorShim<T>;
+    values(): IterableIteratorShim<T>;
+}
+
+interface SetConstructor {
+    new <T>(): Set<T>;
+    new <T>(iterable: IterableShim<T>): Set<T>;
+    prototype: Set<any>;
+}
+
+declare var Set: SetConstructor;
+
+interface WeakMap<K, V> {
+    delete(key: K): boolean;
+    get(key: K): V;
+    has(key: K): boolean;
+    set(key: K, value?: V): WeakMap<K, V>;
+}
+
+interface WeakMapConstructor {
+    new <K, V>(): WeakMap<K, V>;
+    new <K, V>(iterable: IterableShim<[K, V]>): WeakMap<K, V>;
+    prototype: WeakMap<any, any>;
+}
+
+declare var WeakMap: WeakMapConstructor;
+
+interface WeakSet<T> {
+    add(value: T): WeakSet<T>;
+    delete(value: T): boolean;
+    has(value: T): boolean;
+}
+
+interface WeakSetConstructor {
+    new <T>(): WeakSet<T>;
+    new <T>(iterable: IterableShim<T>): WeakSet<T>;
+    prototype: WeakSet<any>;
+}
+
+declare var WeakSet: WeakSetConstructor;
+
+declare namespace Reflect {
+    function apply(target: Function, thisArgument: any, argumentsList: ArrayLike<any>): any;
+    function construct(target: Function, argumentsList: ArrayLike<any>): any;
+    function defineProperty(target: any, propertyKey: PropertyKey, attributes: PropertyDescriptor): boolean;
+    function deleteProperty(target: any, propertyKey: PropertyKey): boolean;
+    function enumerate(target: any): IterableIteratorShim<any>;
+    function get(target: any, propertyKey: PropertyKey, receiver?: any): any;
+    function getOwnPropertyDescriptor(target: any, propertyKey: PropertyKey): PropertyDescriptor;
+    function getPrototypeOf(target: any): any;
+    function has(target: any, propertyKey: PropertyKey): boolean;
+    function isExtensible(target: any): boolean;
+    function ownKeys(target: any): Array<PropertyKey>;
+    function preventExtensions(target: any): boolean;
+    function set(target: any, propertyKey: PropertyKey, value: any, receiver?: any): boolean;
+    function setPrototypeOf(target: any, proto: any): boolean;
+}
+
+declare module "es6-shim" {
+    var String: StringConstructor;
+    var Array: ArrayConstructor;
+    var Number: NumberConstructor;
+    var Math: Math;
+    var Object: ObjectConstructor;
+    var Map: MapConstructor;
+    var Set: SetConstructor;
+    var WeakMap: WeakMapConstructor;
+    var WeakSet: WeakSetConstructor;
+    var Promise: PromiseConstructor;
+    namespace Reflect {
+        function apply(target: Function, thisArgument: any, argumentsList: ArrayLike<any>): any;
+        function construct(target: Function, argumentsList: ArrayLike<any>): any;
+        function defineProperty(target: any, propertyKey: PropertyKey, attributes: PropertyDescriptor): boolean;
+        function deleteProperty(target: any, propertyKey: PropertyKey): boolean;
+        function enumerate(target: any): Iterator<any>;
+        function get(target: any, propertyKey: PropertyKey, receiver?: any): any;
+        function getOwnPropertyDescriptor(target: any, propertyKey: PropertyKey): PropertyDescriptor;
+        function getPrototypeOf(target: any): any;
+        function has(target: any, propertyKey: PropertyKey): boolean;
+        function isExtensible(target: any): boolean;
+        function ownKeys(target: any): Array<PropertyKey>;
+        function preventExtensions(target: any): boolean;
+        function set(target: any, propertyKey: PropertyKey, value: any, receiver?: any): boolean;
+        function setPrototypeOf(target: any, proto: any): boolean;
+    }
+}
\ No newline at end of file
diff --git a/typings/main/ambient/meteor/index.d.ts b/typings/main/ambient/meteor/index.d.ts
new file mode 100644
index 0000000..98bda6f
--- /dev/null
+++ b/typings/main/ambient/meteor/index.d.ts
@@ -0,0 +1,898 @@
+// Generated by typings
+// Source: https://raw.githubusercontent.com/barbatus/meteor-typings/83c6933d0ef07abfd4a2a85b5ec41bc3949f6d28/meteor/1.3/meteor.d.ts
+// Type definitions for Meteor 1.3
+// Project: http://www.meteor.com/
+// Definitions by:
+// Alex Borodach <https://github.com/barbatus>,
+// Dave Allen <https://github.com/fullflavedave>
+
+declare module 'meteor/check' {
+  export module Match {
+    var Any: any;
+    var String: any;
+    var Integer: any;
+    var Boolean: any;
+    var undefined: any;
+    var Object: any;
+    function Optional(pattern: any): boolean;
+    function ObjectIncluding(dico: any): boolean;
+    function OneOf(...patterns: any[]): any;
+    function Where(condition: any): any;
+    function test(value: any, pattern: any): boolean;
+  }
+
+  export function check(value: any, pattern: any): void;
+}
+
+declare module 'meteor/meteor' {
+  import {Mongo} from 'meteor/mongo';
+  import {Blaze} from 'meteor/blaze';
+  import {EJSON} from 'meteor/ejson';
+
+  export module Meteor {
+    /** Global props **/
+    var isClient: boolean;
+    var isCordova: boolean;
+    var isServer: boolean;
+    var release: string;
+    var settings: { [id: string]: any };
+    /** props **/
+
+    /** User **/
+    interface UserEmail {
+      address: string;
+      verified: boolean;
+    }
+    interface User {
+      _id?: string;
+      username?: string;
+      emails?: UserEmail[];
+      createdAt?: number;
+      profile?: any;
+      services?: any;
+    }
+    function user(): User;
+    function userId(): string;
+    var users: Mongo.Collection<User>;
+    /** User **/
+
+    /** Status **/
+    enum StatusEnum {
+      connected,
+      connecting,
+      failed,
+      waiting,
+      offline
+    }
+    function status(): Meteor.StatusEnum;
+    /** Status **/
+
+    /** Event **/
+    interface Event {
+      type: string;
+      target: HTMLElement;
+      currentTarget: HTMLElement;
+      which: number;
+      stopPropagation(): void;
+      stopImmediatePropagation(): void;
+      preventDefault(): void;
+      isPropagationStopped(): boolean;
+      isImmediatePropagationStopped(): boolean;
+      isDefaultPrevented(): boolean;
+    }
+    interface EventHandlerFunction extends Function {
+      (event?: Meteor.Event, templateInstance?: Blaze.TemplateInstance): void;
+    }
+    interface EventMap {
+      [id: string]: Meteor.EventHandlerFunction;
+    }
+    /** Event **/
+
+    /** Login **/
+    interface LoginWithExternalServiceOptions {
+      requestPermissions?: string[];
+      requestOfflineToken?: Boolean;
+      forceApprovalPrompt?: Boolean;
+      loginUrlParameters?: Object;
+      redirectUrl?: string;
+      loginHint?: string;
+      loginStyle?: string;
+    }
+    function loginWithMeteorDeveloperAccount(options?: Meteor.LoginWithExternalServiceOptions, callback?: Function): void;
+    function loginWithFacebook(options?: Meteor.LoginWithExternalServiceOptions, callback?: Function): void;
+    function loginWithGithub(options?: Meteor.LoginWithExternalServiceOptions, callback?: Function): void;
+    function loginWithGoogle(options?: Meteor.LoginWithExternalServiceOptions, callback?: Function): void;
+    function loginWithMeetup(options?: Meteor.LoginWithExternalServiceOptions, callback?: Function): void;
+    function loginWithTwitter(options?: Meteor.LoginWithExternalServiceOptions, callback?: Function): void;
+    function loginWithWeibo(options?: Meteor.LoginWithExternalServiceOptions, callback?: Function): void;
+    function loggingIn(): boolean;
+    function loginWith<ExternalService>(options?: {
+      requestPermissions?: string[];
+      requestOfflineToken?: boolean;
+      loginUrlParameters?: Object;
+      userEmail?: string;
+      loginStyle?: string;
+      redirectUrl?: string;
+    }, callback?: Function): void;
+    function loginWithPassword(user: Object | string, password: string, callback?: Function): void;
+    function logout(callback?: Function): void;
+    function logoutOtherClients(callback?: Function): void;
+    /** Login **/
+
+    /** Error **/
+    var Error: ErrorStatic;
+    interface ErrorStatic {
+      new (error: string | number, reason?: string, details?: string): Error;
+    }
+    interface Error {
+      error: string | number;
+      reason?: string;
+      details?: string;
+    }
+    /** Error **/
+
+    /** Method **/
+    function methods(methods: Object): void;
+    function call(name: string, ...args: any[]): any;
+    function apply(name: string, args: EJSONable[], options?: {
+      wait?: boolean;
+      onResultReceived?: Function;
+    }, asyncCallback?: Function): any;
+    /** Method **/
+
+    /** Url **/
+    function absoluteUrl(path?: string, options?: {
+      secure?: boolean;
+      replaceLocalhost?: boolean;
+      rootUrl?: string;
+    }): string;
+    /** Url **/
+
+    /** Timeout **/
+    function setInterval(func: Function, delay: number): number;
+    function setTimeout(func: Function, delay: number): number;
+    function clearInterval(id: number): void;
+    function clearTimeout(id: number): void;
+    function defer(func: Function): void;
+    /** Timeout **/
+
+    /** Connection **/
+    interface Connection {
+      id: string;
+      close: Function;
+      onClose: Function;
+      clientAddress: string;
+      httpHeaders: Object;
+    }
+    function onConnection(callback: Function): void;
+    function reconnect(): void;
+    function disconnect(): void;
+    /** Connection **/
+
+    /** Pub/Sub **/
+    interface SubscriptionHandle {
+      stop(): void;
+      ready(): boolean;
+    }
+    interface LiveQueryHandle {
+      stop(): void;
+    }
+    function publish(name: string, func: Function): void;
+    function subscribe(name: string, ...args: any[]): Meteor.SubscriptionHandle;
+    /** Pub/Sub **/
+
+    /** utils **/
+    function startup(func: Function): void;
+    function wrapAsync(func: Function, context?: Object): any;
+    /** utils **/
+  }
+
+  interface Subscription {
+    added(collection: string, id: string, fields: Object): void;
+    changed(collection: string, id: string, fields: Object): void;
+    connection: Meteor.Connection;
+    error(error: Error): void;
+    onStop(func: Function): void;
+    ready(): void;
+    removed(collection: string, id: string): void;
+    stop(): void;
+    userId: string;
+  }
+}
+
+declare module 'meteor/ddp' {
+  import {Meteor} from 'meteor/meteor';
+
+  export module DDP {
+    interface DDPStatic {
+      subscribe(name: string, ...rest: any[]): Meteor.SubscriptionHandle;
+      call(method: string, ...parameters: any[]): void;
+      apply(method: string, ...parameters: any[]): void;
+      methods(IMeteorMethodsDictionary: any): any;
+      status(): DDPStatus;
+      reconnect(): void;
+      disconnect(): void;
+      onReconnect(): void;
+    }
+
+    interface DDPStatus {
+      connected: boolean;
+      status: Meteor.StatusEnum;
+      retryCount: number;
+      retryTime?: number;
+      reason?: string;
+    }
+
+    function connect(url: string): DDPStatic;
+  }
+}
+
+declare module 'meteor/ddp-common' {
+  export module DDPCommon {
+    interface MethodInvocation {
+      new (options: {}): MethodInvocation;
+
+      unblock(): void;
+
+      setUserId(userId: number): void;
+    }
+  }
+}
+
+declare module 'meteor/mongo' {
+  import {Meteor, Subscription} from 'meteor/meteor';
+
+  export module Mongo {
+    interface Selector {
+      [key: string]: any;
+    }
+    interface Selector extends Object { }
+    interface Modifier { }
+    interface SortSpecifier { }
+    interface FieldSpecifier {
+      [id: string]: Number;
+    }
+
+    interface AllowDenyOptions {
+      insert?: (userId: string, doc: any) => boolean;
+      update?: (userId: string, doc: any, fieldNames: string[], modifier: any) => boolean;
+      remove?: (userId: string, doc: any) => boolean;
+      fetch?: string[];
+      transform?: Function;
+    }
+
+    var Collection: CollectionStatic;
+    interface CollectionStatic {
+      new <T>(name: string, options?: {
+        connection?: Object;
+        idGeneration?: string;
+        transform?: Function;
+      }): Collection<T>;
+    }
+    interface Collection<T> {
+      allow(options: {
+        insert?: (userId: string, doc: T) => boolean;
+        update?: (userId: string, doc: T, fieldNames: string[], modifier: any) => boolean;
+        remove?: (userId: string, doc: T) => boolean;
+        fetch?: string[];
+        transform?: Function;
+      }): boolean;
+      deny(options: {
+        insert?: (userId: string, doc: T) => boolean;
+        update?: (userId: string, doc: T, fieldNames: string[], modifier: any) => boolean;
+        remove?: (userId: string, doc: T) => boolean;
+        fetch?: string[];
+        transform?: Function;
+      }): boolean;
+      find(selector?: Selector | ObjectID | string, options?: {
+        sort?: SortSpecifier;
+        skip?: number;
+        limit?: number;
+        fields?: FieldSpecifier;
+        reactive?: boolean;
+        transform?: Function;
+      }): Cursor<T>;
+      findOne(selector?: Selector | ObjectID | string, options?: {
+        sort?: SortSpecifier;
+        skip?: number;
+        fields?: FieldSpecifier;
+        reactive?: boolean;
+        transform?: Function;
+      }): T;
+      insert(doc: T, callback?: Function): string;
+      rawCollection(): any;
+      rawDatabase(): any;
+      remove(selector: Selector | ObjectID | string, callback?: Function): number;
+      update(selector: Selector | ObjectID | string, modifier: Modifier, options?: {
+        multi?: boolean;
+        upsert?: boolean;
+      }, callback?: Function): number;
+      upsert(selector: Selector | ObjectID | string, modifier: Modifier, options?: {
+        multi?: boolean;
+      }, callback?: Function): { numberAffected?: number; insertedId?: string; };
+      _ensureIndex(indexName: string, options?: { [key: string]: any }): void;
+    }
+
+    var Cursor: CursorStatic;
+    interface CursorStatic {
+      new <T>(): Cursor<T>;
+    }
+    interface ObserveCallbacks {
+      added?(document: Object): void;
+      addedAt?(document: Object, atIndex: number, before: Object): void;
+      changed?(newDocument: Object, oldDocument: Object): void;
+      changedAt?(newDocument: Object, oldDocument: Object, indexAt: number): void;
+      removed?(oldDocument: Object): void;
+      removedAt?(oldDocument: Object, atIndex: number): void;
+      movedTo?(document: Object, fromIndex: number, toIndex: number, before: Object): void;
+    }
+    interface ObserveChangesCallbacks {
+      added?(id: string, fields: Object): void;
+      addedBefore?(id: string, fields: Object, before: Object): void;
+      changed?(id: string, fields: Object): void;
+      movedBefore?(id: string, before: Object): void;
+      removed?(id: string): void;
+    }
+    interface Cursor<T> {
+      count(): number;
+      fetch(): Array<T>;
+      forEach(callback: <T>(doc: T, index: number, cursor: Cursor<T>) => void, thisArg?: any): void;
+      map<U>(callback: (doc: T, index: number, cursor: Cursor<T>) => U, thisArg?: any): Array<U>;
+      observe(callbacks: ObserveCallbacks): Meteor.LiveQueryHandle;
+      observeChanges(callbacks: ObserveChangesCallbacks): Meteor.LiveQueryHandle;
+    }
+
+    var ObjectID: ObjectIDStatic;
+    interface ObjectIDStatic {
+      new (hexString?: string): ObjectID;
+    }
+    interface ObjectID {}
+  }
+}
+
+declare module 'meteor/http' {
+  export module HTTP {
+    interface HTTPRequest {
+      content?: string;
+      data?: any;
+      query?: string;
+      params?: { [id: string]: string };
+      auth?: string;
+      headers?: { [id: string]: string };
+      timeout?: number;
+      followRedirects?: boolean;
+    }
+
+    interface HTTPResponse {
+      statusCode?: number;
+      headers?: { [id: string]: string };
+      content?: string;
+      data?: any;
+    }
+
+    function call(method: string, url: string, options?: HTTP.HTTPRequest, asyncCallback?: Function): HTTP.HTTPResponse;
+    function del(url: string, callOptions?: HTTP.HTTPRequest, asyncCallback?: Function): HTTP.HTTPResponse;
+    function get(url: string, callOptions?: HTTP.HTTPRequest, asyncCallback?: Function): HTTP.HTTPResponse;
+    function post(url: string, callOptions?: HTTP.HTTPRequest, asyncCallback?: Function): HTTP.HTTPResponse;
+    function put(url: string, callOptions?: HTTP.HTTPRequest, asyncCallback?: Function): HTTP.HTTPResponse;
+    function call(method: string, url: string, options?: {
+      content?: string;
+      data?: Object;
+      query?: string;
+      params?: Object;
+      auth?: string;
+      headers?: Object;
+      timeout?: number;
+      followRedirects?: boolean;
+      npmRequestOptions?: Object;
+      beforeSend?: Function;
+    }, asyncCallback?: Function): HTTP.HTTPResponse;
+  }
+}
+
+declare module 'meteor/random' {
+  export module Random {
+    function id(numberOfChars?: number): string;
+    function secret(numberOfChars?: number): string;
+    function fraction(): number;
+    function hexString(numberOfDigits: number): string; // @param numberOfDigits, @returns a random hex string of the given length
+    function choice(array: any[]): string; // @param array, @return a random element in array
+    function choice(str: string): string; // @param str, @return a random char in str
+  }
+}
+
+declare module 'meteor/blaze' {
+  import {Meteor} from 'meteor/meteor';
+
+  export module Blaze {
+    var View: ViewStatic;
+
+    interface ViewStatic {
+       new (name ?: string, renderFunction ?: Function): View;
+    }
+
+    interface View {
+      name: string;
+      parentView: View;
+      isCreated: boolean;
+      isRendered: boolean;
+      isDestroyed: boolean;
+      renderCount: number;
+      autorun(runFunc: Function): void;
+      onViewCreated(func: Function): void;
+      onViewReady(func: Function): void;
+      onViewDestroyed(func: Function): void;
+      firstNode(): Node;
+      lastNode(): Node;
+      template: Template;
+      templateInstance(): TemplateInstance;
+    }
+    var currentView: View;
+
+    function isTemplate(value: any): boolean;
+
+    interface HelpersMap {
+      [key: string]: Function;
+    }
+
+    interface EventsMap {
+      [key: string]: Function;
+    }
+
+    var Template: TemplateStatic;
+
+    interface TemplateStatic {
+      new (viewName ?: string, renderFunction ?: Function): Template;
+
+      registerHelper(name: string, func: Function): void;
+      instance(): TemplateInstance;
+      currentData(): any;
+      parentData(numLevels: number): any;
+    }
+
+    interface Template {
+      viewName: string;
+      renderFunction: Function;
+      constructView(): View;
+      head: Template;
+      find(selector: string): Template;
+      findAll(selector: string): Template[];
+      $: any;
+      onCreated(cb: Function): void;
+      onRendered(cb: Function): void;
+      onDestroyed(cb: Function): void;
+      created: Function;
+      rendered: Function;
+      destroyed: Function;
+      helpers(helpersMap: HelpersMap): void;
+      events(eventsMap: EventsMap): void;
+    }
+
+    var TemplateInstance: TemplateInstanceStatic;
+
+    interface TemplateInstanceStatic {
+      new (view: View): TemplateInstance;
+    }
+
+    interface TemplateInstance {
+      $(selector: string): any;
+      autorun(runFunc: Function): Object;
+      data: Object;
+      find(selector?: string): TemplateInstance;
+      findAll(selector: string): TemplateInstance[];
+      firstNode: Object;
+      lastNode: Object;
+      subscribe(name: string, ...args: any[]): Meteor.SubscriptionHandle;
+      subscriptionsReady(): boolean;
+      view: Object;
+    }
+
+    function Each(argFunc: Function, contentFunc: Function, elseFunc?: Function): View;
+    function Unless(conditionFunc: Function, contentFunc: Function, elseFunc?: Function): View;
+    function If(conditionFunc: Function, contentFunc: Function, elseFunc?: Function): View;
+
+    function Let(bindings: Function, contentFunc: Function): View;
+    function With(data: Object | Function, contentFunc: Function): View;
+
+    function getData(elementOrView?: HTMLElement | View): Object;
+    function getView(element?: HTMLElement): View;
+
+    function remove(renderedView: View): void;
+    function render(templateOrView: Template | View, parentNode: Node, nextNode?: Node, parentView?: View): View;
+    function renderWithData(templateOrView: Template | View, data: Object | Function, parentNode: Node, nextNode?: Node, parentView?: View): View;
+    function toHTML(templateOrView: Template | View): string;
+    function toHTMLWithData(templateOrView: Template | View, data: Object | Function): string;
+  }
+}
+
+declare module 'meteor/browser-policy' {
+  export module BrowserPolicy {
+    interface framing {
+      disallow(): void;
+      restrictToOrigin(origin: string): void;
+      allowAll(): void;
+    }
+
+    interface content {
+      allowEval(): void;
+      allowInlineStyles(): void;
+      allowInlineScripts(): void;
+      allowSameOriginForAll(): void;
+      allowDataUrlForAll(): void;
+      allowOriginForAll(origin: string): void;
+      allowImageOrigin(origin: string): void;
+      allowFrameOrigin(origin: string): void;
+      allowContentTypeSniffing(): void;
+      allowAllContentOrigin(): void;
+      allowAllContentDataUrl(): void;
+      allowAllContentSameOrigin(): void;
+
+      disallowAll(): void;
+      disallowInlineStyles(): void;
+      disallowEval(): void;
+      disallowInlineScripts(): void;
+      disallowFont(): void;
+      disallowObject(): void;
+      disallowAllContent(): void;
+    }
+  }
+}
+
+declare module 'meteor/tiny-test' {
+  interface ILengthAble {
+    length: number;
+  }
+
+  interface ITinytestAssertions {
+    ok(doc: Object): void;
+    expect_fail(): void;
+    fail(doc: Object): void;
+    runId(): string;
+    equal<T>(actual: T, expected: T, message?: string, not?: boolean): void;
+    notEqual<T>(actual: T, expected: T, message?: string): void;
+    instanceOf(obj: Object, klass: Function, message?: string): void;
+    notInstanceOf(obj: Object, klass: Function, message?: string): void;
+    matches(actual: any, regexp: RegExp, message?: string): void;
+    notMatches(actual: any, regexp: RegExp, message?: string): void;
+    throws(f: Function, expected?: string | RegExp): void;
+    isTrue(v: boolean, msg?: string): void;
+    isFalse(v: boolean, msg?: string): void;
+    isNull(v: any, msg?: string): void;
+    isNotNull(v: any, msg?: string): void;
+    isUndefined(v: any, msg?: string): void;
+    isNotUndefined(v: any, msg?: string): void;
+    isNan(v: any, msg?: string): void;
+    isNotNan(v: any, msg?: string): void;
+    include<T>(s: Array<T> | Object | string, value: any, msg?: string, not?: boolean): void;
+
+    notInclude<T>(s: Array<T> | Object | string, value: any, msg?: string, not?: boolean): void;
+    length(obj: ILengthAble, expected_length: number, msg?: string): void;
+    _stringEqual(actual: string, expected: string, msg?: string): void;
+  }
+
+  export module Tinytest {
+    function add(description: string, func: (test: ITinytestAssertions) => void): void;
+    function addAsync(description: string, func: (test: ITinytestAssertions) => void): void;
+  }
+}
+
+declare module 'meteor/accounts-base' {
+  import {Meteor} from 'meteor/meteor';
+
+  interface EmailFields {
+    from?: () => string;
+    subject?: (user: Meteor.User) => string;
+    text?: (user: Meteor.User, url: string) => string;
+    html?: (user: Meteor.User, url: string) => string;
+  }
+  interface Header {
+    [id: string]: string;
+  }
+  interface EmailTemplates {
+    from: string;
+    siteName: string;
+    headers?: Header;
+    resetPassword: EmailFields;
+    enrollAccount: EmailFields;
+    verifyEmail: EmailFields;
+  }
+
+  export module Accounts {
+    var emailTemplates: EmailTemplates;
+    function addEmail(userId: string, newEmail: string, verified?: boolean): void;
+    function removeEmail(userId: string, email: string): void;
+    function verifyEmail(token: string, callback?: Function): void;
+
+    function user(): Meteor.User;
+    function userId(): string;
+
+    function createUser(options: {
+      username?: string;
+      email?: string;
+      password?: string;
+      profile?: Object;
+    }, callback?: Function): string;
+    function setUsername(userId: string, newUsername: string): void;
+    function onCreateUser(func: Function): void;
+    function findUserByEmail(email: string): Object;
+    function findUserByUsername(username: string): Object;
+    function validateNewUser(func: Function): boolean;
+
+    function changePassword(oldPassword: string, newPassword: string, callback?: Function): void;
+    function forgotPassword(options: {
+      email?: string;
+    }, callback?: Function): void;
+    function resetPassword(token: string, newPassword: string, callback?: Function): void;
+    function setPassword(userId: string, newPassword: string, options?: {
+      logout?: Object;
+    }): void;
+
+    function onEmailVerificationLink(callback: Function): void;
+    function onEnrollmentLink(callback: Function): void;
+    function onResetPasswordLink(callback: Function): void;
+    function sendEnrollmentEmail(userId: string, email?: string): void;
+    function sendResetPasswordEmail(userId: string, email?: string): void;
+    function sendVerificationEmail(userId: string, email?: string): void;
+
+    var ui: {
+      config(options: {
+        requestPermissions?: Object;
+        requestOfflineToken?: Object;
+        forceApprovalPrompt?: Object;
+        passwordSignupFields?: string;
+      }): void;
+    };
+    function config(options: {
+      sendVerificationEmail?: boolean;
+      forbidClientAccountCreation?: boolean;
+      restrictCreationByEmailDomain?: string | Function;
+      loginExpirationInDays?: number;
+      oauthSecretKey?: string;
+    }): void;
+
+    function onLogin(func: Function): { stop: () => void };
+    function onLoginFailure(func: Function): { stop: () => void };
+    function loggingIn(): boolean;
+    function logout(callback?: Function): void;
+    function logoutOtherClients(callback?: Function): void;
+    function loginServicesConfigured(): boolean;
+    function onPageLoadLogin(func: Function): void;
+    function validateLoginAttempt(func: Function): { stop: () => void };
+    interface IValidateLoginAttemptCbOpts {
+      type: string;
+      allowed: boolean;
+      error: Meteor.Error;
+      user: Meteor.User;
+      connection: Meteor.Connection;
+      methodName: string;
+      methodArguments: any[];
+    }
+  }
+}
+
+declare namespace App {
+  function accessRule(pattern: string, options?: {
+    type?: string;
+    launchExternal?: boolean;
+  }): void;
+  function configurePlugin(id: string, config: Object): void;
+  function icons(icons: Object): void;
+  function info(options: {
+    id?: string;
+    version?: string;
+    name?: string;
+    description?: string;
+    author?: string;
+    email?: string;
+    website?: string;
+  }): void;
+  function launchScreens(launchScreens: Object): void;
+  function setPreference(name: string, value: string, platform?: string): void;
+}
+
+interface EJSONableCustomType {
+  clone(): EJSONableCustomType;
+  equals(other: Object): boolean;
+  toJSONValue(): JSONable;
+  typeName(): string;
+}
+interface EJSONable {
+  [key: string]: number | string | boolean | Object | number[] | string[] | Object[] | Date | Uint8Array | EJSONableCustomType;
+}
+interface JSONable {
+  [key: string]: number | string | boolean | Object | number[] | string[] | Object[];
+}
+interface EJSON extends EJSONable { }
+
+declare module 'meteor/ejson' {
+  export module EJSON {
+    function addType(name: string, factory: (val: JSONable) => EJSONableCustomType): void;
+    function clone<T>(val: T): T;
+    function equals(a: EJSON, b: EJSON, options?: {
+      keyOrderSensitive?: boolean;
+    }): boolean;
+    function fromJSONValue(val: JSONable): any;
+    function isBinary(x: Object): boolean;
+    var newBinary: any;
+    function parse(str: string): EJSON;
+    function stringify(val: EJSON, options?: {
+      indent?: boolean | number | string;
+      canonical?: boolean;
+    }): string;
+    function toJSONValue(val: EJSON): JSONable;
+  }
+}
+
+declare module 'meteor/tracker' {
+  export module Tracker {
+    function Computation(): void;
+    interface Computation {
+      firstRun: boolean;
+      invalidate(): void;
+      invalidated: boolean;
+      onInvalidate(callback: Function): void;
+      onStop(callback: Function): void;
+      stop(): void;
+      stopped: boolean;
+    }
+    var currentComputation: Computation;
+
+    var Dependency: DependencyStatic;
+    interface DependencyStatic {
+      new (): Dependency;
+    }
+    interface Dependency {
+      changed(): void;
+      depend(fromComputation?: Computation): boolean;
+      hasDependents(): boolean;
+    }
+
+    var active: boolean;
+    function afterFlush(callback: Function): void;
+    function autorun(runFunc: (computation: Computation) => void, options?: {
+      onError?: Function;
+    }): Computation;
+    function flush(): void;
+    function nonreactive(func: Function): void;
+    function onInvalidate(callback: Function): void;
+  }
+}
+
+declare module 'meteor/session' {
+  import {EJSON} from 'meteor/ejson';
+
+  export module Session {
+    function equals(key: string, value: string | number | boolean | any): boolean;
+    function get(key: string): any;
+    function set(key: string, value: EJSONable | any): void;
+    function setDefault(key: string, value: EJSONable | any): void;
+  }
+}
+
+declare module 'meteor/email' {
+  export module Email {
+    function send(options: {
+      from?: string;
+      to?: string | string[];
+      cc?: string | string[];
+      bcc?: string | string[];
+      replyTo?: string | string[];
+      subject?: string;
+      text?: string;
+      html?: string;
+      headers?: Object;
+      attachments?: Object[];
+      mailComposer?: MailComposer;
+    }): void;
+
+    interface MailComposerOptions {
+      escapeSMTP: boolean;
+      encoding: string;
+      charset: string;
+      keepBcc: boolean;
+      forceEmbeddedImages: boolean;
+    }
+
+    var MailComposer: MailComposerStatic;
+    interface MailComposerStatic {
+      new (options: MailComposerOptions): MailComposer;
+    }
+    interface MailComposer {
+      addHeader(name: string, value: string): void;
+      setMessageOption(from: string, to: string, body: string, html: string): void;
+      streamMessage(): void;
+      pipe(stream: any /** fs.WriteStream **/): void;
+    }
+  }
+}
+
+declare module 'meteor/reactive-var' {
+  var ReactiveVar: ReactiveVarStatic;
+  interface ReactiveVarStatic {
+    new <T>(initialValue: T, equalsFunc?: Function): ReactiveVar<T>;
+  }
+  interface ReactiveVar<T> {
+    get(): T;
+    set(newValue: T): void;
+  }
+}
+
+declare module 'meteor/templating' {
+  import {Blaze} from 'meteor/blaze';
+  import {Meteor} from 'meteor/meteor';
+
+  var Template: TemplateStatic;
+  interface TemplateStatic extends Blaze.TemplateStatic {
+    new (viewName?: string, renderFunction?: Function): Blaze.Template;
+    body: Blaze.Template;
+    [index: string]: any | Blaze.Template;
+  }
+}
+// Generated by typings
+// Source: https://raw.githubusercontent.com/barbatus/meteor-typings/83c6933d0ef07abfd4a2a85b5ec41bc3949f6d28/meteor/1.3/meteor_server.d.ts
+declare function execFileAsync(command: string, args?: any[], options?: {
+  cwd?: Object;
+  env?: Object;
+  stdio?: any[] | string;
+  destination?: any;
+  waitForClose?: string;
+}): any;
+declare function execFileSync(command: string, args?: any[], options?: {
+  cwd?: Object;
+  env?: Object;
+  stdio?: any[] | string;
+  destination?: any;
+  waitForClose?: string;
+}): String;
+
+declare module Assets {
+  function getBinary(assetPath: string, asyncCallback?: Function): EJSON;
+  function getText(assetPath: string, asyncCallback?: Function): string;
+}
+
+declare module Cordova {
+  function depends(dependencies: { [id: string]: string }): void;
+}
+
+declare module Npm {
+  function depends(dependencies: { [id: string]: string }): void;
+  function require(name: string): any;
+}
+
+declare namespace Package {
+  function describe(options: {
+    summary?: string;
+    version?: string;
+    name?: string;
+    git?: string;
+    documentation?: string;
+    debugOnly?: boolean;
+    prodOnly?: boolean;
+    testOnly?: boolean;
+  }): void;
+  function onTest(func: (api: PackageAPI) => void): void;
+  function onUse(func: (api: PackageAPI) => void): void;
+  function registerBuildPlugin(options?: {
+    name?: string;
+    use?: string | string[];
+    sources?: string[];
+    npmDependencies?: Object;
+  }): void;
+}
+
+interface PackageAPI {
+  new (): PackageAPI;
+  addAssets(filenames: string | string[], architecture: string | string[]): void;
+  addFiles(filenames: string | string[], architecture?: string | string[], options?: {
+    bare?: boolean;
+  }): void;
+  export(exportedObjects: string | string[], architecture?: string | string[], exportOptions?: Object, testOnly?: boolean): void;
+  imply(packageNames: string | string[], architecture?: string | string[]): void;
+  use(packageNames: string | string[], architecture?: string | string[], options?: {
+    weak?: boolean;
+    unordered?: boolean;
+  }): void;
+  versionsFrom(meteorRelease: string | string[]): void;
+}
+
+declare var console: Console;
diff --git a/typings/main/definitions/es6-promise/index.d.ts b/typings/main/definitions/es6-promise/index.d.ts
new file mode 100644
index 0000000..101957d
--- /dev/null
+++ b/typings/main/definitions/es6-promise/index.d.ts
@@ -0,0 +1,84 @@
+// Generated by typings
+// Source: https://raw.githubusercontent.com/typed-typings/npm-es6-promise/fb04188767acfec1defd054fc8024fafa5cd4de7/dist/es6-promise.d.ts
+declare module '~es6-promise/dist/es6-promise' {
+export interface Thenable <R> {
+  then <U> (onFulfilled?: (value: R) => U | Thenable<U>, onRejected?: (error: any) => U | Thenable<U>): Thenable<U>;
+  then <U> (onFulfilled?: (value: R) => U | Thenable<U>, onRejected?: (error: any) => void): Thenable<U>;
+}
+
+export class Promise <R> implements Thenable <R> {
+  /**
+   * If you call resolve in the body of the callback passed to the constructor,
+   * your promise is fulfilled with result object passed to resolve.
+   * If you call reject your promise is rejected with the object passed to resolve.
+   * For consistency and debugging (eg stack traces), obj should be an instanceof Error.
+   * Any errors thrown in the constructor callback will be implicitly passed to reject().
+   */
+  constructor (callback: (resolve : (value?: R | Thenable<R>) => void, reject: (error?: any) => void) => void);
+
+  /**
+   * onFulfilled is called when/if "promise" resolves. onRejected is called when/if "promise" rejects.
+   * Both are optional, if either/both are omitted the next onFulfilled/onRejected in the chain is called.
+   * Both callbacks have a single parameter , the fulfillment value or rejection reason.
+   * "then" returns a new promise equivalent to the value you return from onFulfilled/onRejected after being passed through Promise.resolve.
+   * If an error is thrown in the callback, the returned promise rejects with that error.
+   *
+   * @param onFulfilled called when/if "promise" resolves
+   * @param onRejected called when/if "promise" rejects
+   */
+  then <U> (onFulfilled?: (value: R) => U | Thenable<U>, onRejected?: (error: any) => U | Thenable<U>): Promise<U>;
+  then <U> (onFulfilled?: (value: R) => U | Thenable<U>, onRejected?: (error: any) => void): Promise<U>;
+
+  /**
+   * Sugar for promise.then(undefined, onRejected)
+   *
+   * @param onRejected called when/if "promise" rejects
+   */
+  catch <U> (onRejected?: (error: any) => U | Thenable<U>): Promise<U>;
+
+  /**
+   * Make a new promise from the thenable.
+   * A thenable is promise-like in as far as it has a "then" method.
+   */
+  static resolve (): Promise<void>;
+  static resolve <R> (value: R | Thenable<R>): Promise<R>;
+
+  /**
+   * Make a promise that rejects to obj. For consistency and debugging (eg stack traces), obj should be an instanceof Error
+   */
+  static reject <R> (error: any): Promise<R>;
+
+  /**
+   * Make a promise that fulfills when every item in the array fulfills, and rejects if (and when) any item rejects.
+   * the array passed to all can be a mixture of promise-like objects and other objects.
+   * The fulfillment value is an array (in order) of fulfillment values. The rejection value is the first rejection value.
+   */
+  static all<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(values: [T1 | Thenable<T1>, T2 | Thenable<T2>, T3 | Thenable<T3>, T4 | Thenable <T4>, T5 | Thenable<T5>, T6 | Thenable<T6>, T7 | Thenable<T7>, T8 | Thenable<T8>, T9 | Thenable<T9>, T10 | Thenable<T10>]): Promise<[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10]>;
+  static all<T1, T2, T3, T4, T5, T6, T7, T8, T9>(values: [T1 | Thenable<T1>, T2 | Thenable<T2>, T3 | Thenable<T3>, T4 | Thenable <T4>, T5 | Thenable<T5>, T6 | Thenable<T6>, T7 | Thenable<T7>, T8 | Thenable<T8>, T9 | Thenable<T9>]): Promise<[T1, T2, T3, T4, T5, T6, T7, T8, T9]>;
+  static all<T1, T2, T3, T4, T5, T6, T7, T8>(values: [T1 | Thenable<T1>, T2 | Thenable<T2>, T3 | Thenable<T3>, T4 | Thenable <T4>, T5 | Thenable<T5>, T6 | Thenable<T6>, T7 | Thenable<T7>, T8 | Thenable<T8>]): Promise<[T1, T2, T3, T4, T5, T6, T7, T8]>;
+  static all<T1, T2, T3, T4, T5, T6, T7>(values: [T1 | Thenable<T1>, T2 | Thenable<T2>, T3 | Thenable<T3>, T4 | Thenable <T4>, T5 | Thenable<T5>, T6 | Thenable<T6>, T7 | Thenable<T7>]): Promise<[T1, T2, T3, T4, T5, T6, T7]>;
+  static all<T1, T2, T3, T4, T5, T6>(values: [T1 | Thenable<T1>, T2 | Thenable<T2>, T3 | Thenable<T3>, T4 | Thenable <T4>, T5 | Thenable<T5>, T6 | Thenable<T6>]): Promise<[T1, T2, T3, T4, T5, T6]>;
+  static all<T1, T2, T3, T4, T5>(values: [T1 | Thenable<T1>, T2 | Thenable<T2>, T3 | Thenable<T3>, T4 | Thenable <T4>, T5 | Thenable<T5>]): Promise<[T1, T2, T3, T4, T5]>;
+  static all<T1, T2, T3, T4>(values: [T1 | Thenable<T1>, T2 | Thenable<T2>, T3 | Thenable<T3>, T4 | Thenable <T4>]): Promise<[T1, T2, T3, T4]>;
+  static all<T1, T2, T3>(values: [T1 | Thenable<T1>, T2 | Thenable<T2>, T3 | Thenable<T3>]): Promise<[T1, T2, T3]>;
+  static all<T1, T2>(values: [T1 | Thenable<T1>, T2 | Thenable<T2>]): Promise<[T1, T2]>;
+  static all<T1>(values: [T1 | Thenable<T1>]): Promise<[T1]>;
+  static all<TAll>(values: Array<TAll | Thenable<TAll>>): Promise<TAll[]>;
+
+  /**
+   * Make a Promise that fulfills when any item fulfills, and rejects if any item rejects.
+   */
+  static race <R> (promises: (R | Thenable<R>)[]): Promise<R>;
+}
+
+/**
+ * The polyfill method will patch the global environment (in this case to the Promise name) when called.
+ */
+export function polyfill (): void;
+}
+declare module 'es6-promise/dist/es6-promise' {
+export * from '~es6-promise/dist/es6-promise';
+}
+declare module 'es6-promise' {
+export * from '~es6-promise/dist/es6-promise';
+}
-- 
2.7.4


From 3941791085713c594478c534bc68d8ad9e4232d2 Mon Sep 17 00:00:00 2001
From: Uri Goldshtein <uri.goldshtein@gmail.com>
Date: Fri, 13 May 2016 23:16:51 +0300
Subject: [PATCH 006/171] Step 0.6: Create the root component

---
 client/app.ts | 12 ++++++++++++
 1 file changed, 12 insertions(+)
 create mode 100644 client/app.ts

diff --git a/client/app.ts b/client/app.ts
new file mode 100644
index 0000000..d56b4f2
--- /dev/null
+++ b/client/app.ts
@@ -0,0 +1,12 @@
+import 'reflect-metadata';
+import 'zone.js/dist/zone';
+import { Component } from '@angular/core';
+import { bootstrap } from '@angular/platform-browser-dynamic';
+
+@Component({
+  selector: 'app',
+  templateUrl: '/client/app.html'
+})
+class Socially { }
+
+bootstrap(Socially);
-- 
2.7.4


From bc33d04c5c8f2ed8d9a009f04351874cb322fe43 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 15:46:28 +0200
Subject: [PATCH 007/171] Step 0.7: Add the main component HTML file

---
 client/app.html | 1 +
 1 file changed, 1 insertion(+)
 create mode 100644 client/app.html

diff --git a/client/app.html b/client/app.html
new file mode 100644
index 0000000..c57eff5
--- /dev/null
+++ b/client/app.html
@@ -0,0 +1 @@
+Hello World!
\ No newline at end of file
-- 
2.7.4


From d05f883545552e2e3c017627853d202cf212aa03 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 15:46:43 +0200
Subject: [PATCH 008/171] Step 0.8: Use the main component in the index.html
 file

---
 client/index.html | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/client/index.html b/client/index.html
index 3887661..2662e56 100644
--- a/client/index.html
+++ b/client/index.html
@@ -1,3 +1,3 @@
 <body>
-<p>Nothing here</p>
+  <app></app>
 </body>
\ No newline at end of file
-- 
2.7.4


From 227b201c728dd7d91f225aad10175039b542880f Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 15:47:57 +0200
Subject: [PATCH 009/171] Step 1.1: Add static HTML to the main component view

---
 client/app.html | 15 ++++++++++++++-
 1 file changed, 14 insertions(+), 1 deletion(-)

diff --git a/client/app.html b/client/app.html
index c57eff5..9ea318e 100644
--- a/client/app.html
+++ b/client/app.html
@@ -1 +1,14 @@
-Hello World!
\ No newline at end of file
+<ul>
+  <li>
+    <span>Dubstep-Free Zone</span>
+    <p>
+      Can we please just for an evening not listen to dubstep.
+    </p>
+  </li>
+  <li>
+    <span>All dubstep all the time</span>
+    <p>
+      Get it on!
+    </p>
+  </li>
+</ul>
\ No newline at end of file
-- 
2.7.4


From 3a04a8e26b24e872577031e14ee99523c09c0e68 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 15:49:08 +0200
Subject: [PATCH 010/171] Step 2.1: Add dynamic html to the main component view

---
 client/app.html | 23 +++++++++--------------
 1 file changed, 9 insertions(+), 14 deletions(-)

diff --git a/client/app.html b/client/app.html
index 9ea318e..b750655 100644
--- a/client/app.html
+++ b/client/app.html
@@ -1,14 +1,9 @@
-<ul>
-  <li>
-    <span>Dubstep-Free Zone</span>
-    <p>
-      Can we please just for an evening not listen to dubstep.
-    </p>
-  </li>
-  <li>
-    <span>All dubstep all the time</span>
-    <p>
-      Get it on!
-    </p>
-  </li>
-</ul>
\ No newline at end of file
+<div>
+  <ul>
+    <li *ngFor="let party of parties">
+      {{party.name}}
+      <p>{{party.description}}</p>
+      <p>{{party.location}}</p>
+    </li>
+  </ul>
+</div>
\ No newline at end of file
-- 
2.7.4


From 9b0c3665de7985256e04a813d65206a66454f8a7 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 15:50:04 +0200
Subject: [PATCH 011/171] Step 2.2: load parties data into the app

---
 client/app.ts | 19 ++++++++++++++++++-
 1 file changed, 18 insertions(+), 1 deletion(-)

diff --git a/client/app.ts b/client/app.ts
index d56b4f2..e9b4d51 100644
--- a/client/app.ts
+++ b/client/app.ts
@@ -7,6 +7,23 @@ import { bootstrap } from '@angular/platform-browser-dynamic';
   selector: 'app',
   templateUrl: '/client/app.html'
 })
-class Socially { }
+class Socially {
+  constructor() {
+    this.parties = [
+      {'name': 'Dubstep-Free Zone',
+        'description': 'Can we please just for an evening not listen to dubstep.',
+        'location': 'Palo Alto'
+      },
+      {'name': 'All dubstep all the time',
+        'description': 'Get it on!',
+        'location': 'Palo Alto'
+      },
+      {'name': 'Savage lounging',
+        'description': 'Leisure suit required. And only fiercest manners.',
+        'location': 'San Francisco'
+      }
+    ];
+  }
+}
 
 bootstrap(Socially);
-- 
2.7.4


From 51e546d9c7849850503cfa41657fddfbd120f08f Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 15:50:30 +0200
Subject: [PATCH 012/171] Step 2.3: define parties property

---
 client/app.ts | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/client/app.ts b/client/app.ts
index e9b4d51..444a09c 100644
--- a/client/app.ts
+++ b/client/app.ts
@@ -8,6 +8,8 @@ import { bootstrap } from '@angular/platform-browser-dynamic';
   templateUrl: '/client/app.html'
 })
 class Socially {
+  parties: Array<Object>;
+
   constructor() {
     this.parties = [
       {'name': 'Dubstep-Free Zone',
-- 
2.7.4


From 32c24b553fbeaa64e1a49d2d1c91659d417940d5 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 15:51:11 +0200
Subject: [PATCH 013/171] Step 3.1: add the parties collection

---
 collections/parties.ts | 3 +++
 1 file changed, 3 insertions(+)
 create mode 100644 collections/parties.ts

diff --git a/collections/parties.ts b/collections/parties.ts
new file mode 100644
index 0000000..22bdeab
--- /dev/null
+++ b/collections/parties.ts
@@ -0,0 +1,3 @@
+import {Mongo} from 'meteor/mongo';
+
+export let Parties = new Mongo.Collection('parties');
\ No newline at end of file
-- 
2.7.4


From c8ded6229870b3cc6e0b742c77c55c4372f27cf4 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 15:53:10 +0200
Subject: [PATCH 014/171] Step 3.2: import the parties collection

---
 client/app.ts | 1 +
 1 file changed, 1 insertion(+)

diff --git a/client/app.ts b/client/app.ts
index 444a09c..dc24121 100644
--- a/client/app.ts
+++ b/client/app.ts
@@ -2,6 +2,7 @@ import 'reflect-metadata';
 import 'zone.js/dist/zone';
 import { Component } from '@angular/core';
 import { bootstrap } from '@angular/platform-browser-dynamic';
+import { Parties }   from '../collections/parties';
 
 @Component({
   selector: 'app',
-- 
2.7.4


From 1ff000328d26d4c1eac6bddd8086e56f8c39e517 Mon Sep 17 00:00:00 2001
From: Uri Goldshtein <uri.goldshtein@gmail.com>
Date: Sat, 14 May 2016 00:16:22 +0300
Subject: [PATCH 015/171] Step 3.3: Added Angular2-Meteor auto bootstrap

---
 package.json | 1 +
 1 file changed, 1 insertion(+)

diff --git a/package.json b/package.json
index 9989232..458e0c7 100644
--- a/package.json
+++ b/package.json
@@ -11,6 +11,7 @@
     "@angular/platform-browser": "2.0.0-rc.1",
     "@angular/platform-browser-dynamic": "2.0.0-rc.1",
     "angular2-meteor": "0.5.5",
+    "angular2-meteor-auto-bootstrap": "0.5.5",
     "es6-shim": "0.35.1",
     "meteor-node-stubs": "^0.2.3",
     "reflect-metadata": "0.1.2",
-- 
2.7.4


From 97512a4de1f9acdab50a24f8cd46f3fd4b098815 Mon Sep 17 00:00:00 2001
From: Uri Goldshtein <uri.goldshtein@gmail.com>
Date: Sat, 14 May 2016 00:16:56 +0300
Subject: [PATCH 016/171] Step 3.4: Import bootstrap from
 angular2-meteor-auto-bootstrap

---
 client/app.ts | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/client/app.ts b/client/app.ts
index dc24121..ba379c7 100644
--- a/client/app.ts
+++ b/client/app.ts
@@ -1,7 +1,7 @@
 import 'reflect-metadata';
 import 'zone.js/dist/zone';
 import { Component } from '@angular/core';
-import { bootstrap } from '@angular/platform-browser-dynamic';
+import { bootstrap } from 'angular2-meteor-auto-bootstrap';
 import { Parties }   from '../collections/parties';
 
 @Component({
-- 
2.7.4


From 2e587baa8a5c2d7ccc9dfb3c3c7d9afd0a92ab3f Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 16:08:10 +0200
Subject: [PATCH 017/171] Step 3.5: Bind Mongo Collection to Angular

---
 client/app.ts | 20 ++++----------------
 1 file changed, 4 insertions(+), 16 deletions(-)

diff --git a/client/app.ts b/client/app.ts
index ba379c7..136ba34 100644
--- a/client/app.ts
+++ b/client/app.ts
@@ -3,29 +3,17 @@ import 'zone.js/dist/zone';
 import { Component } from '@angular/core';
 import { bootstrap } from 'angular2-meteor-auto-bootstrap';
 import { Parties }   from '../collections/parties';
+import { Mongo }     from 'meteor/mongo';
 
 @Component({
   selector: 'app',
   templateUrl: '/client/app.html'
 })
 class Socially {
-  parties: Array<Object>;
+  parties: Mongo.Cursor<Object>;
 
-  constructor() {
-    this.parties = [
-      {'name': 'Dubstep-Free Zone',
-        'description': 'Can we please just for an evening not listen to dubstep.',
-        'location': 'Palo Alto'
-      },
-      {'name': 'All dubstep all the time',
-        'description': 'Get it on!',
-        'location': 'Palo Alto'
-      },
-      {'name': 'Savage lounging',
-        'description': 'Leisure suit required. And only fiercest manners.',
-        'location': 'San Francisco'
-      }
-    ];
+  constructor () {
+    this.parties = Parties.find();
   }
 }
 
-- 
2.7.4


From a9ff2dde90369a1fea0cccc0517c9ba9d74ea745 Mon Sep 17 00:00:00 2001
From: barbatus <alex.borodach@gmail.com>
Date: Wed, 14 Oct 2015 23:21:31 +0300
Subject: [PATCH 018/171] Step 3.7: load initial parties on server side

---
 server/load-parties.ts | 28 ++++++++++++++++++++++++++++
 1 file changed, 28 insertions(+)
 create mode 100644 server/load-parties.ts

diff --git a/server/load-parties.ts b/server/load-parties.ts
new file mode 100644
index 0000000..9e0751c
--- /dev/null
+++ b/server/load-parties.ts
@@ -0,0 +1,28 @@
+import { Parties } from '../collections/parties.ts';
+
+export function loadParties() {
+  if (Parties.find().count() === 0) {
+
+    var parties = [
+      {
+        'name': 'Dubstep-Free Zone',
+        'description': 'Can we please just for an evening not listen to dubstep.',
+        'location': 'Palo Alto'
+      },
+      {
+        'name': 'All dubstep all the time',
+        'description': 'Get it on!',
+        'location': 'Palo Alto'
+      },
+      {
+        'name': 'Savage lounging',
+        'description': 'Leisure suit required. And only fiercest manners.',
+        'location': 'San Francisco'
+      }
+    ];
+
+    for (var i = 0; i < parties.length; i++) {
+      Parties.insert(parties[i]);
+    }
+  }
+}
\ No newline at end of file
-- 
2.7.4


From d64fac7f76752ad5219eb458503408d090c70cd2 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 16:11:01 +0200
Subject: [PATCH 019/171] Step 3.9: bootstrap server side

---
 server/main.ts | 4 ++++
 1 file changed, 4 insertions(+)
 create mode 100644 server/main.ts

diff --git a/server/main.ts b/server/main.ts
new file mode 100644
index 0000000..cdda65d
--- /dev/null
+++ b/server/main.ts
@@ -0,0 +1,4 @@
+import {loadParties} from './load-parties.ts';
+import {Meteor} from 'meteor/meteor';
+
+Meteor.startup(loadParties);
\ No newline at end of file
-- 
2.7.4


From bfd2330e5514d31bc0095af0eab25530fdf29036 Mon Sep 17 00:00:00 2001
From: Uri Goldshtein <uri.goldshtein@gmail.com>
Date: Sat, 14 May 2016 13:39:12 +0300
Subject: [PATCH 020/171] Step 4.1: create PartiesForm component

---
 client/imports/parties-form/parties-form.ts | 8 ++++++++
 1 file changed, 8 insertions(+)
 create mode 100644 client/imports/parties-form/parties-form.ts

diff --git a/client/imports/parties-form/parties-form.ts b/client/imports/parties-form/parties-form.ts
new file mode 100644
index 0000000..223a99a
--- /dev/null
+++ b/client/imports/parties-form/parties-form.ts
@@ -0,0 +1,8 @@
+import 'reflect-metadata';
+import { Component } from '@angular/core';
+
+@Component({
+  selector: 'parties-form',
+  templateUrl: '/client/imports/parties-form/parties-form.html'
+})
+export class PartiesForm { }
\ No newline at end of file
-- 
2.7.4


From ca1d171deabe5c7a1ef5d4f475f40f4c2bc04433 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 16:14:14 +0200
Subject: [PATCH 021/171] Step 4.2: add parties-form.html template

---
 client/imports/parties-form/parties-form.html | 9 +++++++++
 1 file changed, 9 insertions(+)
 create mode 100644 client/imports/parties-form/parties-form.html

diff --git a/client/imports/parties-form/parties-form.html b/client/imports/parties-form/parties-form.html
new file mode 100644
index 0000000..37748f5
--- /dev/null
+++ b/client/imports/parties-form/parties-form.html
@@ -0,0 +1,9 @@
+<form>
+  <label>Name</label>
+  <input type="text">
+  <label>Description</label>
+  <input type="text">
+  <label>Location</label>
+  <input type="text">
+  <button>Add</button>
+</form>
\ No newline at end of file
-- 
2.7.4


From e14eb6111334a417f165dfe5dff254e08b32fe5a Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 16:14:30 +0200
Subject: [PATCH 022/171] Step 4.3: load the PartiesForm component

---
 client/app.html | 1 +
 1 file changed, 1 insertion(+)

diff --git a/client/app.html b/client/app.html
index b750655..e6ea085 100644
--- a/client/app.html
+++ b/client/app.html
@@ -1,4 +1,5 @@
 <div>
+  <parties-form></parties-form>
   <ul>
     <li *ngFor="let party of parties">
       {{party.name}}
-- 
2.7.4


From fbb4e6d05b832e5f22a89cd729f102de696347ca Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 16:14:47 +0200
Subject: [PATCH 023/171] Step 4.4: import the PartiesForm component and link
 it with the Socially component

---
 client/app.ts | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/client/app.ts b/client/app.ts
index 136ba34..5003f25 100644
--- a/client/app.ts
+++ b/client/app.ts
@@ -4,10 +4,12 @@ import { Component } from '@angular/core';
 import { bootstrap } from 'angular2-meteor-auto-bootstrap';
 import { Parties }   from '../collections/parties';
 import { Mongo }     from 'meteor/mongo';
+import { PartiesForm } from './imports/parties-form/parties-form';
 
 @Component({
   selector: 'app',
-  templateUrl: '/client/app.html'
+  templateUrl: '/client/app.html',
+  directives: [PartiesForm]
 })
 class Socially {
   parties: Mongo.Cursor<Object>;
-- 
2.7.4


From ce7f339d041f12ad092b0c026c112d6c6dd54c27 Mon Sep 17 00:00:00 2001
From: Uri Goldshtein <uri.goldshtein@gmail.com>
Date: Sat, 14 May 2016 13:56:27 +0300
Subject: [PATCH 024/171] Step 4.5: build a form model

---
 client/imports/parties-form/parties-form.ts | 15 ++++++++++++++-
 1 file changed, 14 insertions(+), 1 deletion(-)

diff --git a/client/imports/parties-form/parties-form.ts b/client/imports/parties-form/parties-form.ts
index 223a99a..e63baad 100644
--- a/client/imports/parties-form/parties-form.ts
+++ b/client/imports/parties-form/parties-form.ts
@@ -1,8 +1,21 @@
 import 'reflect-metadata';
 import { Component } from '@angular/core';
+import { FormBuilder, ControlGroup, Validators } from '@angular/common';
 
 @Component({
   selector: 'parties-form',
   templateUrl: '/client/imports/parties-form/parties-form.html'
 })
-export class PartiesForm { }
\ No newline at end of file
+export class PartiesForm {
+  partiesForm: ControlGroup;
+
+  constructor() {
+    let fb = new FormBuilder();
+
+    this.partiesForm = fb.group({
+      name: [''],
+      description: [''],
+      location: ['']
+    });
+  }
+}
\ No newline at end of file
-- 
2.7.4


From 7f66d53c31b9063b318c6b9847effe79fd107024 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 16:16:26 +0200
Subject: [PATCH 025/171] Step 4.6: add form validation

---
 client/imports/parties-form/parties-form.ts | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/client/imports/parties-form/parties-form.ts b/client/imports/parties-form/parties-form.ts
index e63baad..6201c9c 100644
--- a/client/imports/parties-form/parties-form.ts
+++ b/client/imports/parties-form/parties-form.ts
@@ -13,9 +13,9 @@ export class PartiesForm {
     let fb = new FormBuilder();
 
     this.partiesForm = fb.group({
-      name: [''],
+      name: ['', Validators.required],
       description: [''],
-      location: ['']
+      location: ['', Validators.required]
     });
   }
 }
\ No newline at end of file
-- 
2.7.4


From d7ca0f799f35298c78d4c52f5eb8b9ed2f5a841a Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 16:16:51 +0200
Subject: [PATCH 026/171] Step 4.7: link the form and its model together

---
 client/imports/parties-form/parties-form.html | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/client/imports/parties-form/parties-form.html b/client/imports/parties-form/parties-form.html
index 37748f5..4e3676e 100644
--- a/client/imports/parties-form/parties-form.html
+++ b/client/imports/parties-form/parties-form.html
@@ -1,9 +1,9 @@
-<form>
+<form [ngFormModel]="partiesForm">
   <label>Name</label>
-  <input type="text">
+  <input type="text" ngControl="name">
   <label>Description</label>
-  <input type="text">
+  <input type="text" ngControl="description">
   <label>Location</label>
-  <input type="text">
+  <input type="text" ngControl="location">
   <button>Add</button>
 </form>
\ No newline at end of file
-- 
2.7.4


From 68ae18583503693c1307dd4af67c63437e761ab1 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 16:17:16 +0200
Subject: [PATCH 027/171] Step 4.8: add submit handler inside the template

---
 client/imports/parties-form/parties-form.html | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/client/imports/parties-form/parties-form.html b/client/imports/parties-form/parties-form.html
index 4e3676e..754b9ff 100644
--- a/client/imports/parties-form/parties-form.html
+++ b/client/imports/parties-form/parties-form.html
@@ -1,4 +1,4 @@
-<form [ngFormModel]="partiesForm">
+<form [ngFormModel]="partiesForm" #f="ngForm" (submit)="addParty(f.value)">
   <label>Name</label>
   <input type="text" ngControl="name">
   <label>Description</label>
-- 
2.7.4


From c37f18e36ee507050bc796a95c11fe29b7ae2c72 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 16:19:39 +0200
Subject: [PATCH 028/171] Step 4.9: add addParty method into the component

---
 client/imports/parties-form/parties-form.ts | 17 ++++++++++++++++-
 1 file changed, 16 insertions(+), 1 deletion(-)

diff --git a/client/imports/parties-form/parties-form.ts b/client/imports/parties-form/parties-form.ts
index 6201c9c..3fc7528 100644
--- a/client/imports/parties-form/parties-form.ts
+++ b/client/imports/parties-form/parties-form.ts
@@ -1,6 +1,7 @@
 import 'reflect-metadata';
 import { Component } from '@angular/core';
-import { FormBuilder, ControlGroup, Validators } from '@angular/common';
+import { FormBuilder, ControlGroup, Validators, Control } from '@angular/common';
+import { Parties } from '../../../collections/parties.ts';
 
 @Component({
   selector: 'parties-form',
@@ -18,4 +19,18 @@ export class PartiesForm {
       location: ['', Validators.required]
     });
   }
+
+  addParty(party) {
+    if (this.partiesForm.valid) {
+      Parties.insert({
+        name: party.name,
+        description: party.description,
+        location: party.location
+      });
+
+      (<Control>this.partiesForm.controls['name']).updateValue('');
+      (<Control>this.partiesForm.controls['description']).updateValue('');
+      (<Control>this.partiesForm.controls['location']).updateValue('');
+    }
+  }
 }
\ No newline at end of file
-- 
2.7.4


From c8f0f334933e41a3595579a71370a6bccf97bd50 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 16:20:12 +0200
Subject: [PATCH 029/171] Step 4.10: add a remove party button and click event
 handler

---
 client/app.html | 1 +
 1 file changed, 1 insertion(+)

diff --git a/client/app.html b/client/app.html
index e6ea085..0362c48 100644
--- a/client/app.html
+++ b/client/app.html
@@ -5,6 +5,7 @@
       {{party.name}}
       <p>{{party.description}}</p>
       <p>{{party.location}}</p>
+      <button (click)="removeParty(party)">X</button>
     </li>
   </ul>
 </div>
\ No newline at end of file
-- 
2.7.4


From b1dc8f79304b8a5773b2cabc5e69f3b7eee52a3e Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 16:21:03 +0200
Subject: [PATCH 030/171] Step 4.11: add removeParty method inside the
 component

---
 client/app.ts | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/client/app.ts b/client/app.ts
index 5003f25..7fc430b 100644
--- a/client/app.ts
+++ b/client/app.ts
@@ -17,6 +17,10 @@ class Socially {
   constructor () {
     this.parties = Parties.find();
   }
+
+  removeParty(party) {
+    Parties.remove(party._id);
+  }
 }
 
 bootstrap(Socially);
-- 
2.7.4


From d1f6f724f3be764d53685a9f6d5e3556efa75d1b Mon Sep 17 00:00:00 2001
From: Uri Goldshtein <uri.goldshtein@gmail.com>
Date: Sat, 14 May 2016 14:16:11 +0300
Subject: [PATCH 031/171] Step 5.0: Install router from npm

---
 package.json | 1 +
 1 file changed, 1 insertion(+)

diff --git a/package.json b/package.json
index 458e0c7..3b6899e 100644
--- a/package.json
+++ b/package.json
@@ -10,6 +10,7 @@
     "@angular/core": "2.0.0-rc.1",
     "@angular/platform-browser": "2.0.0-rc.1",
     "@angular/platform-browser-dynamic": "2.0.0-rc.1",
+    "@angular/router-deprecated": "^2.0.0-rc.1",
     "angular2-meteor": "0.5.5",
     "angular2-meteor-auto-bootstrap": "0.5.5",
     "es6-shim": "0.35.1",
-- 
2.7.4


From 0dcaf52413c0fe0a26d49f525640fd84a2729b4d Mon Sep 17 00:00:00 2001
From: Uri Goldshtein <uri.goldshtein@gmail.com>
Date: Sat, 14 May 2016 14:19:45 +0300
Subject: [PATCH 032/171] Step 5.1: import routing components and add them to
 the app

---
 client/app.ts | 5 +++--
 1 file changed, 3 insertions(+), 2 deletions(-)

diff --git a/client/app.ts b/client/app.ts
index 7fc430b..6b023b0 100644
--- a/client/app.ts
+++ b/client/app.ts
@@ -5,11 +5,12 @@ import { bootstrap } from 'angular2-meteor-auto-bootstrap';
 import { Parties }   from '../collections/parties';
 import { Mongo }     from 'meteor/mongo';
 import { PartiesForm } from './imports/parties-form/parties-form';
+import { ROUTER_PROVIDERS, ROUTER_DIRECTIVES, RouteConfig } from '@angular/router-deprecated';
 
 @Component({
   selector: 'app',
   templateUrl: '/client/app.html',
-  directives: [PartiesForm]
+  directives: [PartiesForm, ROUTER_DIRECTIVES]
 })
 class Socially {
   parties: Mongo.Cursor<Object>;
@@ -23,4 +24,4 @@ class Socially {
   }
 }
 
-bootstrap(Socially);
+bootstrap(Socially, [ROUTER_PROVIDERS]);
-- 
2.7.4


From 164792a60acfa1c697cb16cad23c29551df23af9 Mon Sep 17 00:00:00 2001
From: Uri Goldshtein <uri.goldshtein@gmail.com>
Date: Sat, 14 May 2016 14:24:46 +0300
Subject: [PATCH 033/171] Step 5.2: create PartiesList component

---
 client/imports/parties-list/parties-list.ts | 21 +++++++++++++++++++++
 1 file changed, 21 insertions(+)
 create mode 100644 client/imports/parties-list/parties-list.ts

diff --git a/client/imports/parties-list/parties-list.ts b/client/imports/parties-list/parties-list.ts
new file mode 100644
index 0000000..e5be119
--- /dev/null
+++ b/client/imports/parties-list/parties-list.ts
@@ -0,0 +1,21 @@
+import { Component }   from '@angular/core';
+import { Parties }     from '../../../collections/parties';
+import { PartiesForm } from '../parties-form/parties-form';
+import { Mongo }       from 'meteor/mongo';
+
+@Component({
+  selector: 'parties-list',
+  templateUrl: '/client/imports/parties-list/parties-list.html',
+  directives: [PartiesForm]
+})
+export class PartiesList {
+  parties: Mongo.Cursor;
+
+  constructor() {
+    this.parties = Parties.find();
+  }
+
+  removeParty(party) {
+    Parties.remove(party._id);
+  }
+}
\ No newline at end of file
-- 
2.7.4


From 057bfc000af011e4139e0b398340466d2e2719a9 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 16:25:51 +0200
Subject: [PATCH 034/171] Step 5.3: create PartiesList component view

---
 client/imports/parties-list/parties-list.html | 11 +++++++++++
 1 file changed, 11 insertions(+)
 create mode 100644 client/imports/parties-list/parties-list.html

diff --git a/client/imports/parties-list/parties-list.html b/client/imports/parties-list/parties-list.html
new file mode 100644
index 0000000..0362c48
--- /dev/null
+++ b/client/imports/parties-list/parties-list.html
@@ -0,0 +1,11 @@
+<div>
+  <parties-form></parties-form>
+  <ul>
+    <li *ngFor="let party of parties">
+      {{party.name}}
+      <p>{{party.description}}</p>
+      <p>{{party.location}}</p>
+      <button (click)="removeParty(party)">X</button>
+    </li>
+  </ul>
+</div>
\ No newline at end of file
-- 
2.7.4


From 4f40b5e6dab303ba9971b7a4fb4cadcf97ef8251 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 16:26:07 +0200
Subject: [PATCH 035/171] Step 5.4: Clean up app.ts file

---
 client/app.ts | 17 ++---------------
 1 file changed, 2 insertions(+), 15 deletions(-)

diff --git a/client/app.ts b/client/app.ts
index 6b023b0..cbc3e59 100644
--- a/client/app.ts
+++ b/client/app.ts
@@ -2,26 +2,13 @@ import 'reflect-metadata';
 import 'zone.js/dist/zone';
 import { Component } from '@angular/core';
 import { bootstrap } from 'angular2-meteor-auto-bootstrap';
-import { Parties }   from '../collections/parties';
-import { Mongo }     from 'meteor/mongo';
-import { PartiesForm } from './imports/parties-form/parties-form';
 import { ROUTER_PROVIDERS, ROUTER_DIRECTIVES, RouteConfig } from '@angular/router-deprecated';
 
 @Component({
   selector: 'app',
   templateUrl: '/client/app.html',
-  directives: [PartiesForm, ROUTER_DIRECTIVES]
+  directives: [ROUTER_DIRECTIVES]
 })
-class Socially {
-  parties: Mongo.Cursor<Object>;
-
-  constructor () {
-    this.parties = Parties.find();
-  }
-
-  removeParty(party) {
-    Parties.remove(party._id);
-  }
-}
+class Socially {}
 
 bootstrap(Socially, [ROUTER_PROVIDERS]);
-- 
2.7.4


From 44138f7ddf2244a0de3451150cc0a026d119424f Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 16:26:15 +0200
Subject: [PATCH 036/171] Step 5.5: Remove app.html file

---
 client/app.html | 11 -----------
 1 file changed, 11 deletions(-)
 delete mode 100644 client/app.html

diff --git a/client/app.html b/client/app.html
deleted file mode 100644
index 0362c48..0000000
--- a/client/app.html
+++ /dev/null
@@ -1,11 +0,0 @@
-<div>
-  <parties-form></parties-form>
-  <ul>
-    <li *ngFor="let party of parties">
-      {{party.name}}
-      <p>{{party.description}}</p>
-      <p>{{party.location}}</p>
-      <button (click)="removeParty(party)">X</button>
-    </li>
-  </ul>
-</div>
\ No newline at end of file
-- 
2.7.4


From 56d0999b784f76a8e03f19da44080c8ad56948e6 Mon Sep 17 00:00:00 2001
From: Uri Goldshtein <uri.goldshtein@gmail.com>
Date: Sat, 14 May 2016 14:29:18 +0300
Subject: [PATCH 037/171] Step 5.6: add PartyDetails component

---
 client/imports/party-details/party-details.ts | 7 +++++++
 1 file changed, 7 insertions(+)
 create mode 100644 client/imports/party-details/party-details.ts

diff --git a/client/imports/party-details/party-details.ts b/client/imports/party-details/party-details.ts
new file mode 100644
index 0000000..6a234c7
--- /dev/null
+++ b/client/imports/party-details/party-details.ts
@@ -0,0 +1,7 @@
+import { Component } from '@angular/core';
+
+@Component({
+  selector: 'party-details',
+  templateUrl: '/client/imports/party-details/party-details.html'
+})
+export class PartyDetails {}
-- 
2.7.4


From 259602c4de7d7da962241f237e979f412a6a4a9a Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 16:27:47 +0200
Subject: [PATCH 038/171] Step 5.7: add PartyDetails template

---
 client/imports/party-details/party-details.html | 5 +++++
 1 file changed, 5 insertions(+)
 create mode 100644 client/imports/party-details/party-details.html

diff --git a/client/imports/party-details/party-details.html b/client/imports/party-details/party-details.html
new file mode 100644
index 0000000..a3da9f4
--- /dev/null
+++ b/client/imports/party-details/party-details.html
@@ -0,0 +1,5 @@
+<header>
+  <h2>PARTY_NAME</h2>
+
+  <p>PARTY_DESCRIPTION</p>
+</header>
\ No newline at end of file
-- 
2.7.4


From 60a944e6dec275391669c72c218691b762bcaee3 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 17:32:05 +0200
Subject: [PATCH 039/171] Step 5.8: configure routes

---
 client/app.ts | 11 +++++++++--
 1 file changed, 9 insertions(+), 2 deletions(-)

diff --git a/client/app.ts b/client/app.ts
index cbc3e59..c32bf08 100644
--- a/client/app.ts
+++ b/client/app.ts
@@ -1,14 +1,21 @@
 import 'reflect-metadata';
 import 'zone.js/dist/zone';
-import { Component } from '@angular/core';
+import { Component, provide } from '@angular/core';
 import { bootstrap } from 'angular2-meteor-auto-bootstrap';
 import { ROUTER_PROVIDERS, ROUTER_DIRECTIVES, RouteConfig } from '@angular/router-deprecated';
+import { APP_BASE_HREF } from '@angular/common';
+import { PartiesList } from './imports/parties-list/parties-list.ts';
+import { PartyDetails } from './imports/party-details/party-details.ts';
 
 @Component({
   selector: 'app',
   templateUrl: '/client/app.html',
   directives: [ROUTER_DIRECTIVES]
 })
+@RouteConfig([
+  { path: '/', as: 'PartiesList', component: PartiesList },
+  { path: '/party/:partyId', as: 'PartyDetails', component: PartyDetails }
+])
 class Socially {}
 
-bootstrap(Socially, [ROUTER_PROVIDERS]);
+bootstrap(Socially, [ROUTER_PROVIDERS, provide(APP_BASE_HREF, { useValue: '/' })]);
\ No newline at end of file
-- 
2.7.4


From cb05482dff05bae389f5c99a840f486084650ad5 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 17:32:27 +0200
Subject: [PATCH 040/171] Step 5.9: Add app.html that uses router

---
 client/app.html | 1 +
 1 file changed, 1 insertion(+)
 create mode 100644 client/app.html

diff --git a/client/app.html b/client/app.html
new file mode 100644
index 0000000..90c6b64
--- /dev/null
+++ b/client/app.html
@@ -0,0 +1 @@
+<router-outlet></router-outlet>
\ No newline at end of file
-- 
2.7.4


From 7dcdb0f7ec1de56ab716fdfb9266dab35c076cd3 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 17:34:22 +0200
Subject: [PATCH 041/171] Step 5.10: import RouterLink directive

---
 client/imports/parties-list/parties-list.ts | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/client/imports/parties-list/parties-list.ts b/client/imports/parties-list/parties-list.ts
index e5be119..b29c1e1 100644
--- a/client/imports/parties-list/parties-list.ts
+++ b/client/imports/parties-list/parties-list.ts
@@ -2,11 +2,13 @@ import { Component }   from '@angular/core';
 import { Parties }     from '../../../collections/parties';
 import { PartiesForm } from '../parties-form/parties-form';
 import { Mongo }       from 'meteor/mongo';
+import { RouterLink }  from '@angular/router-deprecated';
+
 
 @Component({
   selector: 'parties-list',
   templateUrl: '/client/imports/parties-list/parties-list.html',
-  directives: [PartiesForm]
+  directives: [PartiesForm, RouterLink]
 })
 export class PartiesList {
   parties: Mongo.Cursor;
-- 
2.7.4


From a352ad9dfb5b8faf3210e3fc999f38ed8c08cfcb Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 17:34:59 +0200
Subject: [PATCH 042/171] Step 5.11: add links to the parties list

---
 client/imports/parties-list/parties-list.html | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/client/imports/parties-list/parties-list.html b/client/imports/parties-list/parties-list.html
index 0362c48..a149764 100644
--- a/client/imports/parties-list/parties-list.html
+++ b/client/imports/parties-list/parties-list.html
@@ -2,7 +2,7 @@
   <parties-form></parties-form>
   <ul>
     <li *ngFor="let party of parties">
-      {{party.name}}
+      <a [routerLink]="['/PartyDetails', {partyId: party._id}]">{{party.name}}</a>
       <p>{{party.description}}</p>
       <p>{{party.location}}</p>
       <button (click)="removeParty(party)">X</button>
-- 
2.7.4


From fac3a6e9cad8153ee329066a3dfbf5a004d8dbe9 Mon Sep 17 00:00:00 2001
From: Uri Goldshtein <uri.goldshtein@gmail.com>
Date: Sat, 14 May 2016 14:51:47 +0300
Subject: [PATCH 043/171] Step 5.12: inject route parameters

---
 client/imports/party-details/party-details.ts | 7 ++++++-
 1 file changed, 6 insertions(+), 1 deletion(-)

diff --git a/client/imports/party-details/party-details.ts b/client/imports/party-details/party-details.ts
index 6a234c7..3872bbe 100644
--- a/client/imports/party-details/party-details.ts
+++ b/client/imports/party-details/party-details.ts
@@ -1,7 +1,12 @@
 import { Component } from '@angular/core';
+import { RouteParams } from '@angular/router-deprecated';
 
 @Component({
   selector: 'party-details',
   templateUrl: '/client/imports/party-details/party-details.html'
 })
-export class PartyDetails {}
+export class PartyDetails {
+  constructor(params: RouteParams) {
+    var partyId = params.get('partyId');
+  }
+}
\ No newline at end of file
-- 
2.7.4


From 81d85e8229ba3da099c876660026b52eabb8144e Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 17:36:57 +0200
Subject: [PATCH 044/171] Step 5.13: load party details

---
 client/imports/party-details/party-details.ts | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/client/imports/party-details/party-details.ts b/client/imports/party-details/party-details.ts
index 3872bbe..8ee343b 100644
--- a/client/imports/party-details/party-details.ts
+++ b/client/imports/party-details/party-details.ts
@@ -1,12 +1,16 @@
 import { Component } from '@angular/core';
 import { RouteParams } from '@angular/router-deprecated';
+import {Parties} from '../../../collections/parties.ts';
 
 @Component({
   selector: 'party-details',
   templateUrl: '/client/imports/party-details/party-details.html'
 })
 export class PartyDetails {
+  party: Object;
+
   constructor(params: RouteParams) {
     var partyId = params.get('partyId');
+    this.party = Parties.findOne(partyId);
   }
 }
\ No newline at end of file
-- 
2.7.4


From 5ca877db9bd7908bb5478b5dbc810fe5ad32682e Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Wed, 1 Jun 2016 19:11:44 +0200
Subject: [PATCH 045/171] Step 5.14: Move into autorun

---
 client/imports/party-details/party-details.ts | 8 ++++++--
 1 file changed, 6 insertions(+), 2 deletions(-)

diff --git a/client/imports/party-details/party-details.ts b/client/imports/party-details/party-details.ts
index 8ee343b..c9fff0e 100644
--- a/client/imports/party-details/party-details.ts
+++ b/client/imports/party-details/party-details.ts
@@ -1,5 +1,6 @@
 import { Component } from '@angular/core';
 import { RouteParams } from '@angular/router-deprecated';
+import { Tracker } from 'meteor/tracker';
 import {Parties} from '../../../collections/parties.ts';
 
 @Component({
@@ -11,6 +12,9 @@ export class PartyDetails {
 
   constructor(params: RouteParams) {
     var partyId = params.get('partyId');
-    this.party = Parties.findOne(partyId);
+
+    Tracker.autorun(() => {
+      this.party = Parties.findOne(partyId);
+    });
   }
-}
\ No newline at end of file
+}
-- 
2.7.4


From 25033d81ed499d960d2e28cefcedd170ec33ce55 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Wed, 1 Jun 2016 19:12:32 +0200
Subject: [PATCH 046/171] Step 5.15: Run with NgZone

---
 client/imports/party-details/party-details.ts | 8 +++++---
 1 file changed, 5 insertions(+), 3 deletions(-)

diff --git a/client/imports/party-details/party-details.ts b/client/imports/party-details/party-details.ts
index c9fff0e..48aca24 100644
--- a/client/imports/party-details/party-details.ts
+++ b/client/imports/party-details/party-details.ts
@@ -1,4 +1,4 @@
-import { Component } from '@angular/core';
+import { Component, NgZone } from '@angular/core';
 import { RouteParams } from '@angular/router-deprecated';
 import { Tracker } from 'meteor/tracker';
 import {Parties} from '../../../collections/parties.ts';
@@ -10,11 +10,13 @@ import {Parties} from '../../../collections/parties.ts';
 export class PartyDetails {
   party: Object;
 
-  constructor(params: RouteParams) {
+  constructor(params: RouteParams, ngZone: NgZone) {
     var partyId = params.get('partyId');
 
     Tracker.autorun(() => {
-      this.party = Parties.findOne(partyId);
+      ngZone.run(() => {
+        this.party = Parties.findOne(partyId);
+      });
     });
   }
 }
-- 
2.7.4


From b14e1b99bf414797185744d75ba379c7ebc08f62 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 17:37:32 +0200
Subject: [PATCH 047/171] Step 5.16: Add the party details to the view

---
 client/imports/party-details/party-details.html | 10 ++++++----
 1 file changed, 6 insertions(+), 4 deletions(-)

diff --git a/client/imports/party-details/party-details.html b/client/imports/party-details/party-details.html
index a3da9f4..3e50919 100644
--- a/client/imports/party-details/party-details.html
+++ b/client/imports/party-details/party-details.html
@@ -1,5 +1,7 @@
-<header>
-  <h2>PARTY_NAME</h2>
+<header *ngIf="party">
+  <h2>{{party.name}}</h2>
 
-  <p>PARTY_DESCRIPTION</p>
-</header>
\ No newline at end of file
+  <p>{{party.description}}</p>
+
+  <p>{{party.location}}</p>
+</header>
-- 
2.7.4


From 0a26980c93dece9478e54f22741f9848b04945cb Mon Sep 17 00:00:00 2001
From: Uri Goldshtein <uri.goldshtein@gmail.com>
Date: Sat, 14 May 2016 14:58:37 +0300
Subject: [PATCH 048/171] Step 6.1: Add router-link dependency

---
 client/imports/party-details/party-details.ts | 5 +++--
 1 file changed, 3 insertions(+), 2 deletions(-)

diff --git a/client/imports/party-details/party-details.ts b/client/imports/party-details/party-details.ts
index 48aca24..6baeb52 100644
--- a/client/imports/party-details/party-details.ts
+++ b/client/imports/party-details/party-details.ts
@@ -1,11 +1,12 @@
 import { Component, NgZone } from '@angular/core';
-import { RouteParams } from '@angular/router-deprecated';
+import { RouteParams, RouterLink } from '@angular/router-deprecated';
 import { Tracker } from 'meteor/tracker';
 import {Parties} from '../../../collections/parties.ts';
 
 @Component({
   selector: 'party-details',
-  templateUrl: '/client/imports/party-details/party-details.html'
+  templateUrl: '/client/imports/party-details/party-details.html',
+  directives: [RouterLink]
 })
 export class PartyDetails {
   party: Object;
-- 
2.7.4


From 069ac76479cab832a4e12f6a0079c09e99ef49e0 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 17:39:16 +0200
Subject: [PATCH 049/171] Step 6.2: add party details form

---
 client/imports/party-details/party-details.html | 16 +++++++++++-----
 1 file changed, 11 insertions(+), 5 deletions(-)

diff --git a/client/imports/party-details/party-details.html b/client/imports/party-details/party-details.html
index 3e50919..a9aaa4d 100644
--- a/client/imports/party-details/party-details.html
+++ b/client/imports/party-details/party-details.html
@@ -1,7 +1,13 @@
-<header *ngIf="party">
-  <h2>{{party.name}}</h2>
+<form>
+  <label>Name</label>
+  <input type="text">
 
-  <p>{{party.description}}</p>
+  <label>Description</label>
+  <input type="text">
 
-  <p>{{party.location}}</p>
-</header>
+  <label>Location</label>
+  <input type="text">
+
+  <button type="submit">Save</button>
+  <button [routerLink]="['/PartiesList']">Cancel</button>
+</form>
-- 
2.7.4


From aa2588db5e94b2fc6bf44ab903e7e19f61dd2924 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 17:39:45 +0200
Subject: [PATCH 050/171] Step 6.3: bind party to form inputs

---
 client/imports/party-details/party-details.html | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/client/imports/party-details/party-details.html b/client/imports/party-details/party-details.html
index a9aaa4d..61fda60 100644
--- a/client/imports/party-details/party-details.html
+++ b/client/imports/party-details/party-details.html
@@ -1,12 +1,12 @@
-<form>
+<form (submit)="saveParty(party)">
   <label>Name</label>
-  <input type="text">
+  <input type="text" [(ngModel)]="party.name">
 
   <label>Description</label>
-  <input type="text">
+  <input type="text" [(ngModel)]="party.description">
 
   <label>Location</label>
-  <input type="text">
+  <input type="text" [(ngModel)]="party.location">
 
   <button type="submit">Save</button>
   <button [routerLink]="['/PartiesList']">Cancel</button>
-- 
2.7.4


From 927f07c2c0cec2a56a60679f6ab936dcf2aa9d08 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 17:44:44 +0200
Subject: [PATCH 051/171] Step 6.4: add submit event handler

---
 client/imports/party-details/party-details.ts | 10 ++++++++++
 1 file changed, 10 insertions(+)

diff --git a/client/imports/party-details/party-details.ts b/client/imports/party-details/party-details.ts
index 6baeb52..68a032f 100644
--- a/client/imports/party-details/party-details.ts
+++ b/client/imports/party-details/party-details.ts
@@ -20,4 +20,14 @@ export class PartyDetails {
       });
     });
   }
+
+  saveParty(party) {
+    Parties.update(party._id, {
+      $set: {
+        name: party.name,
+        description: party.description,
+        location: party.location
+      }
+    });
+  }
 }
-- 
2.7.4


From 218801d84db180c66d4ce29d7e060de0ac23b6de Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 17:45:42 +0200
Subject: [PATCH 052/171] Step 7.1: declare Party type

---
 typings/party.d.ts | 6 ++++++
 1 file changed, 6 insertions(+)
 create mode 100644 typings/party.d.ts

diff --git a/typings/party.d.ts b/typings/party.d.ts
new file mode 100644
index 0000000..82919d0
--- /dev/null
+++ b/typings/party.d.ts
@@ -0,0 +1,6 @@
+interface Party {
+  _id?: string;
+  name: string;
+  description?: string;
+  location: string;
+}
\ No newline at end of file
-- 
2.7.4


From ef55e45c95f91542202435ae09949b7b8d6c6513 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 17:46:41 +0200
Subject: [PATCH 053/171] Step 7.2: define parties collection with Party type

---
 collections/parties.ts | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/collections/parties.ts b/collections/parties.ts
index 22bdeab..20143a6 100644
--- a/collections/parties.ts
+++ b/collections/parties.ts
@@ -1,3 +1,3 @@
 import {Mongo} from 'meteor/mongo';
 
-export let Parties = new Mongo.Collection('parties');
\ No newline at end of file
+export let Parties = new Mongo.Collection<Party>('parties');
-- 
2.7.4


From 89dde6da2d63888622daaecd28fd232e80021ec3 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Mon, 25 Jan 2016 17:47:11 +0200
Subject: [PATCH 054/171] Step 7.3: correct parties cursor to be of the exact
 type

---
 client/imports/parties-list/parties-list.ts | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/client/imports/parties-list/parties-list.ts b/client/imports/parties-list/parties-list.ts
index b29c1e1..cbc9bb2 100644
--- a/client/imports/parties-list/parties-list.ts
+++ b/client/imports/parties-list/parties-list.ts
@@ -11,7 +11,7 @@ import { RouterLink }  from '@angular/router-deprecated';
   directives: [PartiesForm, RouterLink]
 })
 export class PartiesList {
-  parties: Mongo.Cursor;
+  parties: Mongo.Cursor<Party>;
 
   constructor() {
     this.parties = Parties.find();
-- 
2.7.4


From ea26d483fe19d8ef99a1ebcda48e0c6f6737f875 Mon Sep 17 00:00:00 2001
From: dotansimha <dotansimha@gmail.com>
Date: Fri, 6 May 2016 21:45:27 +0300
Subject: [PATCH 055/171] Step 7.4: correct party property to be of Party type

---
 client/imports/party-details/party-details.ts | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/client/imports/party-details/party-details.ts b/client/imports/party-details/party-details.ts
index 68a032f..9f8dd83 100644
--- a/client/imports/party-details/party-details.ts
+++ b/client/imports/party-details/party-details.ts
@@ -9,7 +9,7 @@ import {Parties} from '../../../collections/parties.ts';
   directives: [RouterLink]
 })
 export class PartyDetails {
-  party: Object;
+  party: Party;
 
   constructor(params: RouteParams, ngZone: NgZone) {
     var partyId = params.get('partyId');
-- 
2.7.4


From 9a04bb64e303784ef4b2cec376c9dbfb120c439f Mon Sep 17 00:00:00 2001
From: Uri Goldshtein <uri.goldshtein@gmail.com>
Date: Sat, 14 May 2016 15:32:15 +0300
Subject: [PATCH 056/171] Step 8.0: Add accounts packages from atmosphere

---
 .meteor/packages |  2 +-
 .meteor/versions | 11 ++++++++++-
 2 files changed, 11 insertions(+), 2 deletions(-)

diff --git a/.meteor/packages b/.meteor/packages
index db449bd..24ed442 100644
--- a/.meteor/packages
+++ b/.meteor/packages
@@ -16,6 +16,6 @@ es5-shim                # ECMAScript 5 compatibility for older browsers.
 ecmascript              # Enable ECMAScript2015+ syntax in app code
 
 autopublish             # Publish all data to the clients (for prototyping)
-insecure                # Allow all DB writes from clients (for prototyping)
 angular2-compilers
 barbatus:angular2-runtime
+accounts-password
diff --git a/.meteor/versions b/.meteor/versions
index 96a6210..d359ca8 100644
--- a/.meteor/versions
+++ b/.meteor/versions
@@ -1,3 +1,5 @@
+accounts-base@1.2.7
+accounts-password@1.1.8
 allow-deny@1.0.4
 angular2-compilers@0.5.6
 angular2-html-templates@0.5.2
@@ -20,12 +22,14 @@ check@1.2.1
 ddp@1.2.5
 ddp-client@1.2.7
 ddp-common@1.2.5
+ddp-rate-limiter@1.0.4
 ddp-server@1.2.6
 deps@1.0.12
 diff-sequence@1.0.5
 ecmascript@0.4.3
 ecmascript-runtime@0.2.10
 ejson@1.0.11
+email@1.0.12
 es5-shim@4.5.10
 fastclick@1.0.11
 geojson-utils@1.0.8
@@ -34,10 +38,10 @@ html-tools@1.0.9
 htmljs@1.0.9
 http@1.1.5
 id-map@1.0.7
-insecure@1.0.7
 jquery@1.11.8
 launch-screen@1.0.11
 livedata@1.0.18
+localstorage@1.0.9
 logging@1.0.12
 meteor@1.1.14
 meteor-base@1.0.4
@@ -50,19 +54,24 @@ modules@0.6.1
 modules-runtime@0.6.3
 mongo@1.1.7
 mongo-id@1.0.4
+npm-bcrypt@0.8.5
 npm-mongo@1.4.43
 observe-sequence@1.0.11
 ordered-dict@1.0.7
 promise@0.6.7
 random@1.0.9
+rate-limit@1.0.4
 reactive-dict@1.1.7
 reactive-var@1.0.9
 reload@1.1.8
 retry@1.0.7
 routepolicy@1.0.10
+service-configuration@1.0.9
 session@1.1.5
+sha@1.0.7
 spacebars@1.0.11
 spacebars-compiler@1.0.11
+srp@1.0.8
 standard-minifier-css@1.0.6
 standard-minifier-js@1.0.6
 standard-minifiers@1.0.6
-- 
2.7.4


From 36f40d4469bb0b95b95162bde39195c6b56cb759 Mon Sep 17 00:00:00 2001
From: Uri Goldshtein <uri.goldshtein@gmail.com>
Date: Sat, 14 May 2016 15:33:14 +0300
Subject: [PATCH 057/171] Step 8.1: Add accounts ui package from NPM

---
 package.json | 1 +
 1 file changed, 1 insertion(+)

diff --git a/package.json b/package.json
index 3b6899e..6d80ac6 100644
--- a/package.json
+++ b/package.json
@@ -12,6 +12,7 @@
     "@angular/platform-browser-dynamic": "2.0.0-rc.1",
     "@angular/router-deprecated": "^2.0.0-rc.1",
     "angular2-meteor": "0.5.5",
+    "angular2-meteor-accounts-ui": "0.4.3",
     "angular2-meteor-auto-bootstrap": "0.5.5",
     "es6-shim": "0.35.1",
     "meteor-node-stubs": "^0.2.3",
-- 
2.7.4


From 76f7a4dc727f69f43210b8ca4ebd684ac823d436 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 28 Jan 2016 23:14:09 +0200
Subject: [PATCH 058/171] Step 8.2: add Accounts UI component to the
 PartiesList template

---
 client/imports/parties-list/parties-list.html | 1 +
 1 file changed, 1 insertion(+)

diff --git a/client/imports/parties-list/parties-list.html b/client/imports/parties-list/parties-list.html
index a149764..3af9e00 100644
--- a/client/imports/parties-list/parties-list.html
+++ b/client/imports/parties-list/parties-list.html
@@ -1,5 +1,6 @@
 <div>
   <parties-form></parties-form>
+  <login-buttons></login-buttons>
   <ul>
     <li *ngFor="let party of parties">
       <a [routerLink]="['/PartyDetails', {partyId: party._id}]">{{party.name}}</a>
-- 
2.7.4


From 908aec9f92412187297ffddb7267253a94e2bdf3 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 28 Jan 2016 23:16:21 +0200
Subject: [PATCH 059/171] Step 8.3: import dependencies

---
 .meteor/packages                            | 1 +
 .meteor/versions                            | 1 +
 client/imports/parties-list/parties-list.ts | 4 ++--
 3 files changed, 4 insertions(+), 2 deletions(-)

diff --git a/.meteor/packages b/.meteor/packages
index 24ed442..753b279 100644
--- a/.meteor/packages
+++ b/.meteor/packages
@@ -19,3 +19,4 @@ autopublish             # Publish all data to the clients (for prototyping)
 angular2-compilers
 barbatus:angular2-runtime
 accounts-password
+fourseven:scss
diff --git a/.meteor/versions b/.meteor/versions
index d359ca8..8eeba49 100644
--- a/.meteor/versions
+++ b/.meteor/versions
@@ -32,6 +32,7 @@ ejson@1.0.11
 email@1.0.12
 es5-shim@4.5.10
 fastclick@1.0.11
+fourseven:scss@3.4.3
 geojson-utils@1.0.8
 hot-code-push@1.0.4
 html-tools@1.0.9
diff --git a/client/imports/parties-list/parties-list.ts b/client/imports/parties-list/parties-list.ts
index cbc9bb2..bd6e7a4 100644
--- a/client/imports/parties-list/parties-list.ts
+++ b/client/imports/parties-list/parties-list.ts
@@ -3,12 +3,12 @@ import { Parties }     from '../../../collections/parties';
 import { PartiesForm } from '../parties-form/parties-form';
 import { Mongo }       from 'meteor/mongo';
 import { RouterLink }  from '@angular/router-deprecated';
-
+import { LoginButtons } from 'angular2-meteor-accounts-ui';
 
 @Component({
   selector: 'parties-list',
   templateUrl: '/client/imports/parties-list/parties-list.html',
-  directives: [PartiesForm, RouterLink]
+  directives: [PartiesForm, RouterLink, LoginButtons]
 })
 export class PartiesList {
   parties: Mongo.Cursor<Party>;
-- 
2.7.4


From 7aa45ed129f05402b4508a97483d5e79508fbdc1 Mon Sep 17 00:00:00 2001
From: dotansimha <dotansimha@gmail.com>
Date: Sun, 15 May 2016 21:52:40 +0300
Subject: [PATCH 060/171] Step 8.4: Add import for SCSS file

---
 client/css/main.scss | 1 +
 1 file changed, 1 insertion(+)
 create mode 100644 client/css/main.scss

diff --git a/client/css/main.scss b/client/css/main.scss
new file mode 100644
index 0000000..a7ccb1a
--- /dev/null
+++ b/client/css/main.scss
@@ -0,0 +1 @@
+@import "{}/node_modules/angular2-meteor-accounts-ui/build/login-buttons.scss";
-- 
2.7.4


From 3a8039a7344bb6d6232c3237dab9ed739e003667 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 28 Jan 2016 23:16:57 +0200
Subject: [PATCH 061/171] Step 8.5: add parties collection security

---
 collections/parties.ts | 19 +++++++++++++++++++
 1 file changed, 19 insertions(+)

diff --git a/collections/parties.ts b/collections/parties.ts
index 20143a6..167fa10 100644
--- a/collections/parties.ts
+++ b/collections/parties.ts
@@ -1,3 +1,22 @@
 import {Mongo} from 'meteor/mongo';
+import {Meteor} from 'meteor/meteor';
 
 export let Parties = new Mongo.Collection<Party>('parties');
+
+Parties.allow({
+  insert: function() {
+    let user = Meteor.user();
+    
+    return !!user;
+  },
+  update: function() {
+    let user = Meteor.user();
+    
+    return !!user;
+  },
+  remove: function() {
+    let user = Meteor.user();
+    
+    return !!user;
+  }
+});
-- 
2.7.4


From d9fb3772ae72731c4a5e27cb168602c07c2ccf10 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 28 Jan 2016 23:17:48 +0200
Subject: [PATCH 062/171] Step 8.6: check access and add party owner ID

---
 client/imports/parties-form/parties-form.ts | 22 ++++++++++++++--------
 1 file changed, 14 insertions(+), 8 deletions(-)

diff --git a/client/imports/parties-form/parties-form.ts b/client/imports/parties-form/parties-form.ts
index 3fc7528..24ab7ba 100644
--- a/client/imports/parties-form/parties-form.ts
+++ b/client/imports/parties-form/parties-form.ts
@@ -2,6 +2,7 @@ import 'reflect-metadata';
 import { Component } from '@angular/core';
 import { FormBuilder, ControlGroup, Validators, Control } from '@angular/common';
 import { Parties } from '../../../collections/parties.ts';
+import { Meteor } from 'meteor/meteor';
 
 @Component({
   selector: 'parties-form',
@@ -22,15 +23,20 @@ export class PartiesForm {
 
   addParty(party) {
     if (this.partiesForm.valid) {
-      Parties.insert({
-        name: party.name,
-        description: party.description,
-        location: party.location
-      });
+      if (Meteor.userId()) {
+        Parties.insert({
+          name: party.name,
+          description: party.description,
+          location: party.location,
+          owner: Meteor.userId()
+        });
 
-      (<Control>this.partiesForm.controls['name']).updateValue('');
-      (<Control>this.partiesForm.controls['description']).updateValue('');
-      (<Control>this.partiesForm.controls['location']).updateValue('');
+        (<Control>this.partiesForm.controls['name']).updateValue('');
+        (<Control>this.partiesForm.controls['description']).updateValue('');
+        (<Control>this.partiesForm.controls['location']).updateValue('');
+      } else {
+        alert('Please log in to add a party');
+      }
     }
   }
 }
\ No newline at end of file
-- 
2.7.4


From 778b3bf6dd861489c9061db3f80e08fa71cf70c7 Mon Sep 17 00:00:00 2001
From: dotansimha <dotansimha@gmail.com>
Date: Fri, 6 May 2016 21:48:19 +0300
Subject: [PATCH 063/171] Step 8.7: check access to change party

---
 client/imports/party-details/party-details.ts | 19 ++++++++++++-------
 1 file changed, 12 insertions(+), 7 deletions(-)

diff --git a/client/imports/party-details/party-details.ts b/client/imports/party-details/party-details.ts
index 9f8dd83..18faa82 100644
--- a/client/imports/party-details/party-details.ts
+++ b/client/imports/party-details/party-details.ts
@@ -2,6 +2,7 @@ import { Component, NgZone } from '@angular/core';
 import { RouteParams, RouterLink } from '@angular/router-deprecated';
 import { Tracker } from 'meteor/tracker';
 import {Parties} from '../../../collections/parties.ts';
+import { Meteor } from 'meteor/meteor';
 
 @Component({
   selector: 'party-details',
@@ -22,12 +23,16 @@ export class PartyDetails {
   }
 
   saveParty(party) {
-    Parties.update(party._id, {
-      $set: {
-        name: party.name,
-        description: party.description,
-        location: party.location
-      }
-    });
+    if (Meteor.userId()) {
+      Parties.update(party._id, {
+        $set: {
+          name: party.name,
+          description: party.description,
+          location: party.location
+        }
+      });
+    } else {
+      alert('Please log in to change this party');
+    }
   }
 }
-- 
2.7.4


From 0acdeacaff0bef07dd52500a9e50d487a69c101b Mon Sep 17 00:00:00 2001
From: dotansimha <dotansimha@gmail.com>
Date: Fri, 6 May 2016 21:48:44 +0300
Subject: [PATCH 064/171] Step 8.8: Updated typings

---
 typings/party.d.ts | 1 +
 1 file changed, 1 insertion(+)

diff --git a/typings/party.d.ts b/typings/party.d.ts
index 82919d0..a503ec1 100644
--- a/typings/party.d.ts
+++ b/typings/party.d.ts
@@ -3,4 +3,5 @@ interface Party {
   name: string;
   description?: string;
   location: string;
+  owner?: string;
 }
\ No newline at end of file
-- 
2.7.4


From c26be8f22457d07a44df5d6dc1962d3a217fdf48 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 4 Feb 2016 00:05:06 +0200
Subject: [PATCH 065/171] Step 8.9: require user to access PartyDetails

---
 client/imports/party-details/party-details.ts | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/client/imports/party-details/party-details.ts b/client/imports/party-details/party-details.ts
index 18faa82..abe5f3f 100644
--- a/client/imports/party-details/party-details.ts
+++ b/client/imports/party-details/party-details.ts
@@ -3,12 +3,14 @@ import { RouteParams, RouterLink } from '@angular/router-deprecated';
 import { Tracker } from 'meteor/tracker';
 import {Parties} from '../../../collections/parties.ts';
 import { Meteor } from 'meteor/meteor';
+import { RequireUser } from 'angular2-meteor-accounts-ui';
 
 @Component({
   selector: 'party-details',
   templateUrl: '/client/imports/party-details/party-details.html',
   directives: [RouterLink]
 })
+@RequireUser()
 export class PartyDetails {
   party: Party;
 
-- 
2.7.4


From 6fbfbb96aad62c235be021ef12ab4bd6995ee73f Mon Sep 17 00:00:00 2001
From: Uri Goldshtein <uri.goldshtein@gmail.com>
Date: Sat, 14 May 2016 16:02:32 +0300
Subject: [PATCH 066/171] Step 9.0: Removed autopublish

---
 .meteor/packages | 1 -
 .meteor/versions | 1 -
 2 files changed, 2 deletions(-)

diff --git a/.meteor/packages b/.meteor/packages
index 753b279..58b1017 100644
--- a/.meteor/packages
+++ b/.meteor/packages
@@ -15,7 +15,6 @@ standard-minifiers      # JS/CSS minifiers run for production mode
 es5-shim                # ECMAScript 5 compatibility for older browsers.
 ecmascript              # Enable ECMAScript2015+ syntax in app code
 
-autopublish             # Publish all data to the clients (for prototyping)
 angular2-compilers
 barbatus:angular2-runtime
 accounts-password
diff --git a/.meteor/versions b/.meteor/versions
index 8eeba49..034c094 100644
--- a/.meteor/versions
+++ b/.meteor/versions
@@ -3,7 +3,6 @@ accounts-password@1.1.8
 allow-deny@1.0.4
 angular2-compilers@0.5.6
 angular2-html-templates@0.5.2
-autopublish@1.0.7
 autoupdate@1.2.9
 babel-compiler@6.6.4
 babel-runtime@0.1.8
-- 
2.7.4


From d5978992b71934776df026e441132eec1260d3df Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 28 Jan 2016 23:22:04 +0200
Subject: [PATCH 067/171] Step 9.1: publish parties collection

---
 server/parties.ts | 6 ++++++
 1 file changed, 6 insertions(+)
 create mode 100644 server/parties.ts

diff --git a/server/parties.ts b/server/parties.ts
new file mode 100644
index 0000000..24e96e5
--- /dev/null
+++ b/server/parties.ts
@@ -0,0 +1,6 @@
+import {Parties} from '../collections/parties';
+import {Meteor} from 'meteor/meteor';
+
+Meteor.publish('parties', function() {
+  return Parties.find();
+});
\ No newline at end of file
-- 
2.7.4


From ca659141fb6fc41a9fc7f664caa1f2cfac5a227a Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 28 Jan 2016 23:22:36 +0200
Subject: [PATCH 068/171] Step 9.2: import parties publications on the server

---
 server/main.ts | 1 +
 1 file changed, 1 insertion(+)

diff --git a/server/main.ts b/server/main.ts
index cdda65d..7330ae5 100644
--- a/server/main.ts
+++ b/server/main.ts
@@ -1,4 +1,5 @@
 import {loadParties} from './load-parties.ts';
 import {Meteor} from 'meteor/meteor';
+import './parties.ts';
 
 Meteor.startup(loadParties);
\ No newline at end of file
-- 
2.7.4


From e82655f14297832030a6bcd8c0b39587ad6fc3a2 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 28 Jan 2016 23:24:12 +0200
Subject: [PATCH 069/171] Step 9.3: extend PartiesList and make use of
 subscribe method

---
 client/imports/parties-list/parties-list.ts | 8 ++++++--
 1 file changed, 6 insertions(+), 2 deletions(-)

diff --git a/client/imports/parties-list/parties-list.ts b/client/imports/parties-list/parties-list.ts
index bd6e7a4..a20607f 100644
--- a/client/imports/parties-list/parties-list.ts
+++ b/client/imports/parties-list/parties-list.ts
@@ -4,17 +4,21 @@ import { PartiesForm } from '../parties-form/parties-form';
 import { Mongo }       from 'meteor/mongo';
 import { RouterLink }  from '@angular/router-deprecated';
 import { LoginButtons } from 'angular2-meteor-accounts-ui';
+import { MeteorComponent } from 'angular2-meteor';
 
 @Component({
   selector: 'parties-list',
   templateUrl: '/client/imports/parties-list/parties-list.html',
   directives: [PartiesForm, RouterLink, LoginButtons]
 })
-export class PartiesList {
+export class PartiesList extends MeteorComponent{
   parties: Mongo.Cursor<Party>;
 
   constructor() {
-    this.parties = Parties.find();
+    super();
+    this.subscribe('parties', () => {
+      this.parties = Parties.find();
+    }, true);
   }
 
   removeParty(party) {
-- 
2.7.4


From 40aa8ae473ef9dccb6527f54efee29ba4b8f1c53 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 28 Jan 2016 23:24:47 +0200
Subject: [PATCH 070/171] Step 9.4: add "Public" checkbox

---
 client/imports/parties-form/parties-form.html | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/client/imports/parties-form/parties-form.html b/client/imports/parties-form/parties-form.html
index 754b9ff..1dc86c7 100644
--- a/client/imports/parties-form/parties-form.html
+++ b/client/imports/parties-form/parties-form.html
@@ -6,4 +6,6 @@
   <label>Location</label>
   <input type="text" ngControl="location">
   <button>Add</button>
+  <label>Public</label>
+  <input type="checkbox" ngControl="public">
 </form>
\ No newline at end of file
-- 
2.7.4


From 1f68b5653496e9455acf66bc4f816542026a6eed Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 28 Jan 2016 23:26:03 +0200
Subject: [PATCH 071/171] Step 9.5: update PartiesForm component

---
 client/imports/parties-form/parties-form.ts | 7 +++++--
 typings/party.d.ts                          | 1 +
 2 files changed, 6 insertions(+), 2 deletions(-)

diff --git a/client/imports/parties-form/parties-form.ts b/client/imports/parties-form/parties-form.ts
index 24ab7ba..1e89ddb 100644
--- a/client/imports/parties-form/parties-form.ts
+++ b/client/imports/parties-form/parties-form.ts
@@ -17,23 +17,26 @@ export class PartiesForm {
     this.partiesForm = fb.group({
       name: ['', Validators.required],
       description: [''],
-      location: ['', Validators.required]
+      location: ['', Validators.required],
+      'public': [false]
     });
   }
 
   addParty(party) {
     if (this.partiesForm.valid) {
       if (Meteor.userId()) {
-        Parties.insert({
+        Parties.insert(<Party>{
           name: party.name,
           description: party.description,
           location: party.location,
+          'public': party.public,
           owner: Meteor.userId()
         });
 
         (<Control>this.partiesForm.controls['name']).updateValue('');
         (<Control>this.partiesForm.controls['description']).updateValue('');
         (<Control>this.partiesForm.controls['location']).updateValue('');
+        (<Control>this.partiesForm.controls['public']).updateValue(false);
       } else {
         alert('Please log in to add a party');
       }
diff --git a/typings/party.d.ts b/typings/party.d.ts
index a503ec1..6ebcc01 100644
--- a/typings/party.d.ts
+++ b/typings/party.d.ts
@@ -4,4 +4,5 @@ interface Party {
   description?: string;
   location: string;
   owner?: string;
+  public: boolean;
 }
\ No newline at end of file
-- 
2.7.4


From 6e38072f99c4cfa44b8404a30e80757c59940d29 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 28 Jan 2016 23:26:35 +0200
Subject: [PATCH 072/171] Step 9.6: add public field to the initial parties

---
 server/load-parties.ts | 9 ++++++---
 1 file changed, 6 insertions(+), 3 deletions(-)

diff --git a/server/load-parties.ts b/server/load-parties.ts
index 9e0751c..68adcf7 100644
--- a/server/load-parties.ts
+++ b/server/load-parties.ts
@@ -7,17 +7,20 @@ export function loadParties() {
       {
         'name': 'Dubstep-Free Zone',
         'description': 'Can we please just for an evening not listen to dubstep.',
-        'location': 'Palo Alto'
+        'location': 'Palo Alto',
+        'public': true
       },
       {
         'name': 'All dubstep all the time',
         'description': 'Get it on!',
-        'location': 'Palo Alto'
+        'location': 'Palo Alto',
+        'public': true
       },
       {
         'name': 'Savage lounging',
         'description': 'Leisure suit required. And only fiercest manners.',
-        'location': 'San Francisco'
+        'location': 'San Francisco',
+        'public': false
       }
     ];
 
-- 
2.7.4


From 9517c1867fb5769670b8fb8ec7499dde6235461c Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 28 Jan 2016 23:27:18 +0200
Subject: [PATCH 073/171] Step 9.7: limit data sent to the client

---
 server/parties.ts | 12 +++++++++++-
 1 file changed, 11 insertions(+), 1 deletion(-)

diff --git a/server/parties.ts b/server/parties.ts
index 24e96e5..c7c7552 100644
--- a/server/parties.ts
+++ b/server/parties.ts
@@ -2,5 +2,15 @@ import {Parties} from '../collections/parties';
 import {Meteor} from 'meteor/meteor';
 
 Meteor.publish('parties', function() {
-  return Parties.find();
+  return Parties.find({
+    $or: [
+      { 'public': true },
+      {
+        $and: [
+          { owner: this.userId },
+          { owner: { $exists: true } }
+        ]
+      }
+    ]
+  });
 });
\ No newline at end of file
-- 
2.7.4


From 1e46c768b3d2cea39d218800bc54fd795f08ad4e Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 28 Jan 2016 23:27:50 +0200
Subject: [PATCH 074/171] Step 9.8: add "party" publication

---
 server/parties.ts | 20 +++++++++++++++++---
 1 file changed, 17 insertions(+), 3 deletions(-)

diff --git a/server/parties.ts b/server/parties.ts
index c7c7552..8345468 100644
--- a/server/parties.ts
+++ b/server/parties.ts
@@ -1,8 +1,8 @@
 import {Parties} from '../collections/parties';
 import {Meteor} from 'meteor/meteor';
 
-Meteor.publish('parties', function() {
-  return Parties.find({
+function buildQuery(partyId?: string): Object {
+  var isAvailable = {
     $or: [
       { 'public': true },
       {
@@ -12,5 +12,19 @@ Meteor.publish('parties', function() {
         ]
       }
     ]
-  });
+  };
+
+  if (partyId) {
+    return { $and: [{ _id: partyId }, isAvailable] };
+  }
+
+  return isAvailable;
+}
+
+Meteor.publish('parties', function() {
+  return Parties.find(buildQuery.call(this));
+});
+
+Meteor.publish('party', function(partyId: string) {
+  return Parties.find(buildQuery.call(this, partyId));
 });
\ No newline at end of file
-- 
2.7.4


From cdfca2be387bbb033c07e2ef461883aad7848455 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 28 Jan 2016 23:29:31 +0200
Subject: [PATCH 075/171] Step 9.9: subscribe to the "party" publication

---
 client/imports/party-details/party-details.ts | 17 ++++++++---------
 1 file changed, 8 insertions(+), 9 deletions(-)

diff --git a/client/imports/party-details/party-details.ts b/client/imports/party-details/party-details.ts
index abe5f3f..e383eae 100644
--- a/client/imports/party-details/party-details.ts
+++ b/client/imports/party-details/party-details.ts
@@ -1,9 +1,9 @@
-import { Component, NgZone } from '@angular/core';
+import { Component } from '@angular/core';
 import { RouteParams, RouterLink } from '@angular/router-deprecated';
-import { Tracker } from 'meteor/tracker';
 import {Parties} from '../../../collections/parties.ts';
 import { Meteor } from 'meteor/meteor';
 import { RequireUser } from 'angular2-meteor-accounts-ui';
+import { MeteorComponent } from 'angular2-meteor';
 
 @Component({
   selector: 'party-details',
@@ -11,17 +11,16 @@ import { RequireUser } from 'angular2-meteor-accounts-ui';
   directives: [RouterLink]
 })
 @RequireUser()
-export class PartyDetails {
+export class PartyDetails extends MeteorComponent {
   party: Party;
 
-  constructor(params: RouteParams, ngZone: NgZone) {
+  constructor(params: RouteParams) {
+    super();
     var partyId = params.get('partyId');
 
-    Tracker.autorun(() => {
-      ngZone.run(() => {
-        this.party = Parties.findOne(partyId);
-      });
-    });
+    this.subscribe('party', partyId, () => {
+      this.party = Parties.findOne(partyId);
+    }, true);
   }
 
   saveParty(party) {
-- 
2.7.4


From d014f8ee5c6ff969283f25bf1d8549388be08115 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 28 Jan 2016 23:29:57 +0200
Subject: [PATCH 076/171] Step 9.10: show PartyDetails when the party is loaded

---
 client/imports/party-details/party-details.html | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/client/imports/party-details/party-details.html b/client/imports/party-details/party-details.html
index 61fda60..58168fc 100644
--- a/client/imports/party-details/party-details.html
+++ b/client/imports/party-details/party-details.html
@@ -1,4 +1,4 @@
-<form (submit)="saveParty(party)">
+<form (submit)="saveParty(party)" *ngIf="party">
   <label>Name</label>
   <input type="text" [(ngModel)]="party.name">
 
-- 
2.7.4


From 540e81e7c5a2ce0b87f78eaf67a9b300f2ce7baf Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 28 Jan 2016 23:30:38 +0200
Subject: [PATCH 077/171] Step 9.11: add search inputs

---
 client/imports/parties-list/parties-list.html | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/client/imports/parties-list/parties-list.html b/client/imports/parties-list/parties-list.html
index 3af9e00..6866114 100644
--- a/client/imports/parties-list/parties-list.html
+++ b/client/imports/parties-list/parties-list.html
@@ -1,5 +1,7 @@
 <div>
-  <parties-form></parties-form>
+  <parties-form style="float: left"></parties-form>
+  <input type="text" #searchtext placeholder="Search by Location">
+  <button type="button" (click)="search(searchtext.value)">Search</button>
   <login-buttons></login-buttons>
   <ul>
     <li *ngFor="let party of parties">
-- 
2.7.4


From db68bbb3ec90569fb43a354799ab512ec6165cdf Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 28 Jan 2016 23:31:13 +0200
Subject: [PATCH 078/171] Step 9.12: add search click event handler

---
 client/imports/parties-list/parties-list.ts | 8 ++++++++
 1 file changed, 8 insertions(+)

diff --git a/client/imports/parties-list/parties-list.ts b/client/imports/parties-list/parties-list.ts
index a20607f..f61a359 100644
--- a/client/imports/parties-list/parties-list.ts
+++ b/client/imports/parties-list/parties-list.ts
@@ -24,4 +24,12 @@ export class PartiesList extends MeteorComponent{
   removeParty(party) {
     Parties.remove(party._id);
   }
+
+  search(value: string) {
+    if (value) {
+      this.parties = Parties.find({ location: value });
+    } else {
+      this.parties = Parties.find();
+    }
+  }
 }
\ No newline at end of file
-- 
2.7.4


From d769d4e5d0776760f2761af6f8766be1f2d98a8f Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 28 Jan 2016 23:32:09 +0200
Subject: [PATCH 079/171] Step 12.1: add options to the parties publication

---
 server/parties.ts | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/server/parties.ts b/server/parties.ts
index 8345468..5b9cb4f 100644
--- a/server/parties.ts
+++ b/server/parties.ts
@@ -21,8 +21,8 @@ function buildQuery(partyId?: string): Object {
   return isAvailable;
 }
 
-Meteor.publish('parties', function() {
-  return Parties.find(buildQuery.call(this));
+Meteor.publish('parties', function(options: Object) {
+  return Parties.find(buildQuery.call(this), options);
 });
 
 Meteor.publish('party', function(partyId: string) {
-- 
2.7.4


From ecf16bd50cf7dd858c9ceb21ec3f7c7beef5a6aa Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 28 Jan 2016 23:33:12 +0200
Subject: [PATCH 080/171] Step 12.2: create options and add them to the parties
 subscription

---
 client/imports/parties-list/parties-list.ts | 12 +++++++++++-
 1 file changed, 11 insertions(+), 1 deletion(-)

diff --git a/client/imports/parties-list/parties-list.ts b/client/imports/parties-list/parties-list.ts
index f61a359..e8bbb0f 100644
--- a/client/imports/parties-list/parties-list.ts
+++ b/client/imports/parties-list/parties-list.ts
@@ -13,10 +13,20 @@ import { MeteorComponent } from 'angular2-meteor';
 })
 export class PartiesList extends MeteorComponent{
   parties: Mongo.Cursor<Party>;
+  pageSize: number = 10;
+  curPage: number = 1;
+  nameOrder: number = 1;
 
   constructor() {
     super();
-    this.subscribe('parties', () => {
+
+    let options = {
+      limit: this.pageSize,
+      skip: (this.curPage - 1) * this.pageSize,
+      sort: { name: this.nameOrder }
+    };
+
+    this.subscribe('parties', options, () => {
       this.parties = Parties.find();
     }, true);
   }
-- 
2.7.4


From 8d92045d9b8eb81cd9b0aa657b4fb115d303d948 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 28 Jan 2016 23:33:40 +0200
Subject: [PATCH 081/171] Step 12.3: add sorting by party name to PartiesList

---
 client/imports/parties-list/parties-list.ts | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/client/imports/parties-list/parties-list.ts b/client/imports/parties-list/parties-list.ts
index e8bbb0f..3bdc544 100644
--- a/client/imports/parties-list/parties-list.ts
+++ b/client/imports/parties-list/parties-list.ts
@@ -27,7 +27,7 @@ export class PartiesList extends MeteorComponent{
     };
 
     this.subscribe('parties', options, () => {
-      this.parties = Parties.find();
+      this.parties = Parties.find({}, {sort: { name: this.nameOrder }});
     }, true);
   }
 
-- 
2.7.4


From c773f8b2e7509f50ae5cc6a901fdbe4a78c4edf7 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 28 Jan 2016 23:34:40 +0200
Subject: [PATCH 082/171] Step 12.4: re-subscribe on current page changes
 reactively

---
 client/imports/parties-list/parties-list.ts | 20 +++++++++++---------
 1 file changed, 11 insertions(+), 9 deletions(-)

diff --git a/client/imports/parties-list/parties-list.ts b/client/imports/parties-list/parties-list.ts
index 3bdc544..a434162 100644
--- a/client/imports/parties-list/parties-list.ts
+++ b/client/imports/parties-list/parties-list.ts
@@ -14,21 +14,23 @@ import { MeteorComponent } from 'angular2-meteor';
 export class PartiesList extends MeteorComponent{
   parties: Mongo.Cursor<Party>;
   pageSize: number = 10;
-  curPage: number = 1;
+  curPage: ReactiveVar<number> = new ReactiveVar<number>(1);
   nameOrder: number = 1;
 
   constructor() {
     super();
 
-    let options = {
-      limit: this.pageSize,
-      skip: (this.curPage - 1) * this.pageSize,
-      sort: { name: this.nameOrder }
-    };
+    this.autorun(() => {
+      let options = {
+        limit: this.pageSize,
+        skip: (this.curPage.get() - 1) * this.pageSize,
+        sort: { name: this.nameOrder }
+      };
 
-    this.subscribe('parties', options, () => {
-      this.parties = Parties.find({}, {sort: { name: this.nameOrder }});
-    }, true);
+      this.subscribe('parties', options, () => {
+        this.parties = Parties.find({}, { sort: { name: this.nameOrder } });
+      }, true);
+    });
   }
 
   removeParty(party) {
-- 
2.7.4


From 6d77312058c3de9f96f6c2805f472438cf58211c Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Fri, 29 Jan 2016 00:16:46 +0200
Subject: [PATCH 083/171] Step 12.5: Add reactive var package

---
 .meteor/packages | 1 +
 1 file changed, 1 insertion(+)

diff --git a/.meteor/packages b/.meteor/packages
index 58b1017..8db539b 100644
--- a/.meteor/packages
+++ b/.meteor/packages
@@ -19,3 +19,4 @@ angular2-compilers
 barbatus:angular2-runtime
 accounts-password
 fourseven:scss
+reactive-var
-- 
2.7.4


From 56aac17cba51fa31d7547eb203784d802f4b36a1 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Fri, 29 Jan 2016 00:19:23 +0200
Subject: [PATCH 084/171] Step 12.6: Import reactive var from meteor

---
 client/imports/parties-list/parties-list.ts | 1 +
 1 file changed, 1 insertion(+)

diff --git a/client/imports/parties-list/parties-list.ts b/client/imports/parties-list/parties-list.ts
index a434162..d65e55d 100644
--- a/client/imports/parties-list/parties-list.ts
+++ b/client/imports/parties-list/parties-list.ts
@@ -5,6 +5,7 @@ import { Mongo }       from 'meteor/mongo';
 import { RouterLink }  from '@angular/router-deprecated';
 import { LoginButtons } from 'angular2-meteor-accounts-ui';
 import { MeteorComponent } from 'angular2-meteor';
+import { ReactiveVar } from 'meteor/reactive-var';
 
 @Component({
   selector: 'parties-list',
-- 
2.7.4


From e6affcae2acb873081eacae60ec9880de202337b Mon Sep 17 00:00:00 2001
From: Uri Goldshtein <uri.goldshtein@gmail.com>
Date: Sat, 14 May 2016 17:29:11 +0300
Subject: [PATCH 085/171] Step 12.7: Add dependency for the pagination package

---
 package.json | 1 +
 1 file changed, 1 insertion(+)

diff --git a/package.json b/package.json
index 6d80ac6..0708488 100644
--- a/package.json
+++ b/package.json
@@ -14,6 +14,7 @@
     "angular2-meteor": "0.5.5",
     "angular2-meteor-accounts-ui": "0.4.3",
     "angular2-meteor-auto-bootstrap": "0.5.5",
+    "angular2-pagination": "0.2.1",
     "es6-shim": "0.35.1",
     "meteor-node-stubs": "^0.2.3",
     "reflect-metadata": "0.1.2",
-- 
2.7.4


From 130de467402761d1a90f41c2807cd4ce4097540e Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Fri, 29 Jan 2016 00:23:44 +0200
Subject: [PATCH 086/171] Step 12.8: import and set up pagination components

---
 client/css/main.scss                        | 1 +
 client/imports/parties-list/parties-list.ts | 5 ++++-
 2 files changed, 5 insertions(+), 1 deletion(-)

diff --git a/client/css/main.scss b/client/css/main.scss
index a7ccb1a..a3dd324 100644
--- a/client/css/main.scss
+++ b/client/css/main.scss
@@ -1 +1,2 @@
 @import "{}/node_modules/angular2-meteor-accounts-ui/build/login-buttons.scss";
+@import "{}/node_modules/angular2-pagination/build/pagination-controls-cmp.scss";
\ No newline at end of file
diff --git a/client/imports/parties-list/parties-list.ts b/client/imports/parties-list/parties-list.ts
index d65e55d..2915764 100644
--- a/client/imports/parties-list/parties-list.ts
+++ b/client/imports/parties-list/parties-list.ts
@@ -6,11 +6,14 @@ import { RouterLink }  from '@angular/router-deprecated';
 import { LoginButtons } from 'angular2-meteor-accounts-ui';
 import { MeteorComponent } from 'angular2-meteor';
 import { ReactiveVar } from 'meteor/reactive-var';
+import { PaginationService, PaginatePipe, PaginationControlsCmp } from 'angular2-pagination';
 
 @Component({
   selector: 'parties-list',
+  viewProviders: [PaginationService],
   templateUrl: '/client/imports/parties-list/parties-list.html',
-  directives: [PartiesForm, RouterLink, LoginButtons]
+  directives: [PartiesForm, RouterLink, LoginButtons, PaginationControlsCmp],
+  pipes: [PaginatePipe]
 })
 export class PartiesList extends MeteorComponent{
   parties: Mongo.Cursor<Party>;
-- 
2.7.4


From 8f250b1bca294a89bb5250b44a0035ef5f5f5d9a Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Wed, 3 Feb 2016 22:00:29 +0200
Subject: [PATCH 087/171] Step 12.9: add pagination markup to the PartiesList's
 template

---
 client/imports/parties-list/parties-list.html | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/client/imports/parties-list/parties-list.html b/client/imports/parties-list/parties-list.html
index 6866114..79dcaa8 100644
--- a/client/imports/parties-list/parties-list.html
+++ b/client/imports/parties-list/parties-list.html
@@ -4,11 +4,12 @@
   <button type="button" (click)="search(searchtext.value)">Search</button>
   <login-buttons></login-buttons>
   <ul>
-    <li *ngFor="let party of parties">
+    <li *ngFor="let party of parties | paginate:{currentPage: 1, itemsPerPage: pageSize, totalItems: 30}">
       <a [routerLink]="['/PartyDetails', {partyId: party._id}]">{{party.name}}</a>
       <p>{{party.description}}</p>
       <p>{{party.location}}</p>
       <button (click)="removeParty(party)">X</button>
     </li>
   </ul>
+  <pagination-controls></pagination-controls>
 </div>
\ No newline at end of file
-- 
2.7.4


From c250b418a4949d20796f45529f24bb4cd5911aca Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Wed, 3 Feb 2016 22:00:55 +0200
Subject: [PATCH 088/171] Step 12.10: handle page changed event of the
 pagination controls

---
 client/imports/parties-list/parties-list.html | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/client/imports/parties-list/parties-list.html b/client/imports/parties-list/parties-list.html
index 79dcaa8..e7d9bc8 100644
--- a/client/imports/parties-list/parties-list.html
+++ b/client/imports/parties-list/parties-list.html
@@ -11,5 +11,5 @@
       <button (click)="removeParty(party)">X</button>
     </li>
   </ul>
-  <pagination-controls></pagination-controls>
+  <pagination-controls (change)="onPageChanged($event.page)"></pagination-controls>
 </div>
\ No newline at end of file
-- 
2.7.4


From 57630e9677afb1e80f76733cd403916d3d422301 Mon Sep 17 00:00:00 2001
From: dotansimha <dotansimha@gmail.com>
Date: Fri, 6 May 2016 21:52:55 +0300
Subject: [PATCH 089/171] Step 12.11: add page changed event handler to the
 component

---
 client/imports/parties-list/parties-list.ts | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/client/imports/parties-list/parties-list.ts b/client/imports/parties-list/parties-list.ts
index 2915764..ee20e72 100644
--- a/client/imports/parties-list/parties-list.ts
+++ b/client/imports/parties-list/parties-list.ts
@@ -48,4 +48,8 @@ export class PartiesList extends MeteorComponent{
       this.parties = Parties.find();
     }
   }
+
+  onPageChanged(page: number) {
+    this.curPage.set(page);
+  }
 }
\ No newline at end of file
-- 
2.7.4


From 23bdac9a01c9f75aea045a8ed17c7d649a93643e Mon Sep 17 00:00:00 2001
From: dotansimha <dotansimha@gmail.com>
Date: Fri, 6 May 2016 21:53:44 +0300
Subject: [PATCH 090/171] Step 12.12: Add counts package and the typings file

---
 .meteor/packages            | 1 +
 .meteor/versions            | 1 +
 typings/publish-counts.d.ts | 8 ++++++++
 3 files changed, 10 insertions(+)
 create mode 100644 typings/publish-counts.d.ts

diff --git a/.meteor/packages b/.meteor/packages
index 8db539b..410ce64 100644
--- a/.meteor/packages
+++ b/.meteor/packages
@@ -20,3 +20,4 @@ barbatus:angular2-runtime
 accounts-password
 fourseven:scss
 reactive-var
+tmeasday:publish-counts
diff --git a/.meteor/versions b/.meteor/versions
index 034c094..50b525c 100644
--- a/.meteor/versions
+++ b/.meteor/versions
@@ -75,6 +75,7 @@ srp@1.0.8
 standard-minifier-css@1.0.6
 standard-minifier-js@1.0.6
 standard-minifiers@1.0.6
+tmeasday:publish-counts@0.7.3
 tracker@1.0.13
 ui@1.0.11
 underscore@1.0.8
diff --git a/typings/publish-counts.d.ts b/typings/publish-counts.d.ts
new file mode 100644
index 0000000..765120e
--- /dev/null
+++ b/typings/publish-counts.d.ts
@@ -0,0 +1,8 @@
+interface CountsObject {
+  get(publicationName : string) : number;
+  publish(context : any, publicationName : string, cursor : Mongo.Cursor, options : any) : number;
+}
+
+declare module "meteor/tmeasday:publish-counts" {
+  export let Counts : CountsObject;
+}
\ No newline at end of file
-- 
2.7.4


From 9906362ddef30fb659021791a393f6b507094f0d Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Wed, 3 Feb 2016 22:04:13 +0200
Subject: [PATCH 091/171] Step 12.13: publish total number of parties

---
 server/parties.ts | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/server/parties.ts b/server/parties.ts
index 5b9cb4f..37f9922 100644
--- a/server/parties.ts
+++ b/server/parties.ts
@@ -1,5 +1,6 @@
 import {Parties} from '../collections/parties';
 import {Meteor} from 'meteor/meteor';
+import {Counts} from 'meteor/tmeasday:publish-counts';
 
 function buildQuery(partyId?: string): Object {
   var isAvailable = {
@@ -22,6 +23,8 @@ function buildQuery(partyId?: string): Object {
 }
 
 Meteor.publish('parties', function(options: Object) {
+  Counts.publish(this, 'numberOfParties', Parties.find(buildQuery.call(this)), { noReady: true });
+
   return Parties.find(buildQuery.call(this), options);
 });
 
-- 
2.7.4


From a14268b9ba5adc4d517e60463ec305a7b707abad Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Wed, 3 Feb 2016 22:06:01 +0200
Subject: [PATCH 092/171] Step 12.14: handle reactive updates of the parties
 total number

---
 client/imports/parties-list/parties-list.ts | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/client/imports/parties-list/parties-list.ts b/client/imports/parties-list/parties-list.ts
index ee20e72..8d4f5ba 100644
--- a/client/imports/parties-list/parties-list.ts
+++ b/client/imports/parties-list/parties-list.ts
@@ -6,6 +6,7 @@ import { RouterLink }  from '@angular/router-deprecated';
 import { LoginButtons } from 'angular2-meteor-accounts-ui';
 import { MeteorComponent } from 'angular2-meteor';
 import { ReactiveVar } from 'meteor/reactive-var';
+import { Counts } from 'meteor/tmeasday:publish-counts';
 import { PaginationService, PaginatePipe, PaginationControlsCmp } from 'angular2-pagination';
 
 @Component({
@@ -20,6 +21,7 @@ export class PartiesList extends MeteorComponent{
   pageSize: number = 10;
   curPage: ReactiveVar<number> = new ReactiveVar<number>(1);
   nameOrder: number = 1;
+  partiesSize: number = 0;
 
   constructor() {
     super();
@@ -35,6 +37,10 @@ export class PartiesList extends MeteorComponent{
         this.parties = Parties.find({}, { sort: { name: this.nameOrder } });
       }, true);
     });
+
+    this.autorun(() => {
+      this.partiesSize = Counts.get('numberOfParties');
+    }, true);
   }
 
   removeParty(party) {
-- 
2.7.4


From 2d960ccacfb29ef46b7f461abd55fbca125a3968 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Wed, 3 Feb 2016 22:06:38 +0200
Subject: [PATCH 093/171] Step 12.15: add parties total number var in the
 template

---
 client/imports/parties-list/parties-list.html | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/client/imports/parties-list/parties-list.html b/client/imports/parties-list/parties-list.html
index e7d9bc8..412eaef 100644
--- a/client/imports/parties-list/parties-list.html
+++ b/client/imports/parties-list/parties-list.html
@@ -4,7 +4,7 @@
   <button type="button" (click)="search(searchtext.value)">Search</button>
   <login-buttons></login-buttons>
   <ul>
-    <li *ngFor="let party of parties | paginate:{currentPage: 1, itemsPerPage: pageSize, totalItems: 30}">
+    <li *ngFor="let party of parties | paginate:{currentPage: 1, itemsPerPage: pageSize, totalItems: partiesSize}">
       <a [routerLink]="['/PartyDetails', {partyId: party._id}]">{{party.name}}</a>
       <p>{{party.description}}</p>
       <p>{{party.location}}</p>
-- 
2.7.4


From deae99c187fcb25eec95d4bdd038c3eefcfdf16a Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Wed, 3 Feb 2016 22:07:37 +0200
Subject: [PATCH 094/171] Step 12.16: add a sort order dropdown

---
 client/imports/parties-list/parties-list.html | 7 +++++++
 1 file changed, 7 insertions(+)

diff --git a/client/imports/parties-list/parties-list.html b/client/imports/parties-list/parties-list.html
index 412eaef..88acea9 100644
--- a/client/imports/parties-list/parties-list.html
+++ b/client/imports/parties-list/parties-list.html
@@ -3,6 +3,13 @@
   <input type="text" #searchtext placeholder="Search by Location">
   <button type="button" (click)="search(searchtext.value)">Search</button>
   <login-buttons></login-buttons>
+  <h1>Parties:</h1>
+  <div>
+    <select #sort (change)="changeSortOrder(sort.value)">
+      <option value="1" selected>Ascending</option>
+      <option value="-1">Descending</option>
+    </select>
+  </div>
   <ul>
     <li *ngFor="let party of parties | paginate:{currentPage: 1, itemsPerPage: pageSize, totalItems: partiesSize}">
       <a [routerLink]="['/PartyDetails', {partyId: party._id}]">{{party.name}}</a>
-- 
2.7.4


From 70b360bb14f75771f224c99fc63d5895f7f389fc Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Wed, 3 Feb 2016 22:09:03 +0200
Subject: [PATCH 095/171] Step 12.17: re-subscribe reactively when sort order
 changes

---
 client/imports/parties-list/parties-list.ts | 10 +++++++---
 1 file changed, 7 insertions(+), 3 deletions(-)

diff --git a/client/imports/parties-list/parties-list.ts b/client/imports/parties-list/parties-list.ts
index 8d4f5ba..45366d2 100644
--- a/client/imports/parties-list/parties-list.ts
+++ b/client/imports/parties-list/parties-list.ts
@@ -20,7 +20,7 @@ export class PartiesList extends MeteorComponent{
   parties: Mongo.Cursor<Party>;
   pageSize: number = 10;
   curPage: ReactiveVar<number> = new ReactiveVar<number>(1);
-  nameOrder: number = 1;
+  nameOrder: ReactiveVar<number> = new ReactiveVar<number>(1);
   partiesSize: number = 0;
 
   constructor() {
@@ -30,11 +30,11 @@ export class PartiesList extends MeteorComponent{
       let options = {
         limit: this.pageSize,
         skip: (this.curPage.get() - 1) * this.pageSize,
-        sort: { name: this.nameOrder }
+        sort: { name: this.nameOrder.get() }
       };
 
       this.subscribe('parties', options, () => {
-        this.parties = Parties.find({}, { sort: { name: this.nameOrder } });
+        this.parties = Parties.find({}, { sort: { name: this.nameOrder.get() } });
       }, true);
     });
 
@@ -55,6 +55,10 @@ export class PartiesList extends MeteorComponent{
     }
   }
 
+  changeSortOrder(nameOrder: string) {
+    this.nameOrder.set(parseInt(nameOrder));
+  }
+
   onPageChanged(page: number) {
     this.curPage.set(page);
   }
-- 
2.7.4


From 6125bc87488323db87693227093f84f7e49ac5db Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Wed, 3 Feb 2016 22:27:25 +0200
Subject: [PATCH 096/171] Step 12.18: add search by the party location using
 Mongo regex

---
 server/parties.ts | 16 +++++++++-------
 1 file changed, 9 insertions(+), 7 deletions(-)

diff --git a/server/parties.ts b/server/parties.ts
index 37f9922..9595708 100644
--- a/server/parties.ts
+++ b/server/parties.ts
@@ -2,10 +2,10 @@ import {Parties} from '../collections/parties';
 import {Meteor} from 'meteor/meteor';
 import {Counts} from 'meteor/tmeasday:publish-counts';
 
-function buildQuery(partyId?: string): Object {
+function buildQuery(partyId: string, location: string): Object {
   var isAvailable = {
     $or: [
-      { 'public': true },
+      { public: true },
       {
         $and: [
           { owner: this.userId },
@@ -19,13 +19,15 @@ function buildQuery(partyId?: string): Object {
     return { $and: [{ _id: partyId }, isAvailable] };
   }
 
-  return isAvailable;
-}
+  let searchRegEx = { '$regex': '.*' + (location || '') + '.*', '$options': 'i' };
 
-Meteor.publish('parties', function(options: Object) {
-  Counts.publish(this, 'numberOfParties', Parties.find(buildQuery.call(this)), { noReady: true });
+  return { $and: [{ location: searchRegEx }, isAvailable] };
+}
 
-  return Parties.find(buildQuery.call(this), options);
+Meteor.publish('parties', function(options: Object, location: string) {
+  Counts.publish(this, 'numberOfParties',
+    Parties.find(buildQuery.call(this, null, location)), { noReady: true });
+  return Parties.find(buildQuery.call(this, null, location), options);
 });
 
 Meteor.publish('party', function(partyId: string) {
-- 
2.7.4


From a24c92a5e30fe6d747d51fbda72e813542b7ce44 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Wed, 3 Feb 2016 22:32:06 +0200
Subject: [PATCH 097/171] Step 12.19: add reactive search by the location on
 the client

---
 client/imports/parties-list/parties-list.ts | 10 ++++------
 1 file changed, 4 insertions(+), 6 deletions(-)

diff --git a/client/imports/parties-list/parties-list.ts b/client/imports/parties-list/parties-list.ts
index 45366d2..c81f2bd 100644
--- a/client/imports/parties-list/parties-list.ts
+++ b/client/imports/parties-list/parties-list.ts
@@ -22,6 +22,7 @@ export class PartiesList extends MeteorComponent{
   curPage: ReactiveVar<number> = new ReactiveVar<number>(1);
   nameOrder: ReactiveVar<number> = new ReactiveVar<number>(1);
   partiesSize: number = 0;
+  location: ReactiveVar<string> = new ReactiveVar<string>(null);
 
   constructor() {
     super();
@@ -33,7 +34,7 @@ export class PartiesList extends MeteorComponent{
         sort: { name: this.nameOrder.get() }
       };
 
-      this.subscribe('parties', options, () => {
+      this.subscribe('parties', options, this.location.get(), () => {
         this.parties = Parties.find({}, { sort: { name: this.nameOrder.get() } });
       }, true);
     });
@@ -48,11 +49,8 @@ export class PartiesList extends MeteorComponent{
   }
 
   search(value: string) {
-    if (value) {
-      this.parties = Parties.find({ location: value });
-    } else {
-      this.parties = Parties.find();
-    }
+    this.curPage.set(1);
+    this.location.set(value);
   }
 
   changeSortOrder(nameOrder: string) {
-- 
2.7.4


From 0ed9a4dc166c8c23c71081e897845b6ab45bd19e Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Wed, 3 Feb 2016 22:32:47 +0200
Subject: [PATCH 098/171] Step 13.1: add uninvited users publication

---
 server/users.ts | 16 ++++++++++++++++
 1 file changed, 16 insertions(+)
 create mode 100644 server/users.ts

diff --git a/server/users.ts b/server/users.ts
new file mode 100644
index 0000000..964ded4
--- /dev/null
+++ b/server/users.ts
@@ -0,0 +1,16 @@
+import {Parties} from '../collections/parties.ts';
+import { Meteor } from 'meteor/meteor';
+
+Meteor.publish('uninvited', function (partyId:string) {
+  let party = Parties.findOne(partyId);
+
+  if (!party)
+    throw new Meteor.Error('404', 'No such party!');
+
+  return Meteor.users.find({
+    _id: {
+      $nin: party.invited || [],
+      $ne: this.userId
+    }
+  });
+});
\ No newline at end of file
-- 
2.7.4


From 4aa43139ab3713b9e471380739e4b7968b70778d Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Wed, 3 Feb 2016 22:33:15 +0200
Subject: [PATCH 099/171] Step 13.2: import users publications on the server
 start

---
 server/main.ts | 1 +
 1 file changed, 1 insertion(+)

diff --git a/server/main.ts b/server/main.ts
index 7330ae5..b2a5647 100644
--- a/server/main.ts
+++ b/server/main.ts
@@ -1,5 +1,6 @@
 import {loadParties} from './load-parties.ts';
 import {Meteor} from 'meteor/meteor';
 import './parties.ts';
+import './users.ts';
 
 Meteor.startup(loadParties);
\ No newline at end of file
-- 
2.7.4


From 26c98a277f89efe5ca157cd34397424c19a4b027 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Wed, 3 Feb 2016 22:34:11 +0200
Subject: [PATCH 100/171] Step 13.3: load uninvited users

---
 client/imports/party-details/party-details.ts | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/client/imports/party-details/party-details.ts b/client/imports/party-details/party-details.ts
index e383eae..85b2ed2 100644
--- a/client/imports/party-details/party-details.ts
+++ b/client/imports/party-details/party-details.ts
@@ -4,6 +4,7 @@ import {Parties} from '../../../collections/parties.ts';
 import { Meteor } from 'meteor/meteor';
 import { RequireUser } from 'angular2-meteor-accounts-ui';
 import { MeteorComponent } from 'angular2-meteor';
+import { Mongo } from 'meteor/mongo';
 
 @Component({
   selector: 'party-details',
@@ -13,6 +14,7 @@ import { MeteorComponent } from 'angular2-meteor';
 @RequireUser()
 export class PartyDetails extends MeteorComponent {
   party: Party;
+  users: Mongo.Cursor<Object>;
 
   constructor(params: RouteParams) {
     super();
@@ -21,6 +23,10 @@ export class PartyDetails extends MeteorComponent {
     this.subscribe('party', partyId, () => {
       this.party = Parties.findOne(partyId);
     }, true);
+
+    this.subscribe('uninvited', partyId, () => {
+      this.users = Meteor.users.find({_id: {$ne: Meteor.userId()}});
+    }, true);
   }
 
   saveParty(party) {
-- 
2.7.4


From 24785a81663d8b04fb4a5768394ae3d3ab6b36f8 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Wed, 3 Feb 2016 22:34:44 +0200
Subject: [PATCH 101/171] Step 13.4: Add invited to the party definition

---
 typings/party.d.ts | 1 +
 1 file changed, 1 insertion(+)

diff --git a/typings/party.d.ts b/typings/party.d.ts
index 6ebcc01..ef626f1 100644
--- a/typings/party.d.ts
+++ b/typings/party.d.ts
@@ -5,4 +5,5 @@ interface Party {
   location: string;
   owner?: string;
   public: boolean;
+  invited?: Array<string>;
 }
\ No newline at end of file
-- 
2.7.4


From 104e560d2b1ff1210198dc1ded8f4d626d80b02b Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Wed, 3 Feb 2016 22:35:35 +0200
Subject: [PATCH 102/171] Step 13.5: render uninvited users

---
 client/imports/party-details/party-details.html | 7 +++++++
 1 file changed, 7 insertions(+)

diff --git a/client/imports/party-details/party-details.html b/client/imports/party-details/party-details.html
index 58168fc..bc44822 100644
--- a/client/imports/party-details/party-details.html
+++ b/client/imports/party-details/party-details.html
@@ -11,3 +11,10 @@
   <button type="submit">Save</button>
   <button [routerLink]="['/PartiesList']">Cancel</button>
 </form>
+
+<ul>
+  Users to invite:
+  <li *ngFor="let user of users">
+    <div>{{ user.emails[0].address }}</div>
+  </li>
+</ul>
-- 
2.7.4


From a62f9ebe020bfb292386a9597d91925fdc4c5312 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Wed, 3 Feb 2016 22:45:15 +0200
Subject: [PATCH 103/171] Step 13.6: add new pipe to render user name

---
 client/imports/pipes/pipes.ts | 24 ++++++++++++++++++++++++
 1 file changed, 24 insertions(+)
 create mode 100644 client/imports/pipes/pipes.ts

diff --git a/client/imports/pipes/pipes.ts b/client/imports/pipes/pipes.ts
new file mode 100644
index 0000000..b7b6f2b
--- /dev/null
+++ b/client/imports/pipes/pipes.ts
@@ -0,0 +1,24 @@
+import 'reflect-metadata';
+import { Pipe } from '@angular/core';
+import { Meteor } from 'meteor/meteor';
+
+@Pipe({
+  name: 'displayName'
+})
+export class DisplayName {
+  transform(user: Meteor.User): string {
+    if (!user) {
+      return '';
+    }
+
+    if (user.username) {
+      return user.username;
+    }
+
+    if (user.emails) {
+      return user.emails[0].address;
+    }
+
+    return '';
+  }
+}
\ No newline at end of file
-- 
2.7.4


From a396a3e99919801ea9d4843964dc69f73a112f8d Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Wed, 3 Feb 2016 22:46:31 +0200
Subject: [PATCH 104/171] Step 13.7: make use of the pipe in the template

---
 client/imports/party-details/party-details.html | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/client/imports/party-details/party-details.html b/client/imports/party-details/party-details.html
index bc44822..089be90 100644
--- a/client/imports/party-details/party-details.html
+++ b/client/imports/party-details/party-details.html
@@ -15,6 +15,6 @@
 <ul>
   Users to invite:
   <li *ngFor="let user of users">
-    <div>{{ user.emails[0].address }}</div>
+    <div>{{ user | displayName }}</div>
   </li>
 </ul>
-- 
2.7.4


From d0ab440167ab0fdb05ef3bbb8b77df48f3aaba38 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Wed, 3 Feb 2016 22:48:00 +0200
Subject: [PATCH 105/171] Step 13.8: import DisplayName pipe and add it to the
 view

---
 client/imports/party-details/party-details.ts | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/client/imports/party-details/party-details.ts b/client/imports/party-details/party-details.ts
index 85b2ed2..3ce0351 100644
--- a/client/imports/party-details/party-details.ts
+++ b/client/imports/party-details/party-details.ts
@@ -4,12 +4,14 @@ import {Parties} from '../../../collections/parties.ts';
 import { Meteor } from 'meteor/meteor';
 import { RequireUser } from 'angular2-meteor-accounts-ui';
 import { MeteorComponent } from 'angular2-meteor';
+import { DisplayName } from '../pipes/pipes.ts';
 import { Mongo } from 'meteor/mongo';
 
 @Component({
   selector: 'party-details',
   templateUrl: '/client/imports/party-details/party-details.html',
-  directives: [RouterLink]
+  directives: [RouterLink],
+  pipes: [DisplayName]
 })
 @RequireUser()
 export class PartyDetails extends MeteorComponent {
-- 
2.7.4


From e79d6969b2f6f701cc2a9c4e3effc632389cb943 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Wed, 3 Feb 2016 22:50:45 +0200
Subject: [PATCH 106/171] Step 14.0: add a party invitation method

---
 collections/methods.ts | 47 +++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 47 insertions(+)
 create mode 100644 collections/methods.ts

diff --git a/collections/methods.ts b/collections/methods.ts
new file mode 100644
index 0000000..28e5487
--- /dev/null
+++ b/collections/methods.ts
@@ -0,0 +1,47 @@
+import {Parties} from './parties.ts';
+import {Email} from 'meteor/email';
+import {check} from 'meteor/check';
+import {Meteor} from 'meteor/meteor';
+
+function getContactEmail(user:Meteor.User):string {
+  if (user.emails && user.emails.length)
+    return user.emails[0].address;
+
+  return null;
+}
+
+Meteor.methods({
+  invite: function (partyId:string, userId:string) {
+    check(partyId, String);
+    check(userId, String);
+
+    let party = Parties.findOne(partyId);
+
+    if (!party)
+      throw new Meteor.Error('404', 'No such party!');
+
+    if (party.public)
+      throw new Meteor.Error('400', 'That party is public. No need to invite people.');
+
+    if (party.owner !== this.userId)
+      throw new Meteor.Error('403', 'No permissions!');
+
+    if (userId !== party.owner && (party.invited || []).indexOf(userId) == -1) {
+      Parties.update(partyId, {$addToSet: {invited: userId}});
+
+      let from = getContactEmail(Meteor.users.findOne(this.userId));
+      let to = getContactEmail(Meteor.users.findOne(userId));
+
+      if (Meteor.isServer && to) {
+        Email.send({
+          from: 'noreply@socially.com',
+          to: to,
+          replyTo: from || undefined,
+          subject: 'PARTY: ' + party.name,
+          text: `Hi, I just invited you to ${party.name} on Socially.
+                        \n\nCome check it out: ${Meteor.absoluteUrl()}\n`
+        });
+      }
+    }
+  }
+});
\ No newline at end of file
-- 
2.7.4


From adc94081e7dc314b0ca0d7964dfed7453752a8b0 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Wed, 3 Feb 2016 22:51:24 +0200
Subject: [PATCH 107/171] Step 14.1: Add email and check packages

---
 .meteor/packages | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/.meteor/packages b/.meteor/packages
index 410ce64..b232d8b 100644
--- a/.meteor/packages
+++ b/.meteor/packages
@@ -21,3 +21,5 @@ accounts-password
 fourseven:scss
 reactive-var
 tmeasday:publish-counts
+email
+check
-- 
2.7.4


From 9795b4ad8754b34ec5f911bd179995abdf1e6d58 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Wed, 3 Feb 2016 22:51:49 +0200
Subject: [PATCH 108/171] Step 14.2: import methods on the server side

---
 server/main.ts | 1 +
 1 file changed, 1 insertion(+)

diff --git a/server/main.ts b/server/main.ts
index b2a5647..e4eb2d1 100644
--- a/server/main.ts
+++ b/server/main.ts
@@ -2,5 +2,6 @@ import {loadParties} from './load-parties.ts';
 import {Meteor} from 'meteor/meteor';
 import './parties.ts';
 import './users.ts';
+import '../collections/methods.ts';
 
 Meteor.startup(loadParties);
\ No newline at end of file
-- 
2.7.4


From 5bb39adf863829a56792db1512e40970691231c6 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Wed, 3 Feb 2016 22:52:16 +0200
Subject: [PATCH 109/171] Step 14.3: import methods on the client

---
 client/app.ts | 1 +
 1 file changed, 1 insertion(+)

diff --git a/client/app.ts b/client/app.ts
index c32bf08..6f8ffb1 100644
--- a/client/app.ts
+++ b/client/app.ts
@@ -6,6 +6,7 @@ import { ROUTER_PROVIDERS, ROUTER_DIRECTIVES, RouteConfig } from '@angular/route
 import { APP_BASE_HREF } from '@angular/common';
 import { PartiesList } from './imports/parties-list/parties-list.ts';
 import { PartyDetails } from './imports/party-details/party-details.ts';
+import '../collections/methods.ts';
 
 @Component({
   selector: 'app',
-- 
2.7.4


From ae6d57a928bae4162dc65baa7a1ede5cdf066e18 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Wed, 3 Feb 2016 22:52:40 +0200
Subject: [PATCH 110/171] Step 14.4: add "invite" button

---
 client/imports/party-details/party-details.html | 1 +
 1 file changed, 1 insertion(+)

diff --git a/client/imports/party-details/party-details.html b/client/imports/party-details/party-details.html
index 089be90..d131e55 100644
--- a/client/imports/party-details/party-details.html
+++ b/client/imports/party-details/party-details.html
@@ -16,5 +16,6 @@
   Users to invite:
   <li *ngFor="let user of users">
     <div>{{ user | displayName }}</div>
+    <button (click)="invite(user)">Invite</button>
   </li>
 </ul>
-- 
2.7.4


From f8d814678143d61d1c37377ef0f82f6c6949e2da Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Wed, 3 Feb 2016 22:53:18 +0200
Subject: [PATCH 111/171] Step 14.5: add the click handler and call "invite"
 method

---
 client/imports/party-details/party-details.ts | 13 ++++++++++++-
 1 file changed, 12 insertions(+), 1 deletion(-)

diff --git a/client/imports/party-details/party-details.ts b/client/imports/party-details/party-details.ts
index 3ce0351..c972424 100644
--- a/client/imports/party-details/party-details.ts
+++ b/client/imports/party-details/party-details.ts
@@ -44,4 +44,15 @@ export class PartyDetails extends MeteorComponent {
       alert('Please log in to change this party');
     }
   }
-}
+
+  invite(user: Meteor.User) {
+    this.call('invite', this.party._id, user._id, (error) => {
+      if (error) {
+        alert(`Failed to invite due to ${error}`);
+        return;
+      }
+
+      alert('User successfully invited.');
+    });
+  }
+}
\ No newline at end of file
-- 
2.7.4


From 9791ee4e76e067deec1d5b180a5686d7861916f5 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Wed, 3 Feb 2016 22:54:04 +0200
Subject: [PATCH 112/171] Step 14.6: get the party reactively

---
 client/imports/party-details/party-details.ts | 6 ++++--
 1 file changed, 4 insertions(+), 2 deletions(-)

diff --git a/client/imports/party-details/party-details.ts b/client/imports/party-details/party-details.ts
index c972424..0fbb59c 100644
--- a/client/imports/party-details/party-details.ts
+++ b/client/imports/party-details/party-details.ts
@@ -23,8 +23,10 @@ export class PartyDetails extends MeteorComponent {
     var partyId = params.get('partyId');
 
     this.subscribe('party', partyId, () => {
-      this.party = Parties.findOne(partyId);
-    }, true);
+      this.autorun(() => {
+        this.party = Parties.findOne(partyId);
+      },   true);
+    });
 
     this.subscribe('uninvited', partyId, () => {
       this.users = Meteor.users.find({_id: {$ne: Meteor.userId()}});
-- 
2.7.4


From bae3e460fe07b74d83ad7ee2f655ff88cb665f13 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Wed, 3 Feb 2016 22:58:30 +0200
Subject: [PATCH 113/171] Step 14.7: update the users list reactively

---
 client/imports/party-details/party-details.ts | 14 +++++++++++++-
 1 file changed, 13 insertions(+), 1 deletion(-)

diff --git a/client/imports/party-details/party-details.ts b/client/imports/party-details/party-details.ts
index 0fbb59c..0b4f975 100644
--- a/client/imports/party-details/party-details.ts
+++ b/client/imports/party-details/party-details.ts
@@ -25,14 +25,26 @@ export class PartyDetails extends MeteorComponent {
     this.subscribe('party', partyId, () => {
       this.autorun(() => {
         this.party = Parties.findOne(partyId);
+        this.getUsers(this.party);
       },   true);
     });
 
     this.subscribe('uninvited', partyId, () => {
-      this.users = Meteor.users.find({_id: {$ne: Meteor.userId()}});
+      this.getUsers(this.party);
     }, true);
   }
 
+  getUsers(party: Party) {
+    if (party) {
+      this.users = Meteor.users.find({
+        _id: {
+          $nin: party.invited || [],
+          $ne: Meteor.userId()
+        }
+      });
+    }
+  }
+
   saveParty(party) {
     if (Meteor.userId()) {
       Parties.update(party._id, {
-- 
2.7.4


From e2af886a7865429630fba343d543e585f0b1f83d Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Wed, 3 Feb 2016 22:59:21 +0200
Subject: [PATCH 114/171] Step 14.8: show private parties to the invited and
 owners only

---
 server/parties.ts | 8 +++++++-
 1 file changed, 7 insertions(+), 1 deletion(-)

diff --git a/server/parties.ts b/server/parties.ts
index 9595708..2a44e5e 100644
--- a/server/parties.ts
+++ b/server/parties.ts
@@ -5,11 +5,17 @@ import {Counts} from 'meteor/tmeasday:publish-counts';
 function buildQuery(partyId: string, location: string): Object {
   var isAvailable = {
     $or: [
-      { public: true },
+      { 'public': true },
       {
         $and: [
           { owner: this.userId },
           { owner: { $exists: true } }
+        ],
+      },
+      {
+        $and: [
+          { invited: this.userId },
+          { invited: { $exists: true } }
         ]
       }
     ]
-- 
2.7.4


From cae648f526ddda40c7dea7c8950d61272ec93983 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Wed, 3 Feb 2016 23:00:12 +0200
Subject: [PATCH 115/171] Step 14.9: add a "reply" method

---
 collections/methods.ts | 45 +++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 45 insertions(+)

diff --git a/collections/methods.ts b/collections/methods.ts
index 28e5487..d11acab 100644
--- a/collections/methods.ts
+++ b/collections/methods.ts
@@ -43,5 +43,50 @@ Meteor.methods({
         });
       }
     }
+  },
+  reply: function(partyId: string, rsvp: string) {
+    check(partyId, String);
+    check(rsvp, String);
+
+    if (!this.userId)
+      throw new Meteor.Error('403', 'You must be logged-in to reply');
+
+    if (['yes', 'no', 'maybe'].indexOf(rsvp) === -1)
+      throw new Meteor.Error('400', 'Invalid RSVP');
+
+    let party = Parties.findOne({ _id: partyId });
+
+    if (!party)
+      throw new Meteor.Error('404', 'No such party');
+
+    if (party.owner === this.userId)
+      throw new Meteor.Error('500', 'You are the owner!');
+
+    if (!party.public && (!party.invited || party.invited.indexOf(this.userId) == -1))
+      throw new Meteor.Error('403', 'No such party'); // its private, but let's not tell this to the user
+
+    let rsvpIndex = party.rsvps ? party.rsvps.findIndex((rsvp) => rsvp.userId === this.userId) : -1;
+
+    if (rsvpIndex !== -1) {
+      // update existing rsvp entry
+      if (Meteor.isServer) {
+        // update the appropriate rsvp entry with $
+        Parties.update(
+          { _id: partyId, 'rsvps.userId': this.userId },
+          { $set: { 'rsvps.$.response': rsvp } });
+      } else {
+        // minimongo doesn't yet support $ in modifier. as a temporary
+        // workaround, make a modifier that uses an index. this is
+        // safe on the client since there's only one thread.
+        let modifier = { $set: {} };
+        modifier.$set['rsvps.' + rsvpIndex + '.response'] = rsvp;
+
+        Parties.update(partyId, modifier);
+      }
+    } else {
+      // add new rsvp entry
+      Parties.update(partyId,
+        { $push: { rsvps: { userId: this.userId, response: rsvp } } });
+    }
   }
 });
\ No newline at end of file
-- 
2.7.4


From 4698c731cd13821e7b9b419a878a218741a64de6 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Wed, 3 Feb 2016 23:00:50 +0200
Subject: [PATCH 116/171] Step 14.10: update the party typings

---
 typings/party.d.ts | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/typings/party.d.ts b/typings/party.d.ts
index ef626f1..e22afd5 100644
--- a/typings/party.d.ts
+++ b/typings/party.d.ts
@@ -6,4 +6,10 @@ interface Party {
   owner?: string;
   public: boolean;
   invited?: Array<string>;
+  rsvps?: Array<RSVP>;
+}
+
+interface RSVP {
+  userId: string;
+  response: string;
 }
\ No newline at end of file
-- 
2.7.4


From 2c3ef0c8fff075c17aaa58b2156e3c227c300977 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Wed, 3 Feb 2016 23:01:23 +0200
Subject: [PATCH 117/171] Step 14.11: update PartyDetails view with the three
 response buttons

---
 client/imports/party-details/party-details.html | 7 +++++++
 1 file changed, 7 insertions(+)

diff --git a/client/imports/party-details/party-details.html b/client/imports/party-details/party-details.html
index d131e55..5ac898c 100644
--- a/client/imports/party-details/party-details.html
+++ b/client/imports/party-details/party-details.html
@@ -19,3 +19,10 @@
     <button (click)="invite(user)">Invite</button>
   </li>
 </ul>
+
+<div>
+  <h2>Reply to the invitation</h2>
+  <input type="button" value="I'm going!" (click)="reply('yes')">
+  <input type="button" value="Maybe" (click)="reply('maybe')">
+  <input type="button" value="No" (click)="reply('no')">
+</div>
-- 
2.7.4


From 663138c923952485fa8acf9ad742279f51425804 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Wed, 3 Feb 2016 23:02:06 +0200
Subject: [PATCH 118/171] Step 14.12: handle reply events in the PartyDetails
 component

---
 client/imports/party-details/party-details.ts | 11 +++++++++++
 1 file changed, 11 insertions(+)

diff --git a/client/imports/party-details/party-details.ts b/client/imports/party-details/party-details.ts
index 0b4f975..c0d5b90 100644
--- a/client/imports/party-details/party-details.ts
+++ b/client/imports/party-details/party-details.ts
@@ -69,4 +69,15 @@ export class PartyDetails extends MeteorComponent {
       alert('User successfully invited.');
     });
   }
+
+  reply(rsvp: string) {
+    this.call('reply', this.party._id, rsvp, (error) => {
+      if (error) {
+        alert(`Failed to reply due to ${error}`);
+      }
+      else {
+        alert('You successfully replied.');
+      }
+    });
+  }
 }
\ No newline at end of file
-- 
2.7.4


From a73058e20d03882bb42540a80964f3df368dec03 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Wed, 3 Feb 2016 23:21:50 +0200
Subject: [PATCH 119/171] Step 14.13: add a new response counting pipe

---
 client/imports/pipes/pipes.ts | 33 ++++++++++++++++++++++++++++++++-
 1 file changed, 32 insertions(+), 1 deletion(-)

diff --git a/client/imports/pipes/pipes.ts b/client/imports/pipes/pipes.ts
index b7b6f2b..ddce20e 100644
--- a/client/imports/pipes/pipes.ts
+++ b/client/imports/pipes/pipes.ts
@@ -1,6 +1,8 @@
 import 'reflect-metadata';
 import { Pipe } from '@angular/core';
 import { Meteor } from 'meteor/meteor';
+import { Parties } from '../../../collections/parties.ts';
+import { MeteorComponent } from 'angular2-meteor';
 
 @Pipe({
   name: 'displayName'
@@ -21,4 +23,33 @@ export class DisplayName {
 
     return '';
   }
-}
\ No newline at end of file
+}
+
+
+@Pipe({
+  name: 'rsvp',
+  pure: false
+})
+export class RsvpPipe extends MeteorComponent {
+  init: boolean = false;
+  total: number = 0;
+
+  transform(party: Party, type: string): number {
+    if (!type) {
+      return 0;
+    }
+
+    if (!this.init) {
+      this.autorun(() => {
+        const found = Parties.findOne(party._id);
+        if (found) {
+          this.total = found.rsvps ?
+            found.rsvps.filter(rsvp => rsvp.response === type).length : 0;
+        }
+      }, true);
+      this.init = true;
+    }
+
+    return this.total;
+  }
+}
-- 
2.7.4


From 8d96765196b8f3bfe203578d8391b4368b5adf12 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Wed, 3 Feb 2016 23:34:41 +0200
Subject: [PATCH 120/171] Step 14.14: display response statistics in the list

---
 client/imports/parties-list/parties-list.html | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/client/imports/parties-list/parties-list.html b/client/imports/parties-list/parties-list.html
index 88acea9..c3eeb2d 100644
--- a/client/imports/parties-list/parties-list.html
+++ b/client/imports/parties-list/parties-list.html
@@ -16,6 +16,12 @@
       <p>{{party.description}}</p>
       <p>{{party.location}}</p>
       <button (click)="removeParty(party)">X</button>
+      <div>
+        Who is coming:
+        Yes - {{party | rsvp:'yes'}}
+        Maybe - {{party | rsvp:'maybe'}}
+        No - {{party | rsvp:'no'}}
+      </div>
     </li>
   </ul>
   <pagination-controls (change)="onPageChanged($event.page)"></pagination-controls>
-- 
2.7.4


From 625b455c29521ffdcaf6b68d4ddd2cbd14e60fbf Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Wed, 3 Feb 2016 23:34:59 +0200
Subject: [PATCH 121/171] Step 14.15: import the RsvpPipe pipe

---
 client/imports/parties-list/parties-list.ts | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/client/imports/parties-list/parties-list.ts b/client/imports/parties-list/parties-list.ts
index c81f2bd..0532e0c 100644
--- a/client/imports/parties-list/parties-list.ts
+++ b/client/imports/parties-list/parties-list.ts
@@ -8,13 +8,14 @@ import { MeteorComponent } from 'angular2-meteor';
 import { ReactiveVar } from 'meteor/reactive-var';
 import { Counts } from 'meteor/tmeasday:publish-counts';
 import { PaginationService, PaginatePipe, PaginationControlsCmp } from 'angular2-pagination';
+import { RsvpPipe } from '../pipes/pipes.ts';
 
 @Component({
   selector: 'parties-list',
   viewProviders: [PaginationService],
   templateUrl: '/client/imports/parties-list/parties-list.html',
   directives: [PartiesForm, RouterLink, LoginButtons, PaginationControlsCmp],
-  pipes: [PaginatePipe]
+  pipes: [PaginatePipe, RsvpPipe]
 })
 export class PartiesList extends MeteorComponent{
   parties: Mongo.Cursor<Party>;
-- 
2.7.4


From b8ab72d53a5648d701da5433309023e09eca984c Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Wed, 3 Feb 2016 23:58:58 +0200
Subject: [PATCH 122/171] Step 15.1: inject Meteor user and add isOwner method

---
 client/imports/parties-list/parties-list.ts | 13 ++++++++++++-
 1 file changed, 12 insertions(+), 1 deletion(-)

diff --git a/client/imports/parties-list/parties-list.ts b/client/imports/parties-list/parties-list.ts
index 0532e0c..20920cc 100644
--- a/client/imports/parties-list/parties-list.ts
+++ b/client/imports/parties-list/parties-list.ts
@@ -3,12 +3,13 @@ import { Parties }     from '../../../collections/parties';
 import { PartiesForm } from '../parties-form/parties-form';
 import { Mongo }       from 'meteor/mongo';
 import { RouterLink }  from '@angular/router-deprecated';
-import { LoginButtons } from 'angular2-meteor-accounts-ui';
+import { LoginButtons, InjectUser } from 'angular2-meteor-accounts-ui';
 import { MeteorComponent } from 'angular2-meteor';
 import { ReactiveVar } from 'meteor/reactive-var';
 import { Counts } from 'meteor/tmeasday:publish-counts';
 import { PaginationService, PaginatePipe, PaginationControlsCmp } from 'angular2-pagination';
 import { RsvpPipe } from '../pipes/pipes.ts';
+import { Meteor } from 'meteor/meteor';
 
 @Component({
   selector: 'parties-list',
@@ -17,6 +18,7 @@ import { RsvpPipe } from '../pipes/pipes.ts';
   directives: [PartiesForm, RouterLink, LoginButtons, PaginationControlsCmp],
   pipes: [PaginatePipe, RsvpPipe]
 })
+@InjectUser()
 export class PartiesList extends MeteorComponent{
   parties: Mongo.Cursor<Party>;
   pageSize: number = 10;
@@ -24,6 +26,7 @@ export class PartiesList extends MeteorComponent{
   nameOrder: ReactiveVar<number> = new ReactiveVar<number>(1);
   partiesSize: number = 0;
   location: ReactiveVar<string> = new ReactiveVar<string>(null);
+  user: Meteor.User;
 
   constructor() {
     super();
@@ -61,4 +64,12 @@ export class PartiesList extends MeteorComponent{
   onPageChanged(page: number) {
     this.curPage.set(page);
   }
+
+  isOwner(party: Party): boolean {
+    if (this.user) {
+      return this.user._id === party.owner;
+    }
+
+    return false;
+  }
 }
\ No newline at end of file
-- 
2.7.4


From 5167e35ca9791a97ee30d321d69a9651a78c2ad1 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 4 Feb 2016 00:00:15 +0200
Subject: [PATCH 123/171] Step 15.2: use the hidden attribute in the
 PartiesList template

---
 client/imports/parties-list/parties-list.html | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/client/imports/parties-list/parties-list.html b/client/imports/parties-list/parties-list.html
index c3eeb2d..254161c 100644
--- a/client/imports/parties-list/parties-list.html
+++ b/client/imports/parties-list/parties-list.html
@@ -1,5 +1,5 @@
 <div>
-  <parties-form style="float: left"></parties-form>
+  <parties-form [hidden]="!user" style="float: left"></parties-form>
   <input type="text" #searchtext placeholder="Search by Location">
   <button type="button" (click)="search(searchtext.value)">Search</button>
   <login-buttons></login-buttons>
@@ -15,7 +15,7 @@
       <a [routerLink]="['/PartyDetails', {partyId: party._id}]">{{party.name}}</a>
       <p>{{party.description}}</p>
       <p>{{party.location}}</p>
-      <button (click)="removeParty(party)">X</button>
+      <button [hidden]="!isOwner(party)"  (click)="removeParty(party)">X</button>
       <div>
         Who is coming:
         Yes - {{party | rsvp:'yes'}}
-- 
2.7.4


From 9718e7a9a1d4b74a800ec357f47cb05ca0bfb569 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 4 Feb 2016 00:08:45 +0200
Subject: [PATCH 124/171] Step 15.3: add isOwner property into the PartyDetails

---
 client/imports/party-details/party-details.ts | 12 +++++++++++-
 1 file changed, 11 insertions(+), 1 deletion(-)

diff --git a/client/imports/party-details/party-details.ts b/client/imports/party-details/party-details.ts
index c0d5b90..78bf38d 100644
--- a/client/imports/party-details/party-details.ts
+++ b/client/imports/party-details/party-details.ts
@@ -2,7 +2,7 @@ import { Component } from '@angular/core';
 import { RouteParams, RouterLink } from '@angular/router-deprecated';
 import {Parties} from '../../../collections/parties.ts';
 import { Meteor } from 'meteor/meteor';
-import { RequireUser } from 'angular2-meteor-accounts-ui';
+import { RequireUser, InjectUser } from 'angular2-meteor-accounts-ui';
 import { MeteorComponent } from 'angular2-meteor';
 import { DisplayName } from '../pipes/pipes.ts';
 import { Mongo } from 'meteor/mongo';
@@ -14,9 +14,11 @@ import { Mongo } from 'meteor/mongo';
   pipes: [DisplayName]
 })
 @RequireUser()
+@InjectUser()
 export class PartyDetails extends MeteorComponent {
   party: Party;
   users: Mongo.Cursor<Object>;
+  user: Meteor.User;
 
   constructor(params: RouteParams) {
     super();
@@ -80,4 +82,12 @@ export class PartyDetails extends MeteorComponent {
       }
     });
   }
+
+  get isOwner(): boolean {
+    if (this.party && this.user) {
+      return this.user._id === this.party.owner;
+    }
+
+    return false;
+  }
 }
\ No newline at end of file
-- 
2.7.4


From fdaa319592ef6a11b149a0ad08d8d381ac25ee2f Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 4 Feb 2016 00:10:07 +0200
Subject: [PATCH 125/171] Step 15.4: add disable attribute bindings

---
 client/imports/party-details/party-details.html | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/client/imports/party-details/party-details.html b/client/imports/party-details/party-details.html
index 5ac898c..2fbab7b 100644
--- a/client/imports/party-details/party-details.html
+++ b/client/imports/party-details/party-details.html
@@ -1,14 +1,14 @@
 <form (submit)="saveParty(party)" *ngIf="party">
   <label>Name</label>
-  <input type="text" [(ngModel)]="party.name">
+  <input [disabled]="!isOwner" type="text" [(ngModel)]="party.name">
 
   <label>Description</label>
-  <input type="text" [(ngModel)]="party.description">
+  <input [disabled]="!isOwner" type="text" [(ngModel)]="party.description">
 
   <label>Location</label>
-  <input type="text" [(ngModel)]="party.location">
+  <input [disabled]="!isOwner" type="text" [(ngModel)]="party.location">
 
-  <button type="submit">Save</button>
+  <button [disabled]="!isOwner" type="submit">Save</button>
   <button [routerLink]="['/PartiesList']">Cancel</button>
 </form>
 
-- 
2.7.4


From 6aeb1e709fe8224ea2265bc799921fef290b19e9 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 4 Feb 2016 00:11:12 +0200
Subject: [PATCH 126/171] Step 15.5: add isPublic and isInvited properties

---
 client/imports/party-details/party-details.ts | 17 +++++++++++++++++
 1 file changed, 17 insertions(+)

diff --git a/client/imports/party-details/party-details.ts b/client/imports/party-details/party-details.ts
index 78bf38d..82689b9 100644
--- a/client/imports/party-details/party-details.ts
+++ b/client/imports/party-details/party-details.ts
@@ -90,4 +90,21 @@ export class PartyDetails extends MeteorComponent {
 
     return false;
   }
+
+  get isPublic(): boolean {
+    if (this.party) {
+      return this.party.public;
+    }
+
+    return false;
+  }
+
+  get isInvited(): boolean {
+    if (this.party && this.user) {
+      let invited = this.party.invited || [];
+      return invited.indexOf(this.user._id) !== -1;
+    }
+
+    return false;
+  }
 }
\ No newline at end of file
-- 
2.7.4


From 1c6b01d4fbad6cac5c6ee5ccfdaf3ac278319133 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 4 Feb 2016 00:32:36 +0200
Subject: [PATCH 127/171] Step 15.6: make use of the properties in the template

---
 client/imports/party-details/party-details.html | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/client/imports/party-details/party-details.html b/client/imports/party-details/party-details.html
index 2fbab7b..d4f1e09 100644
--- a/client/imports/party-details/party-details.html
+++ b/client/imports/party-details/party-details.html
@@ -12,7 +12,7 @@
   <button [routerLink]="['/PartiesList']">Cancel</button>
 </form>
 
-<ul>
+<ul *ngIf="isOwner || isPublic">
   Users to invite:
   <li *ngFor="let user of users">
     <div>{{ user | displayName }}</div>
@@ -20,7 +20,7 @@
   </li>
 </ul>
 
-<div>
+<div *ngIf="isInvited">
   <h2>Reply to the invitation</h2>
   <input type="button" value="I'm going!" (click)="reply('yes')">
   <input type="button" value="Maybe" (click)="reply('maybe')">
-- 
2.7.4


From 71dd480d5ae880a09147938e5ea5f0fe8cf0e04c Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 4 Feb 2016 00:33:40 +0200
Subject: [PATCH 128/171] Step 16.1: extend party location with lat and lng
 coordinates

---
 typings/party.d.ts | 6 +++++-
 1 file changed, 5 insertions(+), 1 deletion(-)

diff --git a/typings/party.d.ts b/typings/party.d.ts
index e22afd5..2872814 100644
--- a/typings/party.d.ts
+++ b/typings/party.d.ts
@@ -2,9 +2,13 @@ interface Party {
   _id?: string;
   name: string;
   description?: string;
-  location: string;
   owner?: string;
   public: boolean;
+  location: {
+    name: string;
+    lat?: number;
+    lng?: number;
+  };
   invited?: Array<string>;
   rsvps?: Array<RSVP>;
 }
-- 
2.7.4


From 73bf3588c18d0d3618f3553ec9581f846de2f7b2 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 4 Feb 2016 00:34:28 +0200
Subject: [PATCH 129/171] Step 16.2: change initial parties accordingly

---
 server/load-parties.ts | 18 ++++++++++++------
 1 file changed, 12 insertions(+), 6 deletions(-)

diff --git a/server/load-parties.ts b/server/load-parties.ts
index 68adcf7..b0e63e6 100644
--- a/server/load-parties.ts
+++ b/server/load-parties.ts
@@ -7,20 +7,26 @@ export function loadParties() {
       {
         'name': 'Dubstep-Free Zone',
         'description': 'Can we please just for an evening not listen to dubstep.',
-        'location': 'Palo Alto',
-        'public': true
+        'public': true,
+        'location': {
+          name: 'Palo Alto'
+        }
       },
       {
         'name': 'All dubstep all the time',
         'description': 'Get it on!',
-        'location': 'Palo Alto',
-        'public': true
+        'public': true,
+        'location': {
+          name: 'Palo Alto'
+        }
       },
       {
         'name': 'Savage lounging',
         'description': 'Leisure suit required. And only fiercest manners.',
-        'location': 'San Francisco',
-        'public': false
+        'public': false,
+        'location': {
+          name: 'Palo Alto'
+        }
       }
     ];
 
-- 
2.7.4


From a2547f1155844340c932eac8954d50e202d565e1 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 4 Feb 2016 00:35:21 +0200
Subject: [PATCH 130/171] Step 16.3: change party creation component

---
 client/imports/parties-form/parties-form.ts | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/client/imports/parties-form/parties-form.ts b/client/imports/parties-form/parties-form.ts
index 1e89ddb..74a19a1 100644
--- a/client/imports/parties-form/parties-form.ts
+++ b/client/imports/parties-form/parties-form.ts
@@ -28,7 +28,9 @@ export class PartiesForm {
         Parties.insert(<Party>{
           name: party.name,
           description: party.description,
-          location: party.location,
+          location: {
+            name: party.location
+          },
           'public': party.public,
           owner: Meteor.userId()
         });
-- 
2.7.4


From 8179d3ef5c24bf63d125350e6e95b0a5d9432f82 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 4 Feb 2016 00:36:06 +0200
Subject: [PATCH 131/171] Step 16.4: reflect type changes in the parties search

---
 server/parties.ts | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/server/parties.ts b/server/parties.ts
index 2a44e5e..88cbd96 100644
--- a/server/parties.ts
+++ b/server/parties.ts
@@ -27,7 +27,7 @@ function buildQuery(partyId: string, location: string): Object {
 
   let searchRegEx = { '$regex': '.*' + (location || '') + '.*', '$options': 'i' };
 
-  return { $and: [{ location: searchRegEx }, isAvailable] };
+  return { $and: [{ 'location.name': searchRegEx }, isAvailable] };
 }
 
 Meteor.publish('parties', function(options: Object, location: string) {
-- 
2.7.4


From b03f97819578f787f274d34574b84bee5fe10b98 Mon Sep 17 00:00:00 2001
From: Uri Goldshtein <uri.goldshtein@gmail.com>
Date: Sat, 14 May 2016 18:34:10 +0300
Subject: [PATCH 132/171] Step 16.5: add angular2 google maps package

---
 package.json | 1 +
 1 file changed, 1 insertion(+)

diff --git a/package.json b/package.json
index 0708488..e102d10 100644
--- a/package.json
+++ b/package.json
@@ -11,6 +11,7 @@
     "@angular/platform-browser": "2.0.0-rc.1",
     "@angular/platform-browser-dynamic": "2.0.0-rc.1",
     "@angular/router-deprecated": "^2.0.0-rc.1",
+    "angular2-google-maps": "0.10.0",
     "angular2-meteor": "0.5.5",
     "angular2-meteor-accounts-ui": "0.4.3",
     "angular2-meteor-auto-bootstrap": "0.5.5",
-- 
2.7.4


From 50065cab6d512b8a09784ec93d3fbf4629550370 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 4 Feb 2016 00:40:08 +0200
Subject: [PATCH 133/171] Step 16.6: import and install maps providers globally

---
 client/app.ts | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/client/app.ts b/client/app.ts
index 6f8ffb1..43ed55d 100644
--- a/client/app.ts
+++ b/client/app.ts
@@ -7,6 +7,7 @@ import { APP_BASE_HREF } from '@angular/common';
 import { PartiesList } from './imports/parties-list/parties-list.ts';
 import { PartyDetails } from './imports/party-details/party-details.ts';
 import '../collections/methods.ts';
+import {ANGULAR2_GOOGLE_MAPS_PROVIDERS} from 'angular2-google-maps/core';
 
 @Component({
   selector: 'app',
@@ -19,4 +20,4 @@ import '../collections/methods.ts';
 ])
 class Socially {}
 
-bootstrap(Socially, [ROUTER_PROVIDERS, provide(APP_BASE_HREF, { useValue: '/' })]);
\ No newline at end of file
+bootstrap(Socially, [ROUTER_PROVIDERS, ANGULAR2_GOOGLE_MAPS_PROVIDERS, provide(APP_BASE_HREF, { useValue: '/' })]);
\ No newline at end of file
-- 
2.7.4


From 139dc12528586ec860f9dcf50ef6f2b90084c5c7 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 4 Feb 2016 00:41:07 +0200
Subject: [PATCH 134/171] Step 16.7: add maps markup to the PartyDetails
 template

---
 client/imports/party-details/party-details.html | 14 +++++++++++++-
 1 file changed, 13 insertions(+), 1 deletion(-)

diff --git a/client/imports/party-details/party-details.html b/client/imports/party-details/party-details.html
index d4f1e09..a9095c7 100644
--- a/client/imports/party-details/party-details.html
+++ b/client/imports/party-details/party-details.html
@@ -6,7 +6,7 @@
   <input [disabled]="!isOwner" type="text" [(ngModel)]="party.description">
 
   <label>Location</label>
-  <input [disabled]="!isOwner" type="text" [(ngModel)]="party.location">
+  <input [disabled]="!isOwner" type="text" [(ngModel)]="party.location.name">
 
   <button [disabled]="!isOwner" type="submit">Save</button>
   <button [routerLink]="['/PartiesList']">Cancel</button>
@@ -26,3 +26,15 @@
   <input type="button" value="Maybe" (click)="reply('maybe')">
   <input type="button" value="No" (click)="reply('no')">
 </div>
+
+<sebm-google-map
+        [latitude]="lat || centerLat"
+        [longitude]="lng || centerLng"
+        [zoom]="8"
+        (mapClick)="mapClicked($event)">
+  <sebm-google-map-marker
+          *ngIf="lat && lng"
+          [latitude]="lat"
+          [longitude]="lng">
+  </sebm-google-map-marker>
+</sebm-google-map>
-- 
2.7.4


From 1fa394084e8e881df35f10bd7bd6d59160a9056a Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 4 Feb 2016 00:42:28 +0200
Subject: [PATCH 135/171] Step 16.8: add maps logic to the PartyDetails
 component

---
 client/imports/party-details/party-details.ts | 19 ++++++++++++++++++-
 1 file changed, 18 insertions(+), 1 deletion(-)

diff --git a/client/imports/party-details/party-details.ts b/client/imports/party-details/party-details.ts
index 82689b9..f29210d 100644
--- a/client/imports/party-details/party-details.ts
+++ b/client/imports/party-details/party-details.ts
@@ -6,11 +6,12 @@ import { RequireUser, InjectUser } from 'angular2-meteor-accounts-ui';
 import { MeteorComponent } from 'angular2-meteor';
 import { DisplayName } from '../pipes/pipes.ts';
 import { Mongo } from 'meteor/mongo';
+import {ANGULAR2_GOOGLE_MAPS_DIRECTIVES, MouseEvent} from 'angular2-google-maps/core';
 
 @Component({
   selector: 'party-details',
   templateUrl: '/client/imports/party-details/party-details.html',
-  directives: [RouterLink],
+  directives: [RouterLink, ANGULAR2_GOOGLE_MAPS_DIRECTIVES],
   pipes: [DisplayName]
 })
 @RequireUser()
@@ -19,6 +20,9 @@ export class PartyDetails extends MeteorComponent {
   party: Party;
   users: Mongo.Cursor<Object>;
   user: Meteor.User;
+  // Default center Palo Alto coordinates.
+  centerLat: Number = 37.4292;
+  centerLng: Number = -122.1381;
 
   constructor(params: RouteParams) {
     super();
@@ -107,4 +111,17 @@ export class PartyDetails extends MeteorComponent {
 
     return false;
   }
+
+  get lat(): Number {
+    return this.party && this.party.location.lat;
+  }
+
+  get lng(): Number {
+    return this.party && this.party.location.lng;
+  }
+
+  mapClicked($event: MouseEvent) {
+    this.party.location.lat = $event.coords.lat;
+    this.party.location.lng = $event.coords.lng;
+  }
 }
\ No newline at end of file
-- 
2.7.4


From 59a1fff657e70ab4c4895112385e63e496a98b72 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 4 Feb 2016 10:56:33 +0200
Subject: [PATCH 136/171] Step 16.9: create main CSS file and add maps styles
 there

---
 client/css/main.css  | 4 ++++
 client/css/main.scss | 7 ++++++-
 2 files changed, 10 insertions(+), 1 deletion(-)
 create mode 100644 client/css/main.css

diff --git a/client/css/main.css b/client/css/main.css
new file mode 100644
index 0000000..a5234b3
--- /dev/null
+++ b/client/css/main.css
@@ -0,0 +1,4 @@
+.sebm-google-map-container {
+    width: 400px;
+    height: 400px;
+}
\ No newline at end of file
diff --git a/client/css/main.scss b/client/css/main.scss
index a3dd324..9570b91 100644
--- a/client/css/main.scss
+++ b/client/css/main.scss
@@ -1,2 +1,7 @@
 @import "{}/node_modules/angular2-meteor-accounts-ui/build/login-buttons.scss";
-@import "{}/node_modules/angular2-pagination/build/pagination-controls-cmp.scss";
\ No newline at end of file
+@import "{}/node_modules/angular2-pagination/build/pagination-controls-cmp.scss";
+
+.sebm-google-map-container {
+  width: 400px;
+  height: 400px;
+}
\ No newline at end of file
-- 
2.7.4


From 738bef864e1b20fd8e91ae715b94c40d1ccb093f Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 4 Feb 2016 10:57:33 +0200
Subject: [PATCH 137/171] Step 16.10: add all parties locations on the map

---
 client/imports/parties-list/parties-list.html | 14 +++++++++++++-
 1 file changed, 13 insertions(+), 1 deletion(-)

diff --git a/client/imports/parties-list/parties-list.html b/client/imports/parties-list/parties-list.html
index 254161c..b4999e6 100644
--- a/client/imports/parties-list/parties-list.html
+++ b/client/imports/parties-list/parties-list.html
@@ -14,7 +14,7 @@
     <li *ngFor="let party of parties | paginate:{currentPage: 1, itemsPerPage: pageSize, totalItems: partiesSize}">
       <a [routerLink]="['/PartyDetails', {partyId: party._id}]">{{party.name}}</a>
       <p>{{party.description}}</p>
-      <p>{{party.location}}</p>
+      <p>{{party.location.name}}</p>
       <button [hidden]="!isOwner(party)"  (click)="removeParty(party)">X</button>
       <div>
         Who is coming:
@@ -24,5 +24,17 @@
       </div>
     </li>
   </ul>
+  <sebm-google-map
+          [latitude]="0"
+          [longitude]="0"
+          [zoom]="1">
+    <div *ngFor="let party of parties">
+      <sebm-google-map-marker
+              *ngIf="party.location.lat"
+              [latitude]="party.location.lat"
+              [longitude]="party.location.lng">
+      </sebm-google-map-marker>
+    </div>
+  </sebm-google-map>
   <pagination-controls (change)="onPageChanged($event.page)"></pagination-controls>
 </div>
\ No newline at end of file
-- 
2.7.4


From 86c1bc53343dddcf98bc34f22cdf19abed025e10 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 4 Feb 2016 10:58:13 +0200
Subject: [PATCH 138/171] Step 16.11: import maps dependencies in the
 PartiesList

---
 client/imports/parties-list/parties-list.ts | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/client/imports/parties-list/parties-list.ts b/client/imports/parties-list/parties-list.ts
index 20920cc..6b9f5cd 100644
--- a/client/imports/parties-list/parties-list.ts
+++ b/client/imports/parties-list/parties-list.ts
@@ -10,12 +10,13 @@ import { Counts } from 'meteor/tmeasday:publish-counts';
 import { PaginationService, PaginatePipe, PaginationControlsCmp } from 'angular2-pagination';
 import { RsvpPipe } from '../pipes/pipes.ts';
 import { Meteor } from 'meteor/meteor';
+import {ANGULAR2_GOOGLE_MAPS_DIRECTIVES} from 'angular2-google-maps/core';
 
 @Component({
   selector: 'parties-list',
   viewProviders: [PaginationService],
   templateUrl: '/client/imports/parties-list/parties-list.html',
-  directives: [PartiesForm, RouterLink, LoginButtons, PaginationControlsCmp],
+  directives: [ANGULAR2_GOOGLE_MAPS_DIRECTIVES, PartiesForm, RouterLink, LoginButtons, PaginationControlsCmp],
   pipes: [PaginatePipe, RsvpPipe]
 })
 @InjectUser()
-- 
2.7.4


From 6fdff83a6025aafd25b8d0575363a1b2b4369ca9 Mon Sep 17 00:00:00 2001
From: Uri Goldshtein <uri.goldshtein@gmail.com>
Date: Sat, 14 May 2016 19:17:38 +0300
Subject: [PATCH 139/171] Step 17.1: Add bootstrap package to the project

---
 package.json | 1 +
 1 file changed, 1 insertion(+)

diff --git a/package.json b/package.json
index e102d10..e3c0b2f 100644
--- a/package.json
+++ b/package.json
@@ -16,6 +16,7 @@
     "angular2-meteor-accounts-ui": "0.4.3",
     "angular2-meteor-auto-bootstrap": "0.5.5",
     "angular2-pagination": "0.2.1",
+    "bootstrap": "4.0.0-alpha.2",
     "es6-shim": "0.35.1",
     "meteor-node-stubs": "^0.2.3",
     "reflect-metadata": "0.1.2",
-- 
2.7.4


From 3b2cb57dc292ae0057d6f44821d161808b584fbe Mon Sep 17 00:00:00 2001
From: Uri Goldshtein <uri.goldshtein@gmail.com>
Date: Sat, 14 May 2016 19:20:26 +0300
Subject: [PATCH 140/171] Step 17.2: Import bootstrap style into the main style
 file

---
 client/css/main.scss | 1 +
 1 file changed, 1 insertion(+)

diff --git a/client/css/main.scss b/client/css/main.scss
index 9570b91..d858488 100644
--- a/client/css/main.scss
+++ b/client/css/main.scss
@@ -1,5 +1,6 @@
 @import "{}/node_modules/angular2-meteor-accounts-ui/build/login-buttons.scss";
 @import "{}/node_modules/angular2-pagination/build/pagination-controls-cmp.scss";
+@import "{}/node_modules/bootstrap/scss/bootstrap.scss";
 
 .sebm-google-map-container {
   width: 400px;
-- 
2.7.4


From 3f9300eb02b989b13b1510acf453acc2aa1f9d30 Mon Sep 17 00:00:00 2001
From: dotansimha <dotansimha@gmail.com>
Date: Fri, 6 May 2016 21:57:52 +0300
Subject: [PATCH 141/171] Step 17.3: Add bootstrap navbar

---
 client/app.html | 7 ++++++-
 1 file changed, 6 insertions(+), 1 deletion(-)

diff --git a/client/app.html b/client/app.html
index 90c6b64..b3c49f0 100644
--- a/client/app.html
+++ b/client/app.html
@@ -1 +1,6 @@
-<router-outlet></router-outlet>
\ No newline at end of file
+<nav class="navbar navbar-light bg-faded">
+  <a class="navbar-brand" href="#">Socially</a>
+</nav>
+<div class="container-fluid">
+  <router-outlet></router-outlet>
+</div>
\ No newline at end of file
-- 
2.7.4


From 081fe4d7de4bd830fa4361df3ad460b03e7453e2 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 4 Feb 2016 13:05:49 +0200
Subject: [PATCH 142/171] Step 17.4: Remove the login buttons from the parties
 list component

---
 client/imports/parties-list/parties-list.html | 1 -
 client/imports/parties-list/parties-list.ts   | 4 ++--
 2 files changed, 2 insertions(+), 3 deletions(-)

diff --git a/client/imports/parties-list/parties-list.html b/client/imports/parties-list/parties-list.html
index b4999e6..29b4bc3 100644
--- a/client/imports/parties-list/parties-list.html
+++ b/client/imports/parties-list/parties-list.html
@@ -2,7 +2,6 @@
   <parties-form [hidden]="!user" style="float: left"></parties-form>
   <input type="text" #searchtext placeholder="Search by Location">
   <button type="button" (click)="search(searchtext.value)">Search</button>
-  <login-buttons></login-buttons>
   <h1>Parties:</h1>
   <div>
     <select #sort (change)="changeSortOrder(sort.value)">
diff --git a/client/imports/parties-list/parties-list.ts b/client/imports/parties-list/parties-list.ts
index 6b9f5cd..a00ff03 100644
--- a/client/imports/parties-list/parties-list.ts
+++ b/client/imports/parties-list/parties-list.ts
@@ -3,7 +3,7 @@ import { Parties }     from '../../../collections/parties';
 import { PartiesForm } from '../parties-form/parties-form';
 import { Mongo }       from 'meteor/mongo';
 import { RouterLink }  from '@angular/router-deprecated';
-import { LoginButtons, InjectUser } from 'angular2-meteor-accounts-ui';
+import { InjectUser } from 'angular2-meteor-accounts-ui';
 import { MeteorComponent } from 'angular2-meteor';
 import { ReactiveVar } from 'meteor/reactive-var';
 import { Counts } from 'meteor/tmeasday:publish-counts';
@@ -16,7 +16,7 @@ import {ANGULAR2_GOOGLE_MAPS_DIRECTIVES} from 'angular2-google-maps/core';
   selector: 'parties-list',
   viewProviders: [PaginationService],
   templateUrl: '/client/imports/parties-list/parties-list.html',
-  directives: [ANGULAR2_GOOGLE_MAPS_DIRECTIVES, PartiesForm, RouterLink, LoginButtons, PaginationControlsCmp],
+  directives: [ANGULAR2_GOOGLE_MAPS_DIRECTIVES, PartiesForm, RouterLink, PaginationControlsCmp],
   pipes: [PaginatePipe, RsvpPipe]
 })
 @InjectUser()
-- 
2.7.4


From 9993a8da50aa4dd1a1716b49bb2a5502dd5de0cb Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 4 Feb 2016 13:06:13 +0200
Subject: [PATCH 143/171] Step 17.5: Add the login buttons to the app component

---
 client/app.html | 1 +
 1 file changed, 1 insertion(+)

diff --git a/client/app.html b/client/app.html
index b3c49f0..dffc2ea 100644
--- a/client/app.html
+++ b/client/app.html
@@ -1,5 +1,6 @@
 <nav class="navbar navbar-light bg-faded">
   <a class="navbar-brand" href="#">Socially</a>
+  <login-buttons class="pull-right"></login-buttons>
 </nav>
 <div class="container-fluid">
   <router-outlet></router-outlet>
-- 
2.7.4


From 2e96cc3ac17a926f6dde8bc257de0890075774a3 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 4 Feb 2016 13:06:25 +0200
Subject: [PATCH 144/171] Step 17.6: Import LoginButtons

---
 client/app.ts | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/client/app.ts b/client/app.ts
index 43ed55d..3dcf1f0 100644
--- a/client/app.ts
+++ b/client/app.ts
@@ -8,11 +8,12 @@ import { PartiesList } from './imports/parties-list/parties-list.ts';
 import { PartyDetails } from './imports/party-details/party-details.ts';
 import '../collections/methods.ts';
 import {ANGULAR2_GOOGLE_MAPS_PROVIDERS} from 'angular2-google-maps/core';
+import {LoginButtons} from 'angular2-meteor-accounts-ui';
 
 @Component({
   selector: 'app',
   templateUrl: '/client/app.html',
-  directives: [ROUTER_DIRECTIVES]
+  directives: [ROUTER_DIRECTIVES, LoginButtons]
 })
 @RouteConfig([
   { path: '/', as: 'PartiesList', component: PartiesList },
-- 
2.7.4


From da137c712dc996024095c17df8cdb48b2c314ec2 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 4 Feb 2016 13:07:00 +0200
Subject: [PATCH 145/171] Step 17.7: Add fonts and font awesome

---
 client/index.html | 5 +++++
 1 file changed, 5 insertions(+)

diff --git a/client/index.html b/client/index.html
index 2662e56..8a56f1a 100644
--- a/client/index.html
+++ b/client/index.html
@@ -1,3 +1,8 @@
+<head>
+  <meta name="viewport" content="width=device-width, initial-scale=1">
+  <link href='http://fonts.googleapis.com/css?family=Muli:400,300' rel='stylesheet' type='text/css'>
+  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css">
+</head>
 <body>
   <app></app>
 </body>
\ No newline at end of file
-- 
2.7.4


From f5456a3742e4fb3dbc521861bed90f4e83ae39ee Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 4 Feb 2016 14:24:13 +0200
Subject: [PATCH 146/171] Step 17.8: Update the add new party form layout

---
 client/imports/parties-form/parties-form.html | 30 ++++++++++++++++++---------
 1 file changed, 20 insertions(+), 10 deletions(-)

diff --git a/client/imports/parties-form/parties-form.html b/client/imports/parties-form/parties-form.html
index 1dc86c7..a5d11ef 100644
--- a/client/imports/parties-form/parties-form.html
+++ b/client/imports/parties-form/parties-form.html
@@ -1,11 +1,21 @@
-<form [ngFormModel]="partiesForm" #f="ngForm" (submit)="addParty(f.value)">
-  <label>Name</label>
-  <input type="text" ngControl="name">
-  <label>Description</label>
-  <input type="text" ngControl="description">
-  <label>Location</label>
-  <input type="text" ngControl="location">
-  <button>Add</button>
-  <label>Public</label>
-  <input type="checkbox" ngControl="public">
+<form [ngFormModel]="partiesForm" #f="ngForm" (submit)="addParty(f.value)" class="form-inline">
+  <fieldset class="form-group">
+    <label for="partyName">Party name</label>
+    <input id="partyName" class="form-control" type="text" ngControl="name" placeholder="Party name" />
+
+    <label for="description">Description</label>
+    <input id="description" class="form-control" type="text" ngControl="description" placeholder="Description">
+
+    <label for="location_name">Location</label>
+    <input id="location_name" class="form-control" type="text" ngControl="location" placeholder="Location name">
+
+    <div class="checkbox">
+      <label>
+        <input type="checkbox" ngControl="public">
+        Public
+      </label>
+    </div>
+
+    <button type="submit" class="btn btn-primary">Add Party!</button>
+  </fieldset>
 </form>
\ No newline at end of file
-- 
2.7.4


From 4242b7000dccf91feccecf664d8dabbbb12b5982 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Thu, 4 Feb 2016 14:24:29 +0200
Subject: [PATCH 147/171] Step 17.9: Update parties list layout

---
 client/imports/parties-list/parties-list.html | 129 +++++++++++++++++++-------
 1 file changed, 95 insertions(+), 34 deletions(-)

diff --git a/client/imports/parties-list/parties-list.html b/client/imports/parties-list/parties-list.html
index 29b4bc3..589bc37 100644
--- a/client/imports/parties-list/parties-list.html
+++ b/client/imports/parties-list/parties-list.html
@@ -1,39 +1,100 @@
-<div>
-  <parties-form [hidden]="!user" style="float: left"></parties-form>
-  <input type="text" #searchtext placeholder="Search by Location">
-  <button type="button" (click)="search(searchtext.value)">Search</button>
-  <h1>Parties:</h1>
-  <div>
-    <select #sort (change)="changeSortOrder(sort.value)">
+<div class="row">
+  <div class="col-md-12">
+    <div class="jumbotron">
+      <h3>Create a new party!</h3>
+      <parties-form [hidden]="!user"></parties-form>
+      <div [hidden]="user">You need to login to create new parties!</div>
+    </div>
+  </div>
+</div>
+<div class="row ma-filters">
+  <div class="col-md-6">
+    <h3>All Parties:</h3>
+    <form class="form-inline">
+      <input type="text" class="form-control" #searchtext placeholder="Search by Location">
+      <button type="button" class="btn btn-primary" (click)="search(searchtext.value)">Search</button>
+      Sort by name: <select class="form-control" #sort (change)="changeSortOrder(sort.value)">
       <option value="1" selected>Ascending</option>
       <option value="-1">Descending</option>
     </select>
+    </form>
+  </div>
+</div>
+<div class="row">
+  <div class="col-md-6">
+    <ul class="list-group">
+      <li class="list-group-item">
+        <pagination-controls (change)="onPageChanged($event.page)"></pagination-controls>
+      </li>
+      <li *ngFor="let party of parties | paginate:{currentPage: 1, itemsPerPage: pageSize, totalItems: partiesSize}"
+          class="list-group-item ma-party-item">
+        <div class="row">
+          <div class="col-sm-8">
+            <h2 class="ma-party-name">
+              <a [routerLink]="['/PartyDetails', {partyId: party._id}]">{{party.name}}</a>
+            </h2>
+            @ {{party.location.name}}
+            <p class="ma-party-description">
+              {{party.description}}
+            </p>
+          </div>
+          <div class="col-sm-4">
+            <button class="btn btn-danger pull-right" [hidden]="!isOwner(party)" (click)="removeParty(party)"><i
+                    class="fa fa-times"></i></button>
+          </div>
+        </div>
+        <div class="row ma-party-item-bottom">
+          <div class="col-sm-4">
+            <div class="ma-rsvp-sum">
+              <div class="ma-rsvp-amount">
+                <div class="ma-amount">
+                  {{party | rsvp:'yes'}}
+                </div>
+                <div class="ma-rsvp-title">
+                  YES
+                </div>
+              </div>
+              <div class="ma-rsvp-amount">
+                <div class="ma-amount">
+                  {{party | rsvp:'maybe'}}
+                </div>
+                <div class="ma-rsvp-title">
+                  MAYBE
+                </div>
+              </div>
+              <div class="ma-rsvp-amount">
+                <div class="ma-amount">
+                  {{party | rsvp:'no'}}
+                </div>
+                <div class="ma-rsvp-title">
+                  NO
+                </div>
+              </div>
+            </div>
+          </div>
+        </div>
+      </li>
+      <li class="list-group-item">
+        <pagination-controls (change)="onPageChanged($event.page)"></pagination-controls>
+      </li>
+    </ul>
+  </div>
+  <div class="col-md-6">
+    <ul class="list-group">
+      <li class="list-group-item">
+        <sebm-google-map
+                [latitude]="0"
+                [longitude]="0"
+                [zoom]="1">
+          <div *ngFor="let party of parties">
+            <sebm-google-map-marker
+                    *ngIf="party.location.lat"
+                    [latitude]="party.location.lat"
+                    [longitude]="party.location.lng">
+            </sebm-google-map-marker>
+          </div>
+        </sebm-google-map>
+      </li>
+    </ul>
   </div>
-  <ul>
-    <li *ngFor="let party of parties | paginate:{currentPage: 1, itemsPerPage: pageSize, totalItems: partiesSize}">
-      <a [routerLink]="['/PartyDetails', {partyId: party._id}]">{{party.name}}</a>
-      <p>{{party.description}}</p>
-      <p>{{party.location.name}}</p>
-      <button [hidden]="!isOwner(party)"  (click)="removeParty(party)">X</button>
-      <div>
-        Who is coming:
-        Yes - {{party | rsvp:'yes'}}
-        Maybe - {{party | rsvp:'maybe'}}
-        No - {{party | rsvp:'no'}}
-      </div>
-    </li>
-  </ul>
-  <sebm-google-map
-          [latitude]="0"
-          [longitude]="0"
-          [zoom]="1">
-    <div *ngFor="let party of parties">
-      <sebm-google-map-marker
-              *ngIf="party.location.lat"
-              [latitude]="party.location.lat"
-              [longitude]="party.location.lng">
-      </sebm-google-map-marker>
-    </div>
-  </sebm-google-map>
-  <pagination-controls (change)="onPageChanged($event.page)"></pagination-controls>
 </div>
\ No newline at end of file
-- 
2.7.4


From c5ea169a15d6d85059c52fc753e80b2eba17b73c Mon Sep 17 00:00:00 2001
From: Uri Goldshtein <uri.goldshtein@gmail.com>
Date: Sat, 14 May 2016 19:44:24 +0300
Subject: [PATCH 148/171] Step 17.10: Add parties-list styles

---
 client/css/main.scss                           |  43 ++++++++-
 client/imports/parties-list/_parties-list.scss | 125 +++++++++++++++++++++++++
 2 files changed, 165 insertions(+), 3 deletions(-)
 create mode 100644 client/imports/parties-list/_parties-list.scss

diff --git a/client/css/main.scss b/client/css/main.scss
index d858488..6040abd 100644
--- a/client/css/main.scss
+++ b/client/css/main.scss
@@ -2,7 +2,44 @@
 @import "{}/node_modules/angular2-pagination/build/pagination-controls-cmp.scss";
 @import "{}/node_modules/bootstrap/scss/bootstrap.scss";
 
+$color1 : #2F2933;
+$color2 : #01A2A6;
+$color3 : #29D9C2;
+$color4 : #BDF271;
+$color5 : #FFFFA6;
+$color6 : #2F2933;
+$color7 : #FF6F69;
+
+html, body {
+  height: 100%;
+}
+
+body {
+  background-color: #f8f8f8;
+  font-family: 'Muli', sans-serif;
+}
+
 .sebm-google-map-container {
-  width: 400px;
-  height: 400px;
-}
\ No newline at end of file
+  width: 450px;
+  height: 450px;
+}
+
+.navbar {
+  background-color: #ffffff;
+  border-bottom: #eee 1px solid;
+  color: $color3;
+  font-family: 'Muli', sans-serif;
+  a {
+    color: $color3;
+    text-decoration: none !important;
+  }
+
+  .navbar-right-container {
+    position: absolute;
+    top: 17px;
+    right: 17px;
+  }
+}
+
+@import "../imports/parties-list/parties-list";
+
diff --git a/client/imports/parties-list/_parties-list.scss b/client/imports/parties-list/_parties-list.scss
new file mode 100644
index 0000000..3393841
--- /dev/null
+++ b/client/imports/parties-list/_parties-list.scss
@@ -0,0 +1,125 @@
+.ma-add-button-container {
+  button.btn {
+    background: $color3;
+    float: right;
+    margin-right: 5px;
+    outline: none;
+    i {
+      color: $color5;
+    }
+  }
+}
+
+.ma-parties-col {
+  padding-top: 20px;
+}
+
+.ma-filters {
+  margin-bottom: 10px;
+}
+
+.ma-party-item {
+  .ma-party-name {
+    margin-bottom: 20px;
+    a {
+      color: $color6;
+      text-decoration: none !important;
+      font-weight: 400;
+    }
+  }
+  .ma-party-description {
+    color: $color6;
+    font-weight: 300;
+    padding-left: 18px;
+    font-size: 14px;
+  }
+
+  .ma-remove {
+    color: lighten($color7, 20%);
+    position: absolute;
+    right: 20px;
+    top: 20px;
+    &:hover {
+      color: $color7;
+    }
+  }
+
+  .ma-party-item-bottom {
+    padding-top: 10px;
+    .ma-posted-by-col {
+      .ma-posted-by {
+        color: darken($color4, 30%);
+        font-size: 12px;
+      }
+      .ma-everyone-invited {
+        @media (max-width: 400px) {
+          display: block;
+          i {
+            margin-left: 0px !important;
+          }
+        }
+        font-size: 12px;
+        color: darken($color4, 10%);
+        i {
+          color: darken($color4, 10%);
+          margin-left: 5px;
+        }
+      }
+    }
+
+    .ma-rsvp-buttons {
+      input.btn {
+        color: darken($color3, 20%);
+        background: transparent !important;
+        outline: none;
+        padding-left: 0;
+        &:active {
+          box-shadow: none;
+        }
+        &:hover {
+          color: darken($color3, 30%);
+        }
+        &.btn-primary {
+          color: lighten($color3, 10%);
+          border: 0;
+          background: transparent !important;
+        }
+      }
+    }
+
+    .ma-rsvp-sum {
+      width: 160px;
+      @media (min-width: 400px) {
+        float: right;
+      }
+      @media (max-width: 400px) {
+        margin: 0 auto;
+      }
+    }
+    .ma-rsvp-amount {
+      display: inline-block;
+      text-align: center;
+      width: 50px;
+      .ma-amount {
+        font-weight: bold;
+        font-size: 20px;
+      }
+      .ma-rsvp-title {
+        font-size: 11px;
+        color: #aaa;
+        text-transform: uppercase;
+      }
+    }
+  }
+}
+
+.ma-angular-map-col {
+  .angular-google-map-container, .angular-google-map {
+    height: 100%;
+    width: 100%;
+  }
+}
+
+.search-form {
+  margin-bottom: 1em;
+}
-- 
2.7.4


From fd5f5552e478a7da4506d571a902eaf04f378875 Mon Sep 17 00:00:00 2001
From: Uri Goldshtein <uri.goldshtein@gmail.com>
Date: Sat, 14 May 2016 19:50:49 +0300
Subject: [PATCH 149/171] Step 17.11: Add style file for the party details page

---
 client/css/main.scss                             |  1 +
 client/imports/party-details/_party-details.scss | 32 ++++++++++++++++++++++++
 2 files changed, 33 insertions(+)
 create mode 100644 client/imports/party-details/_party-details.scss

diff --git a/client/css/main.scss b/client/css/main.scss
index 6040abd..eb2bce1 100644
--- a/client/css/main.scss
+++ b/client/css/main.scss
@@ -42,4 +42,5 @@ body {
 }
 
 @import "../imports/parties-list/parties-list";
+@import "../imports/party-details/party-details";
 
diff --git a/client/imports/party-details/_party-details.scss b/client/imports/party-details/_party-details.scss
new file mode 100644
index 0000000..f237bb0
--- /dev/null
+++ b/client/imports/party-details/_party-details.scss
@@ -0,0 +1,32 @@
+.ma-party-details-container {
+  padding: 20px;
+
+  .angular-google-map-container {
+    width: 100%;
+    height: 100%;
+  }
+
+  .angular-google-map {
+    width: 100%;
+    height: 400px;
+  }
+
+  .ma-map-title {
+    font-size: 16px;
+    font-weight: bolder;
+  }
+
+  .ma-invite-list {
+    margin-top: 20px;
+    margin-bottom: 20px;
+
+    h3 {
+      font-size: 16px;
+      font-weight: bolder;
+    }
+
+    ul {
+      padding: 0;
+    }
+  }
+}
-- 
2.7.4


From 81206aee118e69d081c6414c009876d2819ccd3c Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Fri, 5 Feb 2016 16:16:43 +0200
Subject: [PATCH 150/171] Step 17.12: Update the layout of the party details
 page

---
 client/imports/party-details/party-details.html | 90 +++++++++++++++----------
 1 file changed, 55 insertions(+), 35 deletions(-)

diff --git a/client/imports/party-details/party-details.html b/client/imports/party-details/party-details.html
index a9095c7..a22e89c 100644
--- a/client/imports/party-details/party-details.html
+++ b/client/imports/party-details/party-details.html
@@ -1,40 +1,60 @@
-<form (submit)="saveParty(party)" *ngIf="party">
-  <label>Name</label>
-  <input [disabled]="!isOwner" type="text" [(ngModel)]="party.name">
+<div class="row ma-party-details-container">
+  <div class="col-sm-6 col-sm-offset-3">
 
-  <label>Description</label>
-  <input [disabled]="!isOwner" type="text" [(ngModel)]="party.description">
+    <legend>View and Edit Your Party Details:</legend>
+    <form class="form-horizontal" (submit)="saveParty(party)" *ngIf="party">
+      <div class="form-group">
+        <label>Party Name</label>
+        <input [disabled]="!isOwner" type="text" [(ngModel)]="party.name" class="form-control">
+      </div>
+      <div class="form-group">
+        <label>Description</label>
+        <input [disabled]="!isOwner" type="text" [(ngModel)]="party.description" class="form-control">
+      </div>
+      <div class="form-group">
+        <label>Location name</label>
+        <input [disabled]="!isOwner" type="text" [(ngModel)]="party.location.name" class="form-control">
+      </div>
+      <div class="form-group">
+        <button [disabled]="!isOwner" type="submit" class="btn btn-primary">Save</button>
+        <button [routerLink]="['/PartiesList']" class="btn">Back</button>
+      </div>
+    </form>
 
-  <label>Location</label>
-  <input [disabled]="!isOwner" type="text" [(ngModel)]="party.location.name">
+    <div class="ma-invite-list" ng-show="partyDetails.canInvite()">
+      <h3>
+        Users to invite:
+      </h3>
+      <ul>
+        <li *ngFor="let user of users">
+          <div>{{ user | displayName }}</div>
+          <button (click)="invite(user)" class="btn btn-primary btn-sm">Invite</button>
+        </li>
+      </ul>
+      <div *ngIf="isInvited">
+        <h2>Reply to the invitation</h2>
+        <input type="button" class="btn btn-primary" value="I'm going!" (click)="reply('yes')">
+        <input type="button" class="btn btn-warning" value="Maybe" (click)="reply('maybe')">
+        <input type="button" class="btn btn-danger" value="No" (click)="reply('no')">
+      </div>
+    </div>
 
-  <button [disabled]="!isOwner" type="submit">Save</button>
-  <button [routerLink]="['/PartiesList']">Cancel</button>
-</form>
+    <h3 class="ma-map-title">
+      Click the map to set the party location
+    </h3>
 
-<ul *ngIf="isOwner || isPublic">
-  Users to invite:
-  <li *ngFor="let user of users">
-    <div>{{ user | displayName }}</div>
-    <button (click)="invite(user)">Invite</button>
-  </li>
-</ul>
-
-<div *ngIf="isInvited">
-  <h2>Reply to the invitation</h2>
-  <input type="button" value="I'm going!" (click)="reply('yes')">
-  <input type="button" value="Maybe" (click)="reply('maybe')">
-  <input type="button" value="No" (click)="reply('no')">
+    <div class="angular-google-map-container">
+      <sebm-google-map
+              [latitude]="lat || centerLat"
+              [longitude]="lng || centerLng"
+              [zoom]="8"
+              (mapClick)="mapClicked($event)">
+        <sebm-google-map-marker
+                *ngIf="lat && lng"
+                [latitude]="lat"
+                [longitude]="lng">
+        </sebm-google-map-marker>
+      </sebm-google-map>
+    </div>
+  </div>
 </div>
-
-<sebm-google-map
-        [latitude]="lat || centerLat"
-        [longitude]="lng || centerLng"
-        [zoom]="8"
-        (mapClick)="mapClicked($event)">
-  <sebm-google-map-marker
-          *ngIf="lat && lng"
-          [latitude]="lat"
-          [longitude]="lng">
-  </sebm-google-map-marker>
-</sebm-google-map>
-- 
2.7.4


From a56d7b9b80cee83206c1e42322e4c7d8633d39a5 Mon Sep 17 00:00:00 2001
From: Uri Goldshtein <uri.goldshtein@gmail.com>
Date: Sat, 14 May 2016 19:59:53 +0300
Subject: [PATCH 151/171] Step 18.1: Removed bootstrap import

---
 client/css/main.scss | 1 -
 1 file changed, 1 deletion(-)

diff --git a/client/css/main.scss b/client/css/main.scss
index eb2bce1..f3a2528 100644
--- a/client/css/main.scss
+++ b/client/css/main.scss
@@ -1,6 +1,5 @@
 @import "{}/node_modules/angular2-meteor-accounts-ui/build/login-buttons.scss";
 @import "{}/node_modules/angular2-pagination/build/pagination-controls-cmp.scss";
-@import "{}/node_modules/bootstrap/scss/bootstrap.scss";
 
 $color1 : #2F2933;
 $color2 : #01A2A6;
-- 
2.7.4


From 0f6183a28310d557e1d74f4d6c102114c0668145 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Sat, 6 Feb 2016 10:32:42 +0200
Subject: [PATCH 152/171] Step 18.2: Add ng2 material package

---
 package.json | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/package.json b/package.json
index e3c0b2f..5b1822e 100644
--- a/package.json
+++ b/package.json
@@ -16,7 +16,7 @@
     "angular2-meteor-accounts-ui": "0.4.3",
     "angular2-meteor-auto-bootstrap": "0.5.5",
     "angular2-pagination": "0.2.1",
-    "bootstrap": "4.0.0-alpha.2",
+    "ng2-material": "0.4.1",
     "es6-shim": "0.35.1",
     "meteor-node-stubs": "^0.2.3",
     "reflect-metadata": "0.1.2",
-- 
2.7.4


From 834a238dc98648e132fb2dfcf525f9b9741c9324 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Sat, 6 Feb 2016 10:32:57 +0200
Subject: [PATCH 153/171] Step 18.3: Import ng2 material components to the main
 app

---
 client/app.ts        | 6 ++++--
 client/css/main.scss | 2 ++
 2 files changed, 6 insertions(+), 2 deletions(-)

diff --git a/client/app.ts b/client/app.ts
index 3dcf1f0..609c55f 100644
--- a/client/app.ts
+++ b/client/app.ts
@@ -1,5 +1,7 @@
 import 'reflect-metadata';
 import 'zone.js/dist/zone';
+import {MATERIAL_PROVIDERS, MATERIAL_DIRECTIVES} from 'ng2-material';
+
 import { Component, provide } from '@angular/core';
 import { bootstrap } from 'angular2-meteor-auto-bootstrap';
 import { ROUTER_PROVIDERS, ROUTER_DIRECTIVES, RouteConfig } from '@angular/router-deprecated';
@@ -13,7 +15,7 @@ import {LoginButtons} from 'angular2-meteor-accounts-ui';
 @Component({
   selector: 'app',
   templateUrl: '/client/app.html',
-  directives: [ROUTER_DIRECTIVES, LoginButtons]
+  directives: [ROUTER_DIRECTIVES, LoginButtons, MATERIAL_DIRECTIVES]
 })
 @RouteConfig([
   { path: '/', as: 'PartiesList', component: PartiesList },
@@ -21,4 +23,4 @@ import {LoginButtons} from 'angular2-meteor-accounts-ui';
 ])
 class Socially {}
 
-bootstrap(Socially, [ROUTER_PROVIDERS, ANGULAR2_GOOGLE_MAPS_PROVIDERS, provide(APP_BASE_HREF, { useValue: '/' })]);
\ No newline at end of file
+bootstrap(Socially, [MATERIAL_PROVIDERS, ROUTER_PROVIDERS, ANGULAR2_GOOGLE_MAPS_PROVIDERS, provide(APP_BASE_HREF, { useValue: '/' })]);
diff --git a/client/css/main.scss b/client/css/main.scss
index f3a2528..71a87ec 100644
--- a/client/css/main.scss
+++ b/client/css/main.scss
@@ -1,5 +1,7 @@
 @import "{}/node_modules/angular2-meteor-accounts-ui/build/login-buttons.scss";
 @import "{}/node_modules/angular2-pagination/build/pagination-controls-cmp.scss";
+@import "{}/node_modules/ng2-material/all.scss";
+@import "{}/node_modules/ng2-material/font/font.scss";
 
 $color1 : #2F2933;
 $color2 : #01A2A6;
-- 
2.7.4


From ab0143544f3fbc6cd4fbc2a0331a20d2274addf5 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Sat, 6 Feb 2016 10:33:22 +0200
Subject: [PATCH 154/171] Step 18.4: Import the fonts for material

---
 client/index.html | 5 ++---
 1 file changed, 2 insertions(+), 3 deletions(-)

diff --git a/client/index.html b/client/index.html
index 8a56f1a..c6c91b2 100644
--- a/client/index.html
+++ b/client/index.html
@@ -1,8 +1,7 @@
 <head>
   <meta name="viewport" content="width=device-width, initial-scale=1">
-  <link href='http://fonts.googleapis.com/css?family=Muli:400,300' rel='stylesheet' type='text/css'>
-  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css">
+  <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
 </head>
 <body>
-  <app></app>
+  <app layout="column"></app>
 </body>
\ No newline at end of file
-- 
2.7.4


From 7bd10c7f94498bd492e5e0e4b26adf14f0c6ca7f Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Sat, 6 Feb 2016 10:33:40 +0200
Subject: [PATCH 155/171] Step 18.5: Change the nav bar and the layout

---
 client/app.html | 17 ++++++++++-------
 client/app.ts   |  4 +++-
 package.json    |  4 +++-
 3 files changed, 16 insertions(+), 9 deletions(-)

diff --git a/client/app.html b/client/app.html
index dffc2ea..4ad9b7e 100644
--- a/client/app.html
+++ b/client/app.html
@@ -1,7 +1,10 @@
-<nav class="navbar navbar-light bg-faded">
-  <a class="navbar-brand" href="#">Socially</a>
-  <login-buttons class="pull-right"></login-buttons>
-</nav>
-<div class="container-fluid">
-  <router-outlet></router-outlet>
-</div>
\ No newline at end of file
+<md-toolbar>
+  <h2>
+    <a ui-sref="parties"><span class="md-title">Socially</span></a>
+  </h2>
+  <span flex></span>
+  <div class="navbar-right navbar-text">
+    <login-buttons></login-buttons>
+  </div>
+</md-toolbar>
+<router-outlet flex-gt-sm layout-gt-sm="row"></router-outlet>
\ No newline at end of file
diff --git a/client/app.ts b/client/app.ts
index 609c55f..99a1a61 100644
--- a/client/app.ts
+++ b/client/app.ts
@@ -1,6 +1,7 @@
 import 'reflect-metadata';
 import 'zone.js/dist/zone';
 import {MATERIAL_PROVIDERS, MATERIAL_DIRECTIVES} from 'ng2-material';
+import {MdToolbar} from '@angular2-material/toolbar';
 
 import { Component, provide } from '@angular/core';
 import { bootstrap } from 'angular2-meteor-auto-bootstrap';
@@ -11,11 +12,12 @@ import { PartyDetails } from './imports/party-details/party-details.ts';
 import '../collections/methods.ts';
 import {ANGULAR2_GOOGLE_MAPS_PROVIDERS} from 'angular2-google-maps/core';
 import {LoginButtons} from 'angular2-meteor-accounts-ui';
+import '../node_modules/@angular2-material/toolbar/toolbar.css'
 
 @Component({
   selector: 'app',
   templateUrl: '/client/app.html',
-  directives: [ROUTER_DIRECTIVES, LoginButtons, MATERIAL_DIRECTIVES]
+  directives: [ROUTER_DIRECTIVES, LoginButtons, MATERIAL_DIRECTIVES, MdToolbar]
 })
 @RouteConfig([
   { path: '/', as: 'PartiesList', component: PartiesList },
diff --git a/package.json b/package.json
index 5b1822e..6367953 100644
--- a/package.json
+++ b/package.json
@@ -11,14 +11,16 @@
     "@angular/platform-browser": "2.0.0-rc.1",
     "@angular/platform-browser-dynamic": "2.0.0-rc.1",
     "@angular/router-deprecated": "^2.0.0-rc.1",
+    "@angular2-material/core": "^2.0.0-alpha.4",
+    "@angular2-material/toolbar": "^2.0.0-alpha.4",
     "angular2-google-maps": "0.10.0",
     "angular2-meteor": "0.5.5",
     "angular2-meteor-accounts-ui": "0.4.3",
     "angular2-meteor-auto-bootstrap": "0.5.5",
     "angular2-pagination": "0.2.1",
-    "ng2-material": "0.4.1",
     "es6-shim": "0.35.1",
     "meteor-node-stubs": "^0.2.3",
+    "ng2-material": "0.4.1",
     "reflect-metadata": "0.1.2",
     "rxjs": "5.0.0-beta.6",
     "zone.js": "0.6.12"
-- 
2.7.4


From 96f5e6fa78586d905be522acedd66a9248cb4b78 Mon Sep 17 00:00:00 2001
From: dotansimha <dotansimha@gmail.com>
Date: Tue, 24 May 2016 21:35:46 +0300
Subject: [PATCH 156/171]  Step 18.6: Import the components into the parties
 form

---
 client/imports/parties-form/parties-form.ts | 6 +++++-
 package.json                                | 2 ++
 2 files changed, 7 insertions(+), 1 deletion(-)

diff --git a/client/imports/parties-form/parties-form.ts b/client/imports/parties-form/parties-form.ts
index 74a19a1..fe3fdf0 100644
--- a/client/imports/parties-form/parties-form.ts
+++ b/client/imports/parties-form/parties-form.ts
@@ -3,10 +3,14 @@ import { Component } from '@angular/core';
 import { FormBuilder, ControlGroup, Validators, Control } from '@angular/common';
 import { Parties } from '../../../collections/parties.ts';
 import { Meteor } from 'meteor/meteor';
+import {MATERIAL_DIRECTIVES} from 'ng2-material';
+import {MdCheckbox} from '@angular2-material/checkbox';
+import {MD_INPUT_DIRECTIVES} from '@angular2-material/input';
 
 @Component({
   selector: 'parties-form',
-  templateUrl: '/client/imports/parties-form/parties-form.html'
+  templateUrl: '/client/imports/parties-form/parties-form.html',
+  directives: [MATERIAL_DIRECTIVES, MdCheckbox, MD_INPUT_DIRECTIVES]
 })
 export class PartiesForm {
   partiesForm: ControlGroup;
diff --git a/package.json b/package.json
index 6367953..3f0296e 100644
--- a/package.json
+++ b/package.json
@@ -12,6 +12,8 @@
     "@angular/platform-browser-dynamic": "2.0.0-rc.1",
     "@angular/router-deprecated": "^2.0.0-rc.1",
     "@angular2-material/core": "^2.0.0-alpha.4",
+    "@angular2-material/checkbox": "^2.0.0-alpha.4",
+    "@angular2-material/input": "^2.0.0-alpha.4",
     "@angular2-material/toolbar": "^2.0.0-alpha.4",
     "angular2-google-maps": "0.10.0",
     "angular2-meteor": "0.5.5",
-- 
2.7.4


From 17f0c7ed166bf4d01616095b68c47a5635c53436 Mon Sep 17 00:00:00 2001
From: dotansimha <dotansimha@gmail.com>
Date: Tue, 24 May 2016 21:36:00 +0300
Subject: [PATCH 157/171] Step 18.7: Update the view of the parties form

---
 client/imports/parties-form/parties-form.html | 20 ++++++--------------
 1 file changed, 6 insertions(+), 14 deletions(-)

diff --git a/client/imports/parties-form/parties-form.html b/client/imports/parties-form/parties-form.html
index a5d11ef..1a2c0ff 100644
--- a/client/imports/parties-form/parties-form.html
+++ b/client/imports/parties-form/parties-form.html
@@ -1,21 +1,13 @@
-<form [ngFormModel]="partiesForm" #f="ngForm" (submit)="addParty(f.value)" class="form-inline">
+<form [ngFormModel]="partiesForm" #f="ngForm" (submit)="addParty(f.value)">
   <fieldset class="form-group">
-    <label for="partyName">Party name</label>
-    <input id="partyName" class="form-control" type="text" ngControl="name" placeholder="Party name" />
-
-    <label for="description">Description</label>
-    <input id="description" class="form-control" type="text" ngControl="description" placeholder="Description">
-
-    <label for="location_name">Location</label>
-    <input id="location_name" class="form-control" type="text" ngControl="location" placeholder="Location name">
+    <md-input ngControl="name" placeholder="Party name"></md-input>
+    <md-input ngControl="description" placeholder="Description"></md-input>
+    <md-input ngControl="location" placeholder="Location name"></md-input>
 
     <div class="checkbox">
-      <label>
-        <input type="checkbox" ngControl="public">
-        Public
-      </label>
+        <md-checkbox [(checked)]="public">Public</md-checkbox>
     </div>
 
-    <button type="submit" class="btn btn-primary">Add Party!</button>
+    <button md-raised-button type="submit" class="md-primary">Add Party!</button>
   </fieldset>
 </form>
\ No newline at end of file
-- 
2.7.4


From 8700458f33c6934e66c89d7b39a0a156f41311e6 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Sat, 6 Feb 2016 11:14:41 +0200
Subject: [PATCH 158/171] Step 18.8: Add the import to the parties list

---
 client/imports/parties-list/parties-list.ts | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/client/imports/parties-list/parties-list.ts b/client/imports/parties-list/parties-list.ts
index a00ff03..0c2a4be 100644
--- a/client/imports/parties-list/parties-list.ts
+++ b/client/imports/parties-list/parties-list.ts
@@ -11,12 +11,13 @@ import { PaginationService, PaginatePipe, PaginationControlsCmp } from 'angular2
 import { RsvpPipe } from '../pipes/pipes.ts';
 import { Meteor } from 'meteor/meteor';
 import {ANGULAR2_GOOGLE_MAPS_DIRECTIVES} from 'angular2-google-maps/core';
+import {MATERIAL_DIRECTIVES} from 'ng2-material';
 
 @Component({
   selector: 'parties-list',
   viewProviders: [PaginationService],
   templateUrl: '/client/imports/parties-list/parties-list.html',
-  directives: [ANGULAR2_GOOGLE_MAPS_DIRECTIVES, PartiesForm, RouterLink, PaginationControlsCmp],
+  directives: [MATERIAL_DIRECTIVES, ANGULAR2_GOOGLE_MAPS_DIRECTIVES, PartiesForm, RouterLink, PaginationControlsCmp],
   pipes: [PaginatePipe, RsvpPipe]
 })
 @InjectUser()
-- 
2.7.4


From 60abca89aedaf7add314739253f07a10884272a0 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Sat, 6 Feb 2016 11:15:01 +0200
Subject: [PATCH 159/171] Step 18.9: Change that layout of the parties list

---
 client/imports/parties-list/parties-list.html | 164 +++++++++++---------------
 client/imports/parties-list/parties-list.ts   |   3 +-
 2 files changed, 71 insertions(+), 96 deletions(-)

diff --git a/client/imports/parties-list/parties-list.html b/client/imports/parties-list/parties-list.html
index 589bc37..431ca74 100644
--- a/client/imports/parties-list/parties-list.html
+++ b/client/imports/parties-list/parties-list.html
@@ -1,100 +1,74 @@
-<div class="row">
-  <div class="col-md-12">
-    <div class="jumbotron">
-      <h3>Create a new party!</h3>
-      <parties-form [hidden]="!user"></parties-form>
-      <div [hidden]="user">You need to login to create new parties!</div>
-    </div>
-  </div>
-</div>
-<div class="row ma-filters">
-  <div class="col-md-6">
-    <h3>All Parties:</h3>
-    <form class="form-inline">
-      <input type="text" class="form-control" #searchtext placeholder="Search by Location">
-      <button type="button" class="btn btn-primary" (click)="search(searchtext.value)">Search</button>
-      Sort by name: <select class="form-control" #sort (change)="changeSortOrder(sort.value)">
-      <option value="1" selected>Ascending</option>
-      <option value="-1">Descending</option>
-    </select>
-    </form>
-  </div>
-</div>
-<div class="row">
-  <div class="col-md-6">
-    <ul class="list-group">
-      <li class="list-group-item">
-        <pagination-controls (change)="onPageChanged($event.page)"></pagination-controls>
-      </li>
-      <li *ngFor="let party of parties | paginate:{currentPage: 1, itemsPerPage: pageSize, totalItems: partiesSize}"
-          class="list-group-item ma-party-item">
-        <div class="row">
-          <div class="col-sm-8">
-            <h2 class="ma-party-name">
-              <a [routerLink]="['/PartyDetails', {partyId: party._id}]">{{party.name}}</a>
-            </h2>
-            @ {{party.location.name}}
-            <p class="ma-party-description">
-              {{party.description}}
-            </p>
-          </div>
-          <div class="col-sm-4">
-            <button class="btn btn-danger pull-right" [hidden]="!isOwner(party)" (click)="removeParty(party)"><i
-                    class="fa fa-times"></i></button>
-          </div>
-        </div>
-        <div class="row ma-party-item-bottom">
-          <div class="col-sm-4">
-            <div class="ma-rsvp-sum">
-              <div class="ma-rsvp-amount">
-                <div class="ma-amount">
-                  {{party | rsvp:'yes'}}
-                </div>
-                <div class="ma-rsvp-title">
-                  YES
-                </div>
-              </div>
-              <div class="ma-rsvp-amount">
-                <div class="ma-amount">
-                  {{party | rsvp:'maybe'}}
+<md-content flex layout="row" class="ma-parties-list">
+    <div layout="row" flex>
+        <div flex="50">
+            <div>
+                <md-content class="new-party-form-container">
+                    <md-toolbar>
+                        <div class="md-toolbar-tools">
+                            <h3>Create a new party!</h3>
+                        </div>
+                    </md-toolbar>
+                    <parties-form [hidden]="!user"></parties-form>
+                    <div [hidden]="user">You need to login to create new parties!</div>
+                </md-content>
+                <div layout-padding layout="row">
+                    <md-input #searchtext placeholder="Search by Location"></md-input>
                 </div>
-                <div class="ma-rsvp-title">
-                  MAYBE
+                <div layout-padding layout="row">
+                    Sort by name: <select class="form-control" #sort (change)="changeSortOrder(sort.value)">
+                    <option value="1" selected>Ascending</option>
+                    <option value="-1">Descending</option>
+                </select>
                 </div>
-              </div>
-              <div class="ma-rsvp-amount">
-                <div class="ma-amount">
-                  {{party | rsvp:'no'}}
+            </div>
+            <md-content class="md-padding" style="padding-top:0;">
+                <pagination-controls (change)="onPageChanged($event.page)"></pagination-controls>
+                <div *ngFor="let party of parties | paginate:{currentPage: 1, itemsPerPage: pageSize, totalItems: partiesSize}"
+                     class="ma-party">
+                    <md-card>
+                        <md-card-content>
+                            <h2 class="md-title ma-name" style=""><a
+                                    [routerLink]="['/PartyDetails', {partyId: party._id}]">{{party.name}}</a></h2>
+                            <p class="ma-description"
+                               style="padding:0 10px;margin-bottom:35px;margin-top: 6px;">{{party.description}}</p>
+                            <div layout="row">
+                                <div layout="row" layout-align="end end">
+                                    <div>
+                                        <div class="rsvps-sum">
+                                            <div class="rsvps-amount">{{party | rsvp:'yes'}}</div>
+                                            <div class="rsvps-title">Yes</div>
+                                        </div>
+                                        <div class="rsvps-sum">
+                                            <div class="rsvps-amount">{{party | rsvp:'maybe'}}</div>
+                                            <div class="rsvps-title">Maybe</div>
+                                        </div>
+                                        <div class="rsvps-sum">
+                                            <div class="rsvps-amount">{{party | rsvp:'no'}}</div>
+                                            <div class="rsvps-title">No</div>
+                                        </div>
+                                    </div>
+                                </div>
+                            </div>
+                        </md-card-content>
+                    </md-card>
                 </div>
-                <div class="ma-rsvp-title">
-                  NO
+            </md-content>
+        </div>
+        <div flex="50" layout="row" style="min-height:300px;">
+            <sebm-google-map
+                    style="width: 100%; min-height:300px;"
+                    flex layout="row"
+                    [latitude]="0"
+                    [longitude]="0"
+                    [zoom]="1">
+                <div *ngFor="let party of parties">
+                    <sebm-google-map-marker
+                            *ngIf="party.location.lat"
+                            [latitude]="party.location.lat"
+                            [longitude]="party.location.lng">
+                    </sebm-google-map-marker>
                 </div>
-              </div>
-            </div>
-          </div>
+            </sebm-google-map>
         </div>
-      </li>
-      <li class="list-group-item">
-        <pagination-controls (change)="onPageChanged($event.page)"></pagination-controls>
-      </li>
-    </ul>
-  </div>
-  <div class="col-md-6">
-    <ul class="list-group">
-      <li class="list-group-item">
-        <sebm-google-map
-                [latitude]="0"
-                [longitude]="0"
-                [zoom]="1">
-          <div *ngFor="let party of parties">
-            <sebm-google-map-marker
-                    *ngIf="party.location.lat"
-                    [latitude]="party.location.lat"
-                    [longitude]="party.location.lng">
-            </sebm-google-map-marker>
-          </div>
-        </sebm-google-map>
-      </li>
-    </ul>
-  </div>
-</div>
\ No newline at end of file
+    </div>
+</md-content>
\ No newline at end of file
diff --git a/client/imports/parties-list/parties-list.ts b/client/imports/parties-list/parties-list.ts
index 0c2a4be..be4f711 100644
--- a/client/imports/parties-list/parties-list.ts
+++ b/client/imports/parties-list/parties-list.ts
@@ -12,12 +12,13 @@ import { RsvpPipe } from '../pipes/pipes.ts';
 import { Meteor } from 'meteor/meteor';
 import {ANGULAR2_GOOGLE_MAPS_DIRECTIVES} from 'angular2-google-maps/core';
 import {MATERIAL_DIRECTIVES} from 'ng2-material';
+import {MD_INPUT_DIRECTIVES} from '@angular2-material/input';
 
 @Component({
   selector: 'parties-list',
   viewProviders: [PaginationService],
   templateUrl: '/client/imports/parties-list/parties-list.html',
-  directives: [MATERIAL_DIRECTIVES, ANGULAR2_GOOGLE_MAPS_DIRECTIVES, PartiesForm, RouterLink, PaginationControlsCmp],
+  directives: [MATERIAL_DIRECTIVES, ANGULAR2_GOOGLE_MAPS_DIRECTIVES, PartiesForm, RouterLink, PaginationControlsCmp, MD_INPUT_DIRECTIVES],
   pipes: [PaginatePipe, RsvpPipe]
 })
 @InjectUser()
-- 
2.7.4


From 9d13627db818998b0d4420a9399b061acf84cc4d Mon Sep 17 00:00:00 2001
From: Uri Goldshtein <uri.goldshtein@gmail.com>
Date: Sat, 14 May 2016 20:19:07 +0300
Subject: [PATCH 160/171] Step 18.10: Add some style

---
 client/imports/parties-list/_parties-list.scss | 150 +++++++------------------
 1 file changed, 43 insertions(+), 107 deletions(-)

diff --git a/client/imports/parties-list/_parties-list.scss b/client/imports/parties-list/_parties-list.scss
index 3393841..d6512b5 100644
--- a/client/imports/parties-list/_parties-list.scss
+++ b/client/imports/parties-list/_parties-list.scss
@@ -1,125 +1,61 @@
-.ma-add-button-container {
-  button.btn {
-    background: $color3;
-    float: right;
-    margin-right: 5px;
-    outline: none;
-    i {
-      color: $color5;
-    }
-  }
-}
-
-.ma-parties-col {
-  padding-top: 20px;
-}
-
-.ma-filters {
-  margin-bottom: 10px;
+.new-party-form-container {
+  margin: 20px;
+  border: 1px gainsboro solid;
 }
-
-.ma-party-item {
-  .ma-party-name {
-    margin-bottom: 20px;
-    a {
-      color: $color6;
-      text-decoration: none !important;
-      font-weight: 400;
-    }
+.ma-parties-list {
+  .sebm-google-map {
+    box-sizing: border-box;
+    -webkit-flex: 1;
+    -ms-flex: 1;
+    flex: 1;
+    -webkit-flex-direction: row;
+    -ms-flex-direction: row;
+    flex-direction: row;
+    box-sizing: border-box;
+    display: -webkit-flex;
+    display: -ms-flexbox;
+    display: flex;
   }
-  .ma-party-description {
-    color: $color6;
-    font-weight: 300;
-    padding-left: 18px;
-    font-size: 14px;
+
+  .angular-google-map-container {
+    box-sizing: border-box;
+    -webkit-flex: 1;
+    -ms-flex: 1;
+    flex: 1;
   }
 
-  .ma-remove {
-    color: lighten($color7, 20%);
-    position: absolute;
-    right: 20px;
-    top: 20px;
-    &:hover {
-      color: $color7;
+  .rsvps-sum {
+    float: left;
+    width: 50px;
+    text-align: center;
+    .rsvps-amount {
+      font-size: 24px;
+    }
+    .rsvps-title {
+      font-size: 13px;
+      color: #aaa;
     }
   }
 
-  .ma-party-item-bottom {
-    padding-top: 10px;
-    .ma-posted-by-col {
-      .ma-posted-by {
-        color: darken($color4, 30%);
-        font-size: 12px;
-      }
-      .ma-everyone-invited {
-        @media (max-width: 400px) {
-          display: block;
-          i {
-            margin-left: 0px !important;
-          }
-        }
-        font-size: 12px;
-        color: darken($color4, 10%);
-        i {
-          color: darken($color4, 10%);
-          margin-left: 5px;
-        }
-      }
+  .ma-party {
+    .party-image {
+      background-size: cover;
+      width: 100%;
+      height: 200px;
     }
 
-    .ma-rsvp-buttons {
-      input.btn {
-        color: darken($color3, 20%);
-        background: transparent !important;
-        outline: none;
-        padding-left: 0;
-        &:active {
-          box-shadow: none;
-        }
-        &:hover {
-          color: darken($color3, 30%);
-        }
-        &.btn-primary {
-          color: lighten($color3, 10%);
-          border: 0;
-          background: transparent !important;
-        }
+    .ma-name {
+      a {
+        text-decoration: none;
+        color: #333;
       }
     }
+    .ma-description {
 
-    .ma-rsvp-sum {
-      width: 160px;
-      @media (min-width: 400px) {
-        float: right;
-      }
-      @media (max-width: 400px) {
-        margin: 0 auto;
-      }
-    }
-    .ma-rsvp-amount {
-      display: inline-block;
-      text-align: center;
-      width: 50px;
-      .ma-amount {
-        font-weight: bold;
-        font-size: 20px;
-      }
-      .ma-rsvp-title {
-        font-size: 11px;
-        color: #aaa;
-        text-transform: uppercase;
-      }
     }
   }
 }
 
-.ma-angular-map-col {
-  .angular-google-map-container, .angular-google-map {
-    height: 100%;
-    width: 100%;
-  }
-}
-
 .search-form {
   margin-bottom: 1em;
-}
+}
\ No newline at end of file
-- 
2.7.4


From bbd84f61113db10d90e4d24a18f7fb6799e37399 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Sat, 6 Feb 2016 11:22:54 +0200
Subject: [PATCH 161/171] Step 18.11: Import the directives in the party
 details page

---
 client/imports/party-details/party-details.ts | 6 +++++-
 1 file changed, 5 insertions(+), 1 deletion(-)

diff --git a/client/imports/party-details/party-details.ts b/client/imports/party-details/party-details.ts
index f29210d..b416838 100644
--- a/client/imports/party-details/party-details.ts
+++ b/client/imports/party-details/party-details.ts
@@ -7,11 +7,15 @@ import { MeteorComponent } from 'angular2-meteor';
 import { DisplayName } from '../pipes/pipes.ts';
 import { Mongo } from 'meteor/mongo';
 import {ANGULAR2_GOOGLE_MAPS_DIRECTIVES, MouseEvent} from 'angular2-google-maps/core';
+import {MATERIAL_DIRECTIVES} from 'ng2-material';
+import {MD_INPUT_DIRECTIVES} from '@angular2-material/input';
+import {MdCheckbox} from '@angular2-material/checkbox';
+
 
 @Component({
   selector: 'party-details',
   templateUrl: '/client/imports/party-details/party-details.html',
-  directives: [RouterLink, ANGULAR2_GOOGLE_MAPS_DIRECTIVES],
+  directives: [RouterLink, ANGULAR2_GOOGLE_MAPS_DIRECTIVES, MATERIAL_DIRECTIVES, MD_INPUT_DIRECTIVES, MdCheckbox],
   pipes: [DisplayName]
 })
 @RequireUser()
-- 
2.7.4


From 158abed95c3389e3337398336c7077150edecf51 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Sat, 6 Feb 2016 11:23:20 +0200
Subject: [PATCH 162/171] Step 18.12: Update the layout of the party details
 page

---
 client/imports/party-details/party-details.html | 106 ++++++++++++------------
 1 file changed, 51 insertions(+), 55 deletions(-)

diff --git a/client/imports/party-details/party-details.html b/client/imports/party-details/party-details.html
index a22e89c..1cc65e7 100644
--- a/client/imports/party-details/party-details.html
+++ b/client/imports/party-details/party-details.html
@@ -1,60 +1,56 @@
-<div class="row ma-party-details-container">
-  <div class="col-sm-6 col-sm-offset-3">
+<div layout="row" flex class="ma-party-details" *ngIf="party">
+  <div flex="33" offset="33">
+    <md-content class="new-party-form-container">
+      <md-toolbar>
+        <div class="md-toolbar-tools">
+          <h3>Your party details:</h3>
+        </div>
+      </md-toolbar>
+      <form layout="column">
+        <md-input-container>
+          <label>Party Name: </label>
+          <md-input [disabled]="!isOwner" [(ngModel)]="party.name"></md-input>
+        </md-input-container>
+        <md-input-container>
+          <label>Party Description</label>
+          <md-input [disabled]="!isOwner" [(ngModel)]="party.description"></md-input>
+        </md-input-container>
+        <md-input-container>
+          <label>Location name</label>
+          <md-input [disabled]="!isOwner" [(ngModel)]="party.location.name"></md-input>
+        </md-input-container>
+        <md-checkbox [(checked)]="party.public" aria-label="Public">
+          Is public
+        </md-checkbox>
 
-    <legend>View and Edit Your Party Details:</legend>
-    <form class="form-horizontal" (submit)="saveParty(party)" *ngIf="party">
-      <div class="form-group">
-        <label>Party Name</label>
-        <input [disabled]="!isOwner" type="text" [(ngModel)]="party.name" class="form-control">
-      </div>
-      <div class="form-group">
-        <label>Description</label>
-        <input [disabled]="!isOwner" type="text" [(ngModel)]="party.description" class="form-control">
-      </div>
-      <div class="form-group">
-        <label>Location name</label>
-        <input [disabled]="!isOwner" type="text" [(ngModel)]="party.location.name" class="form-control">
-      </div>
-      <div class="form-group">
-        <button [disabled]="!isOwner" type="submit" class="btn btn-primary">Save</button>
-        <button [routerLink]="['/PartiesList']" class="btn">Back</button>
-      </div>
-    </form>
+        <div layout="row" layout-align="left">
+          <button [disabled]="!isOwner" type="submit" md-raised-button class="md-raised md-primary">Save</button>
+          <button [routerLink]="['/PartiesList']" md-raised-button class="md-raised">Back</button>
+        </div>
 
-    <div class="ma-invite-list" ng-show="partyDetails.canInvite()">
-      <h3>
-        Users to invite:
-      </h3>
-      <ul>
-        <li *ngFor="let user of users">
-          <div>{{ user | displayName }}</div>
-          <button (click)="invite(user)" class="btn btn-primary btn-sm">Invite</button>
-        </li>
-      </ul>
-      <div *ngIf="isInvited">
-        <h2>Reply to the invitation</h2>
-        <input type="button" class="btn btn-primary" value="I'm going!" (click)="reply('yes')">
-        <input type="button" class="btn btn-warning" value="Maybe" (click)="reply('maybe')">
-        <input type="button" class="btn btn-danger" value="No" (click)="reply('no')">
-      </div>
-    </div>
+        <md-list>
+          <md-subheader class="md-no-sticky">Users to invite:</md-subheader>
+          <md-list-item *ngFor="let user of users">
+            <div>{{ user | displayName }}</div>
+            <button (click)="invite(user)" md-raised-button class="md-raised">Invite</button>
+          </md-list-item>
+        </md-list>
 
-    <h3 class="ma-map-title">
-      Click the map to set the party location
-    </h3>
-
-    <div class="angular-google-map-container">
-      <sebm-google-map
-              [latitude]="lat || centerLat"
-              [longitude]="lng || centerLng"
-              [zoom]="8"
-              (mapClick)="mapClicked($event)">
-        <sebm-google-map-marker
-                *ngIf="lat && lng"
-                [latitude]="lat"
-                [longitude]="lng">
-        </sebm-google-map-marker>
-      </sebm-google-map>
-    </div>
+        <div class="angular-google-map-container">
+          <sebm-google-map
+                  style="height: 300px;"
+                  [latitude]="lat || centerLat"
+                  [longitude]="lng || centerLng"
+                  [zoom]="8"
+                  (mapClick)="mapClicked($event)">
+            <sebm-google-map-marker
+                    *ngIf="lat && lng"
+                    [latitude]="lat"
+                    [longitude]="lng">
+            </sebm-google-map-marker>
+          </sebm-google-map>
+        </div>
+      </form>
+    </md-content>
   </div>
 </div>
-- 
2.7.4


From 737446723c2d9773f9edcc0a402d2084dcbce024 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Sat, 6 Feb 2016 13:38:10 +0200
Subject: [PATCH 163/171] Step 18.13: Replace login buttons with custom buttons

---
 client/app.html | 9 ++++++++-
 1 file changed, 8 insertions(+), 1 deletion(-)

diff --git a/client/app.html b/client/app.html
index 4ad9b7e..50e4d9c 100644
--- a/client/app.html
+++ b/client/app.html
@@ -4,7 +4,14 @@
   </h2>
   <span flex></span>
   <div class="navbar-right navbar-text">
-    <login-buttons></login-buttons>
+    <div [hidden]="user">
+      <button md-button [routerLink]="['/Login']" >Login</button>
+      <button md-button [routerLink]="['/Signup']">Sign up</button>
+    </div>
+    <div [hidden]="!user">
+      <span>{{ user | displayName }}</span>
+      <button md-button (click)="logout()">Logout</button>
+    </div>
   </div>
 </md-toolbar>
 <router-outlet flex-gt-sm layout-gt-sm="row"></router-outlet>
\ No newline at end of file
-- 
2.7.4


From 176affe7ecb8f20c88de8b49747ea8df0041e514 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Sat, 6 Feb 2016 13:38:32 +0200
Subject: [PATCH 164/171] Step 18.14: Add logic to support custom login

---
 client/app.ts | 28 ++++++++++++++++++++++++----
 1 file changed, 24 insertions(+), 4 deletions(-)

diff --git a/client/app.ts b/client/app.ts
index 99a1a61..4154223 100644
--- a/client/app.ts
+++ b/client/app.ts
@@ -2,6 +2,7 @@ import 'reflect-metadata';
 import 'zone.js/dist/zone';
 import {MATERIAL_PROVIDERS, MATERIAL_DIRECTIVES} from 'ng2-material';
 import {MdToolbar} from '@angular2-material/toolbar';
+import {MeteorComponent} from 'angular2-meteor';
 
 import { Component, provide } from '@angular/core';
 import { bootstrap } from 'angular2-meteor-auto-bootstrap';
@@ -12,17 +13,36 @@ import { PartyDetails } from './imports/party-details/party-details.ts';
 import '../collections/methods.ts';
 import {ANGULAR2_GOOGLE_MAPS_PROVIDERS} from 'angular2-google-maps/core';
 import {LoginButtons} from 'angular2-meteor-accounts-ui';
-import '../node_modules/@angular2-material/toolbar/toolbar.css'
+import '../node_modules/@angular2-material/toolbar/toolbar.css';
+import {RouterLink} from '@angular/router-deprecated';
+import {DisplayName} from './imports/pipes/pipes.ts';
+import {InjectUser} from 'angular2-meteor-accounts-ui';
+import {Login} from './imports/auth/login.ts';
+import {Signup} from './imports/auth/signup.ts';
+import {Recover} from './imports/auth/recover.ts';
+
+
 
 @Component({
   selector: 'app',
   templateUrl: '/client/app.html',
-  directives: [ROUTER_DIRECTIVES, LoginButtons, MATERIAL_DIRECTIVES, MdToolbar]
+  directives: [ROUTER_DIRECTIVES, LoginButtons, MATERIAL_DIRECTIVES, MdToolbar, RouterLink],
+  pipes: [DisplayName]
 })
 @RouteConfig([
   { path: '/', as: 'PartiesList', component: PartiesList },
-  { path: '/party/:partyId', as: 'PartyDetails', component: PartyDetails }
+  { path: '/party/:partyId', as: 'PartyDetails', component: PartyDetails },
+  { path: '/login', as: 'Login', component: Login },
+  { path: '/signup', as: 'Signup', component: Signup },
+  { path: '/recover', as: 'Recover', component: Recover }
 ])
-class Socially {}
+@InjectUser()
+class Socially extends MeteorComponent {
+  user: Meteor.User;
+
+  constructor() {
+    super();
+  }
+}
 
 bootstrap(Socially, [MATERIAL_PROVIDERS, ROUTER_PROVIDERS, ANGULAR2_GOOGLE_MAPS_PROVIDERS, provide(APP_BASE_HREF, { useValue: '/' })]);
-- 
2.7.4


From aa3fb3d22b8a9f90c2a21bd569c5b68adf7ef2d1 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Sat, 6 Feb 2016 14:11:40 +0200
Subject: [PATCH 165/171] Step 18.15: Create the login component

---
 client/imports/auth/login.ts | 43 +++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 43 insertions(+)
 create mode 100644 client/imports/auth/login.ts

diff --git a/client/imports/auth/login.ts b/client/imports/auth/login.ts
new file mode 100644
index 0000000..935e519
--- /dev/null
+++ b/client/imports/auth/login.ts
@@ -0,0 +1,43 @@
+import {Component} from '@angular/core';
+import {MeteorComponent} from 'angular2-meteor';
+import {FormBuilder, ControlGroup, Validators} from '@angular/common';
+import {MATERIAL_DIRECTIVES} from 'ng2-material';
+import {Router, RouterLink} from '@angular/router-deprecated';
+import {MD_INPUT_DIRECTIVES} from '@angular2-material/input';
+import {MdToolbar} from '@angular2-material/toolbar';
+
+@Component({
+  selector: 'login',
+  directives: [MATERIAL_DIRECTIVES, RouterLink, MD_INPUT_DIRECTIVES, MdToolbar],
+  templateUrl: '/client/imports/auth/login.html'
+})
+export class Login extends MeteorComponent {
+  loginForm: ControlGroup;
+  error: string;
+
+  constructor(private router: Router) {
+    super();
+
+    let fb = new FormBuilder();
+
+    this.loginForm = fb.group({
+      email: ['', Validators.required],
+      password: ['', Validators.required]
+    });
+
+    this.error = '';
+  }
+
+  login(credentials) {
+    if (this.loginForm.valid) {
+      Meteor.loginWithPassword(credentials.email, credentials.password, (err) => {
+        if (err) {
+          this.error = err;
+        }
+        else {
+          this.router.navigate(['/PartiesList']);
+        }
+      });
+    }
+  }
+}
\ No newline at end of file
-- 
2.7.4


From a1b2d1613830a00fa9a1e947aef12445f0af9e7a Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Sat, 6 Feb 2016 14:11:48 +0200
Subject: [PATCH 166/171] Step 18.16: Create the login view

---
 client/imports/auth/login.html | 33 +++++++++++++++++++++++++++++++++
 1 file changed, 33 insertions(+)
 create mode 100644 client/imports/auth/login.html

diff --git a/client/imports/auth/login.html b/client/imports/auth/login.html
new file mode 100644
index 0000000..40581a6
--- /dev/null
+++ b/client/imports/auth/login.html
@@ -0,0 +1,33 @@
+<md-content layout="row" layout-align="center start" layout-fill layout-margin>
+    <md-whiteframe layout="column" flex flex-md="50" flex-lg="50" flex-gt-lg="33" class="md-whiteframe-z2" layout-fill>
+        <md-toolbar class="md-primary" color="primary">
+            Sign in
+        </md-toolbar>
+        <div layout="column" layout-fill layout-margin layout-padding>
+            <div layout="row" layout-fill layout-margin>
+                <p class="md-body-2"> Sign in with your email</p>
+            </div>
+
+            <form [ngFormModel]="loginForm" #f="ngForm" (submit)="login(f.value)" layout="column" layout-fill
+                  layout-padding layout-margin>
+                <md-input ngControl="email" placeholder="Email" aria-label="email"></md-input>
+                <md-input type="password" placeholder="Password" ngControl="password" aria-label="password"></md-input>
+
+                <div layout="row" layout-align="space-between center">
+                    <button md-button [routerLink]="['/Recover']">Forgot password?</button>
+                    <button md-raised-button class="md-primary" type="submit" aria-label="login">Sign In
+                    </button>
+                </div>
+            </form>
+            <div [hidden]="error == ''">
+                <md-toolbar class="md-warn" layout="row" layout-fill layout-padding layout-margin>
+                    <p class="md-body-1">{{ error }}</p>
+                </md-toolbar>
+            </div>
+            <md-divider></md-divider>
+            <div layout="row" layout-align="center">
+                <button md-button [routerLink]="['/Signup']">Need an account?</button>
+            </div>
+        </div>
+    </md-whiteframe>
+</md-content>
\ No newline at end of file
-- 
2.7.4


From 6a149183a839347404233f152c3b987e5f8e18a7 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Sat, 6 Feb 2016 14:12:04 +0200
Subject: [PATCH 167/171] Step 18.17: Create the signup component

---
 client/imports/auth/signup.ts | 43 +++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 43 insertions(+)
 create mode 100644 client/imports/auth/signup.ts

diff --git a/client/imports/auth/signup.ts b/client/imports/auth/signup.ts
new file mode 100644
index 0000000..dc07078
--- /dev/null
+++ b/client/imports/auth/signup.ts
@@ -0,0 +1,43 @@
+import {Component} from '@angular/core';
+import {MeteorComponent} from 'angular2-meteor';
+import {FormBuilder, ControlGroup, Validators} from '@angular/common';
+import {MATERIAL_DIRECTIVES} from 'ng2-material';
+import {Router, RouterLink} from '@angular/router-deprecated';
+import {MD_INPUT_DIRECTIVES} from '@angular2-material/input';
+import {MdToolbar} from '@angular2-material/toolbar';
+
+@Component({
+  selector: 'signup',
+  directives: [MATERIAL_DIRECTIVES, RouterLink, MD_INPUT_DIRECTIVES, MdToolbar],
+  templateUrl: '/client/imports/auth/signup.html'
+})
+export class Signup extends MeteorComponent {
+  signupForm: ControlGroup;
+  error: string;
+
+  constructor(private router: Router) {
+    super();
+
+    let fb = new FormBuilder();
+
+    this.signupForm = fb.group({
+      email: ['', Validators.required],
+      password: ['', Validators.required]
+    });
+
+    this.error = '';
+  }
+
+  signup(credentials) {
+    if (this.signupForm.valid) {
+      Accounts.createUser({ email: credentials.email, password: credentials.password}, (err) => {
+        if (err) {
+          this.error = err;
+        }
+        else {
+          this.router.navigate(['/PartiesList']);
+        }
+      });
+    }
+  }
+}
\ No newline at end of file
-- 
2.7.4


From 5841c78bb378b9f426557856138c007ccce1d041 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Sat, 6 Feb 2016 14:12:12 +0200
Subject: [PATCH 168/171] Step 18.18: Create the signup view

---
 client/imports/auth/signup.html | 26 ++++++++++++++++++++++++++
 1 file changed, 26 insertions(+)
 create mode 100644 client/imports/auth/signup.html

diff --git a/client/imports/auth/signup.html b/client/imports/auth/signup.html
new file mode 100644
index 0000000..65cf9d8
--- /dev/null
+++ b/client/imports/auth/signup.html
@@ -0,0 +1,26 @@
+<md-content layout="row" layout-align="center start" layout-fill layout-margin>
+    <md-whiteframe layout="column" flex flex-md="50" flex-lg="50" flex-gt-lg="33" class="md-whiteframe-z2" layout-fill>
+        <md-toolbar class="md-primary" color="primary">
+            Sign up
+        </md-toolbar>
+        <div layout="column" layout-fill layout-margin layout-padding>
+            <form [ngFormModel]="signupForm" #f="ngForm" (submit)="signup(f.value)" layout="column" layout-fill layout-padding layout-margin>
+                <md-input type="text" ngControl="email" aria-label="email" placeholder="Email"></md-input>
+                <md-input type="password" ngControl="password" aria-label="password" placeholder="Password"></md-input>
+                <div layout="row" layout-align="space-between center">
+                    <button md-raised-button class="md-primary" type="submit" aria-label="login">Sign Up!
+                    </button>
+                </div>
+            </form>
+        </div>
+        <div [hidden]="error == ''">
+            <md-toolbar class="md-warn" layout="row" layout-fill layout-padding layout-margin>
+                <p class="md-body-1">{{ error }}</p>
+            </md-toolbar>
+        </div>
+        <md-divider></md-divider>
+        <div layout="row" layout-align="center">
+            <button md-button [routerLink]="['/Login']">Already a user?</button>
+        </div>
+    </md-whiteframe>
+</md-content>
\ No newline at end of file
-- 
2.7.4


From 0267a2f246581e20f3c03d8abf2839a942544072 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Sat, 6 Feb 2016 14:15:27 +0200
Subject: [PATCH 169/171] Step 18.19: Create the recover component

---
 client/imports/auth/recover.ts | 42 ++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 42 insertions(+)
 create mode 100644 client/imports/auth/recover.ts

diff --git a/client/imports/auth/recover.ts b/client/imports/auth/recover.ts
new file mode 100644
index 0000000..7e65e55
--- /dev/null
+++ b/client/imports/auth/recover.ts
@@ -0,0 +1,42 @@
+import {Component} from '@angular/core';
+import {MeteorComponent} from 'angular2-meteor';
+import {FormBuilder, ControlGroup, Validators} from '@angular/common';
+import {MATERIAL_DIRECTIVES} from 'ng2-material';
+import {Router, RouterLink} from '@angular/router-deprecated';
+import {MD_INPUT_DIRECTIVES} from '@angular2-material/input';
+import {MdToolbar} from '@angular2-material/toolbar';
+
+@Component({
+  selector: 'recover',
+  directives: [MATERIAL_DIRECTIVES, RouterLink, MD_INPUT_DIRECTIVES, MdToolbar],
+  templateUrl: '/client/imports/auth/recover.html'
+})
+export class Recover extends MeteorComponent {
+  recoverForm: ControlGroup;
+  error: string;
+
+  constructor(private router: Router) {
+    super();
+
+    let fb = new FormBuilder();
+
+    this.recoverForm = fb.group({
+      email: ['', Validators.required]
+    });
+
+    this.error = '';
+  }
+
+  recover(credentials) {
+    if (this.recoverForm.valid) {
+      Accounts.forgotPassword({ email: credentials.email}, (err) => {
+        if (err) {
+          this.error = err;
+        }
+        else {
+          this.router.navigate(['/PartiesList']);
+        }
+      });
+    }
+  }
+}
\ No newline at end of file
-- 
2.7.4


From 570edc46f02868b51114a416eebf8f8367c23455 Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Sat, 6 Feb 2016 14:15:37 +0200
Subject: [PATCH 170/171] Step 18.20: Create the recover view

---
 client/imports/auth/recover.html | 24 ++++++++++++++++++++++++
 1 file changed, 24 insertions(+)
 create mode 100644 client/imports/auth/recover.html

diff --git a/client/imports/auth/recover.html b/client/imports/auth/recover.html
new file mode 100644
index 0000000..3b3a2a8
--- /dev/null
+++ b/client/imports/auth/recover.html
@@ -0,0 +1,24 @@
+<md-content layout="row" layout-align="center start" layout-fill layout-margin>
+    <md-whiteframe layout="column" flex flex-md="50" flex-lg="50" flex-gt-lg="33" class="md-whiteframe-z2" layout-fill>
+        <md-toolbar class="md-primary" color="primary">
+            Recover Your Password
+        </md-toolbar>
+        <div layout="column" layout-fill layout-margin layout-padding>
+            <form [ngFormModel]="recoverForm" #f="ngForm" (submit)="recover(f.value)" layout="column" layout-fill layout-padding layout-margin>
+                <md-input type="text" ngControl="email" aria-label="email" placeholder="Email"></md-input>
+                <div layout="row" layout-align="space-between center">
+                    <button md-raised-button class="md-primary" type="submit" aria-label="login">Recover
+                    </button>
+                </div>
+            </form>
+            <div [hidden]="error == ''">
+                <md-toolbar class="md-warn" layout="row" layout-fill layout-padding layout-margin>
+                    <p class="md-body-1">{{ error }}</p>
+                </md-toolbar>
+            </div>
+            <div layout="row" layout-align="center">
+                <button md-button [routerLink]="['/Login']">Remember your password?</button>
+            </div>
+        </div>
+    </md-whiteframe>
+</md-content>
\ No newline at end of file
-- 
2.7.4


From 10b6448202c4063491eae38ff824c090cae11bec Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Sat, 6 Feb 2016 14:16:57 +0200
Subject: [PATCH 171/171] Step 18.21: Add the logout method to the main
 component

---
 client/app.ts | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/client/app.ts b/client/app.ts
index 4154223..626d885 100644
--- a/client/app.ts
+++ b/client/app.ts
@@ -43,6 +43,12 @@ class Socially extends MeteorComponent {
   constructor() {
     super();
   }
+
+  logout() {
+    this.autorun(() => {
+      Meteor.logout();
+    });
+  }
 }
 
 bootstrap(Socially, [MATERIAL_PROVIDERS, ROUTER_PROVIDERS, ANGULAR2_GOOGLE_MAPS_PROVIDERS, provide(APP_BASE_HREF, { useValue: '/' })]);
-- 
2.7.4

